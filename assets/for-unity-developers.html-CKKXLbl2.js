import{_ as p,c as r,e as l,a,d as s,b as t,w as n,r as h,o as d}from"./app-9T6lAodh.js";const o={},g={class:"hint-container details"};function c(C,i){const e=h("RouteLink"),k=h("video-embed");return d(),r("div",null,[i[39]||(i[39]=l('<p>Needle Engine 提供与 Unity Editor 的紧密集成。这使得开发者和设计师都能在熟悉的环境中协同工作，交付快速、高性能且轻量级的 Web 体验。</p><p>以下指南主要面向具有 Unity3D 背景的开发者，但也可能对具有 Web 或 three.js 背景的开发者有所帮助。它涵盖了 Unity 与 three.js 或 Needle Engine 中如何完成任务的话题。</p><p>如果您完全不熟悉 Typescript 和 Javascript，并且想深入了解如何为 Needle Engine 编写脚本，那么我们还建议阅读 <a href="./typescript-esscriptsial">Typescript Essentials 指南</a> 以基本了解 C# 和 Javascript/Typescript 之间的区别。</p><p>如果您想跟着编写代码，可以<a href="https://engine.needle.tools/new" target="_blank" rel="noopener noreferrer">打开 engine.needle.tools/new</a> 来创建一个可以在浏览器中编辑的小项目 ⚡</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span>基础知识</span></a></h2><p>Needle Engine 是一个运行在 <a href="https://threejs.org/" target="_blank" rel="noopener noreferrer">three.js</a> 之上的 3D Web 引擎。Three.js 是 Web 上最流行的基于 WebGL 的 3D 渲染库之一。无论何时我们在 Needle Engine 中提到 <code>gameObject</code>，我们<em>实际上</em>也在谈论一个 three.js 的 <code>Object3D</code>，它是 three.js 中任何对象的基类型。这两个术语可以互换使用。任何 <code>gameObject</code> <em>就是</em>一个 <code>Object3D</code>。</p><p>这也意味着——如果您已经熟悉 three.js——使用 Needle Engine 将完全没有问题。所有您可以用 three.js 做的事情，都可以在 Needle Engine 中完成。如果您已经在使用某些库，那么您也可以在基于 Needle Engine 的环境中使用它们。</p>',7)),a("p",null,[i[2]||(i[2]=s("注意：")),i[3]||(i[3]=a("strong",null,[s("Needle Engine 的 Exporter "),a("em",null,"不会"),s("将您现有的 C# 代码编译到 Web Assembly")],-1)),i[4]||(i[4]=s("。 虽然使用 Web Assembly ")),i[5]||(i[5]=a("em",null,"可能",-1)),i[6]||(i[6]=s("会在运行时带来更好的性能，但这会大大牺牲迭代速度和构建 Web 体验的灵活性。请阅读更多关于我们的")),t(e,{to:"/lang/zh/vision.html"},{default:n(()=>i[0]||(i[0]=[s("愿景")])),_:1}),i[7]||(i[7]=s("和")),t(e,{to:"/lang/zh/technical-overview.html"},{default:n(()=>i[1]||(i[1]=[s("技术概览")])),_:1}),i[8]||(i[8]=s("。"))]),a("details",g,[i[9]||(i[9]=a("summary",null,"如何使用 Needle Engine 创建新的 Unity 项目？(视频)",-1)),t(k,{src:"https://www.youtube.com/watch?v=gZX_sqrne8U",limit_height:""})]),i[40]||(i[40]=l(`<h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>创建组件</span></a></h2><p>在 Unity 中，您通过派生自 <code>MonoBehaviour</code> 来创建新组件：</p><div class="language-csharp" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">using</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> UnityEngine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">public</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> :</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MonoBehaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>另一方面，Needle Engine 中的自定义组件编写如下：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>脚本字段</span></a></h2><h3 id="serializable" tabindex="-1"><a class="header-anchor" href="#serializable"><span>serializable</span></a></h3><p>如果您见过一些 Needle Engine 脚本，您可能注意到有些变量的声明上方带有 <code>@serializable</code> 注解。这是 Typescript 中的一个 Decorator（装饰器），可用于修改或注解代码。在 Needle Engine 中，它例如用于让核心序列化了解在从存储在 glTF 中的原始组件信息转换为 Component 实例时，我们期望在脚本中出现哪些类型。 考虑以下示例：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Object3D </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Behaviour</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myOtherComponent</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Object3D</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    someOtherObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Object3D</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>这告诉 Needle Engine，<code>myOtherComponent</code> 应该具有 <code>Behaviour</code> 类型。然后，当您的场景加载时，它将自动为该字段分配正确的引用。对于 <code>someOtherObject</code> 也是如此，我们想将其反序列化为 <code>Object3D</code> 引用。</p><p>请注意，在某些情况下可以省略类型。对于 Javascript 中的所有<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">原始类型</a>都可以这样做。这些类型包括 <code>boolean</code>、<code>number</code>、<code>bigint</code>、<code>string</code>、<code>null</code> 和 <code>undefined</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">()</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // &lt; 这里不需要类型，因为字段类型是原始类型</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myString</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h3 id="public-private" tabindex="-1"><a class="header-anchor" href="#public-private"><span>public 与 private</span></a></h3><p>没有 <code>private</code>、<code>public</code> 或 <code>protected</code> 等访问修饰符的字段，在 javascript 中默认是 <code>public</code></p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /// 没有访问修饰符意味着它是 public:</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // 显式地将其设为 private:</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myPrivateNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    protected</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myProtectedNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>方法也是如此。</p><h2 id="gameobjects" tabindex="-1"><a class="header-anchor" href="#gameobjects"><span>GameObjects 与场景</span></a></h2><p>要从组件访问当前场景，可以使用 <code>this.scene</code>，它等同于 <code>this.context.scene</code>，这为您提供了根 three.js 场景对象。</p><p>要从组件遍历层级结构，您可以迭代对象的子对象 使用 for 循环：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">let</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">++</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children[i])</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>或者您可以使用 <code>foreach</code> 等效写法进行迭代：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> child </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(child)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>您还可以使用 three.js 特定的方法通过 <a href="https://threejs.org/docs/#api/en/core/Object3D.traverse" target="_blank" rel="noopener noreferrer"><code>traverse</code></a> 方法快速递归遍历所有对象：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">//---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">traverse</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(obj))</span></span></code></pre></div><p>或者，要仅遍历可见对象，请改用 <a href="https://threejs.org/docs/#api/en/core/Object3D.traverseVisible" target="_blank" rel="noopener noreferrer"><code>traverseVisible</code></a>。</p><p>另一个相当有用的选项是，当您只想迭代可渲染对象时，您可以查询所有 Renderer 组件并像这样迭代它们：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> renderer </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getComponentsInChildren</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer))</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>有关获取组件的更多信息，请参阅下一节。</p><h2 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span>组件</span></a></h2>`,29)),a("p",null,[i[11]||(i[11]=s("Needle Engine 大量使用了类似于 Unity 的组件系统。这意味着您可以向场景中的任何 ")),i[12]||(i[12]=a("code",null,"Object3D",-1)),i[13]||(i[13]=s(" / ")),i[14]||(i[14]=a("code",null,"GameObject",-1)),i[15]||(i[15]=s(" 添加或移除组件。使用 ")),i[16]||(i[16]=a("code",null,"addNewComponent(<Object3D>, <ComponentType>)",-1)),i[17]||(i[17]=s(" 时，组件将被注册到引擎。 附加组件的事件方法将由引擎自动调用（例如 ")),i[18]||(i[18]=a("code",null,"update",-1)),i[19]||(i[19]=s(" 或 ")),i[20]||(i[20]=a("code",null,"onBeforeRender",-1)),i[21]||(i[21]=s("）。完整的事件方法列表可在")),t(e,{to:"/lang/zh/scripting.html#lifecycle-methods"},{default:n(()=>i[10]||(i[10]=[s("脚本文档")])),_:1}),i[22]||(i[22]=s("中找到。"))]),i[41]||(i[41]=l('<h4 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span>在场景中查找组件</span></a></h4><p>要获取组件，您可以使用与 Unity 类似的方法。请注意，以下示例使用 <code>Animator</code> 类型作为示例，但您也可以使用任何内置或由您创建的组件类型。</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>this.gameObject.getComponent(Animator)</code></td><td>获取 GameObject/Object3D 上的 <code>Animator</code> 组件。如果对象具有 Animator 组件，它将返回 <code>Animator</code> 实例，否则返回 <code>null</code>。</td></tr><tr><td><code>this.gameObject.getComponentInChildren(Animator)</code></td><td>获取 GameObject/Object3D 或其任何子对象上的第一个 <code>Animator</code> 组件。</td></tr><tr><td><code>this.gameObject.getComponentsInParents(Animator)</code></td><td>获取父级层级结构中（包括当前 GameObject/Object3D）的所有 animator 组件。</td></tr></tbody></table><p>这些方法也在静态 GameObject 类型上可用。例如，<code>GameObject.getComponent(this.gameObject, Animator)</code> 可用于获取传入的 GameObject/Object3D 上的 <code>Animator</code> 组件。</p><p>要在整个场景中搜索一个或多个组件，可以使用 <code>GameObject.findObjectOfType(Animator)</code> 或 <code>GameObject.findObjectsOfType(Animator)</code>。</p><h2 id="unity" tabindex="-1"><a class="header-anchor" href="#unity"><span>重命名的 Unity 类型</span></a></h2><p>我们引擎中的一些 Unity 特定类型被映射到不同的类型名称。请参见以下列表：</p><table><thead><tr><th>Unity 中的类型</th><th>Needle Engine 中的类型</th><th></th></tr></thead><tbody><tr><td><code>UnityEvent</code></td><td><code>EventList</code></td><td>UnityEvent 将导出为 <code>EventList</code> 类型（使用 <code>serializable(EventList)</code> 来反序列化 UnityEvents）。</td></tr><tr><td><code>GameObject</code></td><td><code>Object3D</code></td><td></td></tr><tr><td><code>Transform</code></td><td><code>Object3D</code></td><td>在 three.js 和 Needle Engine 中，GameObject 和 Transform 是相同的（没有 <code>Transform</code> 组件）。唯一的例外是当引用 <code>RectTransform</code> 时，它在 Needle Engine 中也是一个组件。</td></tr><tr><td><code>Color</code></td><td><code>RGBAColor</code></td><td>three.js 的 Color 类型没有 alpha 属性。因此，所有从 Unity 导出的 Color 类型都将导出为 <code>RGBAColor</code>，这是一个自定义的 Needle Engine 类型。</td></tr></tbody></table><h2 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>Transform</span></a></h2><p>Transform 数据可以直接在 <code>GameObject</code> / <code>Object3D</code> 上访问。与 Unity 不同，没有额外的 transform 组件来保存这些数据。</p><ul><li><code>this.gameObject.position</code> 是局部空间中的 vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.position" target="_blank" rel="noopener noreferrer">位置</a>。</li><li><code>this.gameObject.worldPosition</code> 是世界空间中的 vector3 位置。</li><li><code>this.gameObject.rotation</code> 是局部空间中的 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.rotation" target="_blank" rel="noopener noreferrer">欧拉旋转</a>。</li><li><code>this.gameObject.worldRotation</code> 是世界空间中欧拉角形式的欧拉旋转。</li><li><code>this.gameObject.quaternion</code> 是局部空间中的 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.quaternion" target="_blank" rel="noopener noreferrer">四元数旋转</a>。</li><li><code>this.gameObject.worldQuaternion</code> 是世界空间中的四元数旋转。</li><li><code>this.gameObject.scale</code> 是局部空间中的 vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.scale" target="_blank" rel="noopener noreferrer">缩放</a>。</li><li><code>this.gameObject.worldScale</code> 是世界空间中的 vector3 缩放。</li></ul><p>这里需要记住的主要区别是 three.js 中的 <code>position</code> 默认是局部空间位置，而在 Unity 中 <code>position</code> 是世界空间，并且使用 <code>localPosition</code> 来特意使用局部空间位置。下一节将解释如何在 three.js 中获取世界空间位置。</p><h3 id="..." tabindex="-1"><a class="header-anchor" href="#..."><span>世界坐标 - 位置、旋转、缩放...</span></a></h3><p>在 three.js（以及 Needle Engine）中，<code>object.position</code>、<code>object.rotation</code>、<code>object.scale</code> 都是局部空间坐标。这与 Unity 不同，在 Unity 中我们习惯于 <code>position</code> 是世界空间，并使用 <code>localPosition</code> 来特意使用局部空间位置。</p><p>如果您想在 Needle Engine 中访问世界坐标，我们提供了实用方法，您可以用于您的对象。调用 <code>getWorldPosition(yourObject)</code> 来计算世界位置。旋转/四元数和缩放也存在类似的方法。要访问这些方法，只需像这样从 Needle Engine 导入它们 <code>import { getWorldPosition } from &quot;@needle.tools/engine&quot;</code></p>',15)),a("p",null,[i[24]||(i[24]=s("请注意，像 ")),i[25]||(i[25]=a("code",null,"getWorldPosition",-1)),i[26]||(i[26]=s("、")),i[27]||(i[27]=a("code",null,"getWorldRotation",-1)),i[28]||(i[28]=s("、")),i[29]||(i[29]=a("code",null,"getWorldScale",-1)),i[30]||(i[30]=s(" 这些实用方法内部有一个 Vector3 实例缓冲区，并且仅供本地使用。这意味着您不应该在组件中缓存它们，否则您的缓存值最终会被覆盖。但在您的函数中多次调用 ")),i[31]||(i[31]=a("code",null,"getWorldPosition",-1)),i[32]||(i[32]=s(" 来进行计算是安全的，无需担心重复使用同一实例。如果您不确定这意味着什么，应该查看 ")),t(e,{to:"/lang/zh/getting-started/typescript-essentials.html#primitive-types"},{default:n(()=>i[23]||(i[23]=[s("Typescript Essentials 指南")])),_:1}),i[33]||(i[33]=s(" 中的")),i[34]||(i[34]=a("strong",null,"原始类型",-1)),i[35]||(i[35]=s("部分。"))]),i[42]||(i[42]=l(`<h2 id="-5" tabindex="-1"><a class="header-anchor" href="#-5"><span>时间</span></a></h2><p>使用 <code>this.context.time</code> 来获取时间数据：</p><ul><li><code>this.context.time.time</code> 是应用启动以来经过的时间。</li><li><code>this.context.time.deltaTime</code> 是自上一帧以来经过的时间。</li><li><code>this.context.time.frameCount</code> 是应用启动以来经过的帧数。</li><li><code>this.context.time.realtimeSinceStartup</code> 是应用启动以来未缩放的时间。</li></ul><p>也可以使用 <code>this.context.time.timeScale</code> 来特意减慢时间，例如用于慢动作效果。</p><h2 id="raycasting" tabindex="-1"><a class="header-anchor" href="#raycasting"><span>光线投射 (Raycasting)</span></a></h2><p>使用 <code>this.context.physics.raycast()</code> 执行光线投射并获取交集列表。如果您不传入任何选项，光线投射将使用当前激活的 <code>mainCamera</code> 从屏幕空间中的鼠标位置（或第一个触摸位置）执行。您也可以传入一个 <code>RaycastOptions</code> 对象，该对象包含各种设置，例如 <code>maxDistance</code>、要使用的相机或要测试的层。</p><p>使用 <code>this.context.physics.raycastFromRay(your_ray)</code> 使用 <a href="https://threejs.org/docs/#api/en/math/Ray" target="_blank" rel="noopener noreferrer">three.js ray</a> 执行光线投射。</p><p>请注意，默认情况下，上述调用是对可见场景对象进行光线投射。这与 Unity 不同，在 Unity 中您总是需要 colliders 才能击中对象。three.js 的默认解决方案既有优点也有缺点，其中一个主要缺点是根据您的场景几何体，它的性能可能相当慢。对 SkinnedMeshRenderers 进行光线投射时尤其慢。因此，通常建议将 Unity 中带有 SkinnedMeshRenderers 的对象设置为 <code>Ignore Raycast</code> 层，Needle Engine 默认也会忽略它们。</p><p>另一个选项是使用物理光线投射方法，该方法将只返回与场景中的 colliders 的碰撞。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">physics</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">engine</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">raycast</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>这是一个可编辑的<a href="https://stackblitz.com/edit/needle-engine-physics-raycast-example?file=src%2Fmain.ts,package.json,.gitignore" target="_blank" rel="noopener noreferrer">物理光线投射示例</a>。</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>输入 (Input)</span></a></h2><p>使用 <code>this.context.input</code> 轮询输入状态：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getPointerDown</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">            console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;POINTER DOWN&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>您还可以像这样订阅 <code>InputEvents</code> 枚举中的事件：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> InputEvents</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> NEPointerEvent </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onEnable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onDisable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // 建议在组件不再活动时也取消订阅事件</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">removeEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    inputPointerDown</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> (</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">evt</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> NEPointerEvent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(evt)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>如果您想自己处理输入，您也可以订阅<a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener noreferrer">浏览器提供的所有事件</a>（有很多）。例如，要订阅浏览器的 click 事件，您可以这样写：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">window</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ()</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;MOUSE CLICK&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>请注意，在这种情况下，您必须自己处理所有情况。例如，如果您的用户在桌面、移动设备或 VR 设备上访问您的网站，您可能需要使用不同的事件。Needle Engine 输入事件会自动处理这些情况（例如，<code>PointerDown</code> 会针对鼠标按下、触摸按下以及 VR 控制器按钮按下而触发）。</p><h2 id="inputsystem" tabindex="-1"><a class="header-anchor" href="#inputsystem"><span>InputSystem 回调</span></a></h2><p>类似于 Unity（参见 <a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.IPointerClickHandler.html" target="_blank" rel="noopener noreferrer">Unity 中的 IPointerClickHandler</a>），您也可以注册以在组件自身上接收输入事件。</p><p>为了使此功能正常工作，请确保您的对象在父级层级结构中具有 <code>ObjectRaycaster</code> 或 <code>GraphicRaycaster</code> 组件。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> PointerEventData </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> ReceiveClickEvent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> implements</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onPointerClick</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> PointerEventData</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> args)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>注意：<code>IPointerEventHandler</code> 使对象订阅所有可能的指针事件。对应的处理程序有：</p><ul><li><code>onPointerDown</code></li><li><code>onPointerUp</code></li><li><code>onPointerEnter</code></li><li><code>onPointerMove</code></li><li><code>onPointerExit</code></li><li><code>onPointerClick</code></li></ul><p>所有处理程序都有一个 <code>PointerEventData</code> 参数来描述事件。</p><h2 id="debug.log" tabindex="-1"><a class="header-anchor" href="#debug.log"><span>Debug.Log</span></a></h2><p>javascript 中的 <code>Debug.Log()</code> 等效写法是 <code>console.log()</code>。您也可以使用 <code>console.warn()</code> 或 <code>console.error()</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 42</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello web&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// 您可以传入任意数量的参数，如下所示：</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">findObjectOfType</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><h2 id="gizmos" tabindex="-1"><a class="header-anchor" href="#gizmos"><span>Gizmos</span></a></h2><p>在 Unity 中，您通常需要使用特殊方法来绘制 Gizmos，例如 <code>OnDrawGizmos</code> 或 <code>OnDrawGizmosSelected</code>。而在 Needle Engine 中，不存在这样的方法，您可以在脚本中的任何地方自由绘制 gizmos。请注意，此时也有责任 <em>不</em> 在例如您部署的 Web 应用中绘制它们（您只需通过 <code>if(isDevEnvironment))&quot;</code> 进行过滤）。</p><p>这是一个示例，用于绘制一个红色线框球体，持续一秒钟，例如用于可视化世界空间中的一个点。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Vector3 </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> point</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> Vector3</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Gizmos </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Gizmos</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">DrawWireSphere</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(hit</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">point</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.05</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0xff0000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>以下是一些可用的 gizmo 方法：</p><table><thead><tr><th>方法名</th><th></th></tr></thead><tbody><tr><td><code>Gizmos.DrawArrow</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox3</code></td><td></td></tr><tr><td><code>Gizmos.DrawDirection</code></td><td></td></tr><tr><td><code>Gizmos.DrawLine</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawSphere</code></td><td></td></tr><tr><td><code>Gizmos.DrawWireSphere</code></td><td></td></tr></tbody></table><h2 id="-6" tabindex="-1"><a class="header-anchor" href="#-6"><span>有用的实用方法</span></a></h2><p>从 <code>@needle-tools/engine</code> 导入，例如 <code>import { getParam } from &quot;@needle-tools/engine&quot;</code></p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>getParam()</code></td><td>检查 URL 参数是否存在。如果存在但没有值（例如 <code>?help</code>），返回 true；如果 URL 中未找到或设置为 0（例如 <code>?help=0</code>），返回 false；否则返回其值（例如 <code>?message=test</code>）。</td></tr><tr><td><code>isMobileDevice()</code></td><td>如果应用从移动设备访问，返回 true。</td></tr><tr><td><code>isDevEnvironment()</code></td><td>如果当前应用在本地服务器上运行，返回 true。</td></tr><tr><td><code>isMozillaXR()</code></td><td></td></tr><tr><td><code>isiOS</code></td><td></td></tr><tr><td><code>isSafari</code></td><td></td></tr></tbody></table><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> isMobileDevice </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">( </span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">isMobileDevice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">() )</span></span></code></pre></div><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> getParam </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// returns true</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myFlag </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> getParam</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;some_flag&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(myFlag)</span></span></code></pre></div><h2 id="web" tabindex="-1"><a class="header-anchor" href="#web"><span>Web 项目</span></a></h2><p>在 C# 中，您通常使用包含一个或多个项目的解决方案。在 Unity 中，这个解决方案由 Unity 管理，当您打开 C# 脚本时，它会打开项目并显示文件。 您通常使用 Unity 的内置包管理器安装包，以添加由 Unity 或其他开发者（来自您的团队，或例如通过 Unity 的 AssetStore）提供的功能。Unity 在使添加和管理包变得容易方面做得很好，您可能从未需要手动编辑像 <code>manifest.json</code> 这样的文件（这是 Unity 用来跟踪安装了哪些包的文件），或者从命令行运行命令来安装包。</p><p>在 Web 环境中，您使用 <code>npm</code> - Node 包管理器 - 来为您管理依赖项/包。它的基本作用与 Unity 的 PackageManager 相同 - 它从<em>某个</em>服务器（在这种上下文中通常称为 <em>registry</em>）安装（下载）包，并将它们放在一个名为 <code>node_modules</code> 的文件夹中。</p><p>在使用 Web 项目时，您的大部分依赖项都是从 <a href="https://npmjs.com/" target="_blank" rel="noopener noreferrer">npmjs.com</a> 安装的。它是 Web 项目中最流行的包 registry。</p><p>这是一个 package.json 可能看起来像的示例：</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">name</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@optional_org/package_name&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">version</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;1.0.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">scripts</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;vite --host&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  },</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">dependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.9-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	},</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">devDependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@types/three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;0.146.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@vitejs/plugin-basic-ssl</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^1.0.1&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">typescript</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^5.0.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^4.3.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite-plugin-compression</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^0.5.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	}</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>我们的默认模板使用 Vite 作为其打包器，并且没有预装任何前端框架。Needle Engine 对使用哪个框架没有偏好，因此您可以自由选择任何喜欢的框架。我们为 Vue.js、Svelte、Next.js、React 或 React Three Fiber 等流行框架提供了示例。</p><h2 id="-7" tabindex="-1"><a class="header-anchor" href="#-7"><span>安装包和依赖项</span></a></h2><p>要从 npm 安装依赖项，您可以在命令行（或终端）中打开您的 Web 项目，然后运行 <code>npm i &lt;包名&gt;</code>（<code>npm install</code> 的缩写）。 例如，运行 <code>npm i @needle-tools/engine</code> 来安装 <a href="https://www.npmjs.com/package/@needle-tools/engine" target="_blank" rel="noopener noreferrer">Needle Engine</a>。这将把该包添加到您的 <code>package.json</code> 的 <code>dependencies</code> 数组中。 要仅将包作为 devDependency 安装，可以运行 <code>npm i --save-dev &lt;包名&gt;</code>。下面将详细介绍 dependencies 和 devDependencies 的区别。</p><h3 id="dependencies-devdependencies" tabindex="-1"><a class="header-anchor" href="#dependencies-devdependencies"><span>&#39;dependencies&#39; 和 &#39;devDependencies&#39; 有什么区别？</span></a></h3><p>您可能注意到有两个包含 <em>dependency</em> 的条目 - <code>dependencies</code> 和 <code>devDependencies</code>。</p><p><code>dependencies</code> <strong>总是被安装</strong>（或打包），无论何时您的 Web 项目被安装，或者当您开发库并且您的包作为另一个项目的依赖项安装时。</p><p><code>devDependencies</code> <strong>仅</strong>在开发项目时安装（意味着当您直接在特定目录中运行 <code>install</code> 时），否则它们<strong>不会</strong>包含在您的项目中。</p><h3 id="-8" tabindex="-1"><a class="header-anchor" href="#-8"><span>如何安装其他包或依赖项以及如何使用它？</span></a></h3><p>“安装”部分告诉我们，您可以通过在项目目录中运行 <code>npm i &lt;包名&gt;</code> 来安装依赖项，其中 <code>包名</code> 可以是您在 <a href="https://npmjs.js.org" target="_blank" rel="noopener noreferrer">npm.js</a> 上找到的任何包。</p><p>假设您想向项目中添加一个 tweening 库。我们将使用 <a href="https://www.npmjs.com/package/@tweenjs/tween.js" target="_blank" rel="noopener noreferrer"><code>@tweenjs/tween.js</code></a> 作为示例。<a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">这里</a> 是最终项目，如果您想跳到前面只看结果的话。</p><p>首先在终端中运行 <code>npm install @tweenjs/tween.js</code> 并等待安装完成。这将在我们的 package.json 中添加一个新条目：</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;dependencies&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">: </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.11-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@tweenjs/tween.js</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^20.0.3&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>然后打开您想使用 tweening 的脚本文件之一，并在文件顶部导入：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>请注意，我们在这里通过写入 <code>* as TWEEN</code> 来导入库中的所有类型。我们也可以只导入特定类型，例如 <code>import { Tween } from @tweenjs/tween.js</code>。</p><p>现在我们可以在脚本中使用它了。始终建议参考您想使用的库的文档。在 tween.js 的情况下，他们提供了可以遵循的<a href="https://github.com/tweenjs/tween.js/blob/HEAD/docs/user_guide.md" target="_blank" rel="noopener noreferrer">用户指南</a>。通常，包在 npm 上的 Readme 页面包含有关如何安装和使用包的信息。</p><p>要旋转一个立方体，我们创建一个名为 <code>TweenRotation</code> 的新组件类型，然后我们继续为对象旋转、重复次数、要使用的缓动函数以及我们想要执行的 tween 创建 tween 实例，然后启动它。然后我们只需每帧调用 <code>update</code> 来更新 tween 动画。最终脚本如下所示：</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TweenRotation</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // 保存 tweener 实例</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> _tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&lt;</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">any</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> rotation </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">rotation</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // 创建 tween 实例</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(rotation)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // 设置为永远重复</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">repeat</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">Infinity</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // 设置要使用的缓动函数</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">easing</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Easing</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Quintic</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">InOut)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // 设置要进行 tween 的值</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">to</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> y</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Math</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">PI</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.5</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> },</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // 启动它</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">start</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // 每帧更新 tweening</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // &#39;?&#39; 是检查 _tween 是否已创建的简写</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">update</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>现在我们只需将其添加到场景中的任何对象上，即可使它们永远旋转。 您可以在<a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">这里</a>查看最终脚本的实际效果。</p><h1 id="-9" tabindex="-1"><a class="header-anchor" href="#-9"><span>学习更多</span></a></h1>`,66)),a("ul",null,[i[38]||(i[38]=a("li",null,[a("a",{href:"../scripting"},"Needle Engine 中的脚本编写")],-1)),a("li",null,[t(e,{to:"/lang/zh/getting-started/typescript-essentials.html"},{default:n(()=>i[36]||(i[36]=[s("Typescript Essentials")])),_:1})]),a("li",null,[t(e,{to:"/lang/zh/component-reference.html"},{default:n(()=>i[37]||(i[37]=[s("组件参考")])),_:1})])]),i[43]||(i[43]=a("p",null,"页面自动翻译使用 AI",-1))])}const F=p(o,[["render",c]]),E=JSON.parse(`{"path":"/lang/zh/getting-started/for-unity-developers.html","title":"Scripting Introduction for Unity Developers","lang":"zh-CN","frontmatter":{"title":"Scripting Introduction for Unity Developers","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/scripting introduction for unity developers_zh.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine 提供与 Unity Editor 的紧密集成。这使得开发者和设计师都能在熟悉的环境中协同工作，交付快速、高性能且轻量级的 Web 体验。\\n以下指南主要面向具有 Unity3D 背景的开发者，但也可能对具有 Web 或 three.js 背景的开发者有所帮助。它涵盖了 Unity 与 three.js 或 Needle Engine 中如何完成任务的话题。\\n如果您完全不熟悉 Typescript 和 Javascript，并且想深入了解如何为 Needle Engine 编写脚本，那么我们还建议阅读 Typescript Essentials 指南 以基本了解 C和 Javascript/Typescript 之间的区别。\\n如果您想跟着编写代码，可以打开 engine.needle.tools/new 来创建一个可以在浏览器中编辑的小项目 ⚡\\nNeedle Engine 是一个运行在 three.js 之上的 3D Web 引擎。Three.js 是 Web 上最流行的基于 WebGL 的 3D 渲染库之一。无论何时我们在 Needle Engine 中提到 gameObject，我们实际上也在谈论一个 three.js 的 Object3D，它是 three.js 中任何对象的基类型。这两个术语可以互换使用。任何 gameObject 就是一个 Object3D。\\n这也意味着——如果您已经熟悉 three.js——使用 Needle Engine 将完全没有问题。所有您可以用 three.js 做的事情，都可以在 Needle Engine 中完成。如果您已经在使用某些库，那么您也可以在基于 Needle Engine 的环境中使用它们。\\n注意：Needle Engine 的 Exporter 不会将您现有的 C代码编译到 Web Assembly。\\n虽然使用 Web Assembly 可能会在运行时带来更好的性能，但这会大大牺牲迭代速度和构建 Web 体验的灵活性。请阅读更多关于我们的愿景和技术概览。\\n:::details 如何使用 Needle Engine 创建新的 Unity 项目？(视频)\\n:::\\n在 Unity 中，您通过派生自 MonoBehaviour 来创建新组件：\\ncsharp\\nusing UnityEngine;\\npublic class MyComponent : MonoBehaviour {\\n}\\n\\n另一方面，Needle Engine 中的自定义组件编写如下：\\nts twoslash\\nimport { Behaviour } from '@needle-tools/engine'\\nexport class MyComponent extends Behaviour {\\n}\\n\\n如果您见过一些 Needle Engine 脚本，您可能注意到有些变量的声明上方带有 @serializable 注解。这是 Typescript 中的一个 Decorator（装饰器），可用于修改或注解代码。在 Needle Engine 中，它例如用于让核心序列化了解在从存储在 glTF 中的原始组件信息转换为 Component 实例时，我们期望在脚本中出现哪些类型。\\n考虑以下示例：\\nts twoslash\\nimport { Behaviour, serializable } from '@needle-tools/engine';\\nimport { Object3D } from 'three';\\nclass SomeClass extends Behaviour{\\n@serializable(Behaviour)\\nmyOtherComponent?: Behaviour;\\n@serializable(Object3D)\\nsomeOth"}]],"description":"---\\nNeedle Engine 提供与 Unity Editor 的紧密集成。这使得开发者和设计师都能在熟悉的环境中协同工作，交付快速、高性能且轻量级的 Web 体验。\\n以下指南主要面向具有 Unity3D 背景的开发者，但也可能对具有 Web 或 three.js 背景的开发者有所帮助。它涵盖了 Unity 与 three.js 或 Needle Engine 中如何完成任务的话题。\\n如果您完全不熟悉 Typescript 和 Javascript，并且想深入了解如何为 Needle Engine 编写脚本，那么我们还建议阅读 Typescript Essentials 指南 以基本了解 C和 Javascript/Typescript 之间的区别。\\n如果您想跟着编写代码，可以打开 engine.needle.tools/new 来创建一个可以在浏览器中编辑的小项目 ⚡\\nNeedle Engine 是一个运行在 three.js 之上的 3D Web 引擎。Three.js 是 Web 上最流行的基于 WebGL 的 3D 渲染库之一。无论何时我们在 Needle Engine 中提到 gameObject，我们实际上也在谈论一个 three.js 的 Object3D，它是 three.js 中任何对象的基类型。这两个术语可以互换使用。任何 gameObject 就是一个 Object3D。\\n这也意味着——如果您已经熟悉 three.js——使用 Needle Engine 将完全没有问题。所有您可以用 three.js 做的事情，都可以在 Needle Engine 中完成。如果您已经在使用某些库，那么您也可以在基于 Needle Engine 的环境中使用它们。\\n注意：Needle Engine 的 Exporter 不会将您现有的 C代码编译到 Web Assembly。\\n虽然使用 Web Assembly 可能会在运行时带来更好的性能，但这会大大牺牲迭代速度和构建 Web 体验的灵活性。请阅读更多关于我们的愿景和技术概览。\\n:::details 如何使用 Needle Engine 创建新的 Unity 项目？(视频)\\n:::\\n在 Unity 中，您通过派生自 MonoBehaviour 来创建新组件：\\ncsharp\\nusing UnityEngine;\\npublic class MyComponent : MonoBehaviour {\\n}\\n\\n另一方面，Needle Engine 中的自定义组件编写如下：\\nts twoslash\\nimport { Behaviour } from '@needle-tools/engine'\\nexport class MyComponent extends Behaviour {\\n}\\n\\n如果您见过一些 Needle Engine 脚本，您可能注意到有些变量的声明上方带有 @serializable 注解。这是 Typescript 中的一个 Decorator（装饰器），可用于修改或注解代码。在 Needle Engine 中，它例如用于让核心序列化了解在从存储在 glTF 中的原始组件信息转换为 Component 实例时，我们期望在脚本中出现哪些类型。\\n考虑以下示例：\\nts twoslash\\nimport { Behaviour, serializable } from '@needle-tools/engine';\\nimport { Object3D } from 'three';\\nclass SomeClass extends Behaviour{\\n@serializable(Behaviour)\\nmyOtherComponent?: Behaviour;\\n@serializable(Object3D)\\nsomeOth"},"headers":[{"level":2,"title":"基础知识","slug":"","link":"#","children":[]},{"level":2,"title":"创建组件","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"脚本字段","slug":"-2","link":"#-2","children":[{"level":3,"title":"serializable","slug":"serializable","link":"#serializable","children":[]},{"level":3,"title":"public 与 private","slug":"public-private","link":"#public-private","children":[]}]},{"level":2,"title":"GameObjects 与场景","slug":"gameobjects","link":"#gameobjects","children":[]},{"level":2,"title":"组件","slug":"-3","link":"#-3","children":[]},{"level":2,"title":"重命名的 Unity 类型","slug":"unity","link":"#unity","children":[]},{"level":2,"title":"Transform","slug":"transform","link":"#transform","children":[{"level":3,"title":"世界坐标 - 位置、旋转、缩放...","slug":"...","link":"#...","children":[]}]},{"level":2,"title":"时间","slug":"-5","link":"#-5","children":[]},{"level":2,"title":"光线投射 (Raycasting)","slug":"raycasting","link":"#raycasting","children":[]},{"level":2,"title":"输入 (Input)","slug":"input","link":"#input","children":[]},{"level":2,"title":"InputSystem 回调","slug":"inputsystem","link":"#inputsystem","children":[]},{"level":2,"title":"Debug.Log","slug":"debug.log","link":"#debug.log","children":[]},{"level":2,"title":"Gizmos","slug":"gizmos","link":"#gizmos","children":[]},{"level":2,"title":"有用的实用方法","slug":"-6","link":"#-6","children":[]},{"level":2,"title":"Web 项目","slug":"web","link":"#web","children":[]},{"level":2,"title":"安装包和依赖项","slug":"-7","link":"#-7","children":[{"level":3,"title":"'dependencies' 和 'devDependencies' 有什么区别？","slug":"dependencies-devdependencies","link":"#dependencies-devdependencies","children":[]},{"level":3,"title":"如何安装其他包或依赖项以及如何使用它？","slug":"-8","link":"#-8","children":[]}]}],"git":{"updatedTime":1745314461000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":2}],"changelog":[{"hash":"6b6cfcb9ede36d7e2489a6397a3d8ffd70c28751","time":1745314461000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Fix missing link + fix broken pages log + fix missing file for ES"},{"hash":"25e22e2b0b9e4fc1e515be2b189c24864e21ac9f","time":1745311490000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add multilanguage support"}]},"filePathRelative":"lang/zh/getting-started/for-unity-developers.md"}`);export{F as comp,E as data};
