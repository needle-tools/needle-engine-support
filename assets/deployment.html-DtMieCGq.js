import{_ as d,a,b as c,c as p,d as h,e as g,f as m,g as u,h as b,i as f,j as y,k,l as v,m as _,n as T,o as x,p as P,q as w,r as G,s as F,t as D,u as U,v as B,w as N,x as S}from"./unity-build-window-u6ej7-7p.js";import{_ as C}from"./texture-compression-BuEaeBZn.js";import{_ as E}from"./ktx-env-variable-DxwKzzNo.js";import{_ as z,c as L,a as t,e as s,d as i,b as o,w as M,r as l,o as I}from"./app-9T6lAodh.js";const j={},O={class:"hint-container details"};function A(K,e){const n=l("RouteLink"),r=l("video-embed");return I(),L("div",null,[e[5]||(e[5]=t("h2",{id:"",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#"},[t("span",null,"部署是什么意思？")])],-1)),e[6]||(e[6]=t("p",null,[i("部署是将您的应用程序通过网站公开的过程。Needle Engine 利用最新的压缩技术，例如 "),t("strong",null,"KTX2"),i("、"),t("strong",null,"Draco"),i(" 和 "),t("strong",null,"Meshopt"),i("，确保您的项目尽可能小巧快速。")],-1)),e[7]||(e[7]=t("h2",{id:"-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#-1"},[t("span",null,"可用的部署目标")])],-1)),t("ul",null,[t("li",null,[t("p",null,[o(n,{to:"/lang/zh/cloud/#deploy-from-unity"},{default:M(()=>e[0]||(e[0]=[i("Needle Cloud")])),_:1}),e[1]||(e[1]=i(" 非常适合空间网络应用和资产共享。"))])]),e[2]||(e[2]=s('<li><p><a href="#deploy-to-glitch">Glitch</a> 非常适合实验和修改服务器端代码。</p></li><li><p><a href="#deploy-to-netlify">Netlify</a> 非常适合托管您自己的网站和自定义域名。</p></li><li><p><a href="#deploy-to-itch.io">itch.io</a> 常用于游戏。</p></li><li><p><a href="#deploy-to-github-pages">GitHub Pages</a> 免费静态页面托管。</p></li><li><p><a href="#deploy-to-vercel">Vercel</a> 面向前端开发者的平台。</p></li><li><p><a href="#deploy-to-ftp">FTP Upload</a> 直接部署到任何支持 FTP 的服务器。支持 FTP 和 SFTP。</p></li><li><p><a href="#build-to-folder">Build to folder</a> 构建到文件夹后，您可以将文件上传到任何网络服务器或其他托管服务。</p></li><li><p><a href="#deploy-to-facebook-instant-games">Facebook Instant Games</a> Facebook 和 Facebook Messenger 上的游戏平台。</p></li>',8))]),e[8]||(e[8]=s('<div class="hint-container tip"><p class="hint-container-title">觉得缺少了什么？</p><p>请在我们的<a href="https://forum.needle.tools/?utm_source=needle_docs&amp;utm_content=content" target="_blank" rel="noopener noreferrer">论坛</a>中告知我们！</p></div><h2 id="development-builds" tabindex="-1"><a class="header-anchor" href="#development-builds"><span>开发版本构建 (Development Builds)</span></a></h2><p>请参阅上面的指南，了解如何在编辑器（例如 Unity 或 Blender）中访问这些选项。</p><p>与生产版本构建 (Production Build) 的主要区别在于，开发版本构建不会进行 <a href="https://registry.khronos.org/KTX/specs/2.0/ktxspec.v2.html" target="_blank" rel="noopener noreferrer">ktx2</a> 和 <a href="https://google.github.io/draco/" target="_blank" rel="noopener noreferrer">draco</a> 压缩（用于减小文件大小和加载速度），也没有逐步加载高质量纹理的选项。</p><p>我们通常建议进行生产版本构建以优化文件大小和加载速度（详见下文）。</p><h2 id="production-builds" tabindex="-1"><a class="header-anchor" href="#production-builds"><span>生产版本构建 (Production Builds)</span></a></h2><p>要进行生产版本构建，您需要安装 <a href="https://github.com/KhronosGroup/KTX-Software/releases" target="_blank" rel="noopener noreferrer">toktx</a>，它使用 KTX2 超级压缩格式提供纹理压缩。请访问 <a href="https://github.com/KhronosGroup/KTX-Software/releases" target="_blank" rel="noopener noreferrer">toktx Releases Page</a> 下载并安装最新版本（撰写本文时为 v4.1.0）。安装后可能需要重启 Unity。 <em>如果您确定已安装 toktx 并且它在您的 PATH 中，但仍然找不到，请重启您的机器并尝试再次构建。</em></p><details class="hint-container details"><summary>高级：自定义 glTF 扩展</summary><p>如果您计划添加自己的自定义 glTF 扩展，生产版本构建需要处理 <code>gltf-transform</code> 中的这些扩展。请参阅 <a href="https://www.npmjs.com/package/@needle-tools/gltf-build-pipeline" target="_blank" rel="noopener noreferrer">@needle-tools/gltf-build-pipeline</a> 获取参考。</p></details><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>优化和压缩选项</span></a></h3><h3 id="texture-compression" tabindex="-1"><a class="header-anchor" href="#texture-compression"><span>纹理压缩 (Texture compression)</span></a></h3><p>生产版本构建默认使用 <strong>KTX2</strong> 压缩纹理（根据项目中的使用情况，可以是 ETC1S 或 UASTC）， 但您也可以选择 <strong>WebP</strong> 压缩并选择质量级别。</p><h4 id="etc1s-uastc-webp" tabindex="-1"><a class="header-anchor" href="#etc1s-uastc-webp"><span>如何在 ETC1S、UASTC 和 WebP 压缩之间进行选择？</span></a></h4><table><thead><tr><th>格式 (Format)</th><th>ETC1S</th><th>UASTC</th><th>WebP</th></tr></thead><tbody><tr><td><strong>GPU 内存使用 (GPU Memory Usage)</strong></td><td>低 (Low)</td><td>低 (Low)</td><td>高（未压缩）(High (uncompressed))</td></tr><tr><td><strong>文件大小 (File Size)</strong></td><td>低 (Low)</td><td>高 (High)</td><td>非常低 (Very low)</td></tr><tr><td><strong>质量 (Quality)</strong></td><td>中 (Medium)</td><td>非常高 (Very high)</td><td>取决于质量设置 (Depends on quality setting)</td></tr><tr><td><strong>典型用法 (Typical usage)</strong></td><td>适用于所有情况，但最适合颜色纹理 (Works for everything, but best for color textures)</td><td>高细节数据纹理：法线贴图、粗糙度、金属度等 (High-detail data textures: normal maps, roughness, metallic, etc.)</td><td>ETC1S 质量不足但 UASTC 过大的文件 (Files where ETC1S quality is not sufficient but UASTC is too large)</td></tr></tbody></table><p>您可以使用 Unity 中的 Needle Texture Importer 或 Blender 中材质标签页上的选项，对每个纹理选择纹理压缩和逐步加载选项。</p><details class="hint-container details"><summary>Unity：如何设置每个纹理的压缩设置？</summary><p><img src="'+a+'" alt="image"><img src="'+c+'" alt="image"></p></details><details class="hint-container details"><summary>Blender：如何设置每个纹理的压缩设置？</summary><p>选择材质标签页。您将看到该材质使用的所有纹理的压缩选项。 <img src="'+C+'" alt="Texture Compression options in Blender"></p></details><details class="hint-container details"><summary>Toktx 找不到</summary><p>Windows：确保您已将 toktx 添加到您的系统环境变量中。添加后可能需要重启计算机才能刷新环境变量。默认安装位置是 <code>C:\\Program Files\\KTX-Software\\bin</code><img src="'+E+'" alt="image"></p></details><h3 id="mesh-compression" tabindex="-1"><a class="header-anchor" href="#mesh-compression"><span>网格压缩 (Mesh compression)</span></a></h3><p>默认情况下，生产版本构建将使用 Draco 压缩网格。使用 <code>MeshCompression</code> 组件可以选择为每个导出的 glTF 应用 draco 或 mesh-opt 压缩。 此外，您可以在网格导入设置（Unity）中设置网格简化，以减少生产版本构建的多边形数量。在浏览器中查看您的应用程序时，您可以附加 <code>?wireframe</code> 到您的 URL 以预览网格。</p><h4 id="draco-meshopt" tabindex="-1"><a class="header-anchor" href="#draco-meshopt"><span>如何在 Draco 和 Meshopt 之间进行选择？</span></a></h4><table><thead><tr><th>格式 (Format)</th><th>Draco</th><th>Meshopt</th></tr></thead><tbody><tr><td><strong>GPU 内存使用 (GPU Memory Usage)</strong></td><td>中 (Medium)</td><td>低 (Low)</td></tr><tr><td><strong>文件大小 (File Size)</strong></td><td>最低 (Lowest)</td><td>低 (Low)</td></tr><tr><td><strong>动画压缩 (Animation compression)</strong></td><td>否 (No)</td><td>是 (Yes)</td></tr></tbody></table><details class="hint-container details"><summary>如何设置 draco 和 meshopt 压缩设置？</summary><p>添加 MeshCompression 组件，为每个导出的 glTF 选择应应用的压缩方式。</p><p><img src="'+p+'" alt="image"></p><ul><li>要更改<strong>当前场景</strong>的压缩，只需将其添加到根场景中的任意位置。</li><li>要更改 <strong>prefab 或 NestedGltf</strong> 的压缩，将其添加到 <code>GltfObject</code> 或任何组件引用/导出的 prefab 中。</li><li>要更改<strong>引用的场景</strong>的压缩，只需将其添加到导出的引用场景中即可。</li></ul></details><details class="hint-container details"><summary>在哪里可以找到网格简化选项以在生产版本构建时减少顶点数量？</summary><p>选择一个 Mesh 并打开 Needle 导入器选项，查看选定网格的可用选项： <img src="'+h+'" alt="image"></p></details><h3 id="progressive-textures" tabindex="-1"><a class="header-anchor" href="#progressive-textures"><span>渐进式纹理 (Progressive Textures)</span></a></h3><p>您还可以将 <code>Progressive Texture Settings</code> 组件添加到场景中的任意位置，使项目中的所有纹理都进行渐进式加载。目前，渐进式加载不应用于光照贴图或天空盒纹理。</p><p>通过渐进式加载，纹理将首先以较低分辨率版本加载。当纹理可见时，全质量版本将动态加载。这通常会显着减少场景的初始加载时间。</p><details class="hint-container details"><summary>如何启用渐进式纹理加载？</summary><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span>可以为每个纹理启用渐进式纹理加载</span></a></h3><h3 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span>或者为项目中的所有纹理启用：</span></a></h3><p><img src="'+a+'" alt="image"></p><h3 id="-5" tabindex="-1"><a class="header-anchor" href="#-5"><span>为项目中没有其他特定设置的所有纹理启用：</span></a></h3><p><img src="'+g+'" alt="image"></p></details><h3 id="lods-level-of-detail" tabindex="-1"><a class="header-anchor" href="#lods-level-of-detail"><span>自动网格 LODs (Level of Detail)</span></a></h3><p>自 Needle Engine 3.36 起，我们会自动生成 LOD 网格并在运行时进行切换。LOD 按需加载，仅在需要时加载，因此此功能既减少了加载时间，也提升了性能。</p><p><strong>主要优势</strong></p><ul><li>更快的初始加载时间</li><li>由于屏幕上平均顶点数量更少，渲染时间更快</li><li>由于使用 LOD 网格，光线投射更快</li></ul><p>您可以在 <code>Progressive Loading Settings</code> 组件中或在 Mesh Importer 设置中为整个项目禁用 LOD 生成。</p><p><img src="'+m+'" alt="image"></p><p><img src="'+u+'" alt="image"></p><h2 id="-6" tabindex="-1"><a class="header-anchor" href="#-6"><span>部署选项</span></a></h2><h3 id="glitch" tabindex="-1"><a class="header-anchor" href="#glitch"><span>部署到 Glitch 🎏</span></a></h3><p><a href="https://glitch.com/" target="_blank" rel="noopener noreferrer">Glitch</a> 为所有人提供了一种快速免费的方式来托管小型和大型网站。我们提供了一种简单的方法来混音 (remix) 并部署到新的 Glitch 页面（基于我们的 starter），以及在需要时在同一个 Glitch 页面上运行一个极简的网络服务器。</p><p>您可以通过将 <code>DeployToGlitch</code> 组件添加到场景中并按照说明进行操作来部署到 glitch。</p><p>请注意，glitch 上托管的免费项目不能超过约 100 MB。如果您需要上传更大的项目，请考虑使用不同的部署目标。</p><details class="hint-container details"><summary>如何从 Unity 部署到 Glitch？</summary><ol><li><p>将 <code>DeployToGlitch</code> 组件添加到具有 <code>ExportInfo</code> 组件的 GameObject 上。</p></li><li><p>点击组件上的 <code>Create new Glitch Remix</code> 按钮 <img src="'+b+'" alt="image"></p></li><li><p>Glitch 现在将创建模板的混音 (remix)。从浏览器中复制 URL <img src="https://user-images.githubusercontent.com/5083203/179834901-f28852a9-6b06-4d87-8b5b-0384768c92c1.png" alt="image"></p></li><li><p>再次打开 Unity，并将 URL 粘贴到 <code>Deploy To Glitch</code> 组件的 <code>Project Name</code> 字段中 <img src="https://user-images.githubusercontent.com/5083203/179835274-033e5e1d-b70d-4b13-95ad-f1e2f159b14e.png" alt="image"></p></li><li><p>等待几秒钟，直到 Unity 从 glitch 收到您的部署密钥（此密钥安全地存储在 glitch 的 <code>.env</code> 文件中。不要与他人共享，拥有此密钥的任何人都可以上传到您的 glitch 网站） <img src="'+f+'" alt="waiting for the key"></p></li><li><p>收到部署密钥后，您可以点击 <code>Build &amp; Deploy</code> 按钮上传到 glitch。</p></li></ol></details><details class="hint-container details"><summary>如何从 Blender 部署到 Glitch？</summary><p><img src="'+y+'" alt="Deploy To Glitch from Blender component"></p><ol><li>在 Scene 标签页中找到 Deploy To Glitch 面板</li><li>点击组件上的 <code>Remix on glitch</code> 按钮</li><li>您的浏览器将打开 glitch 项目模板</li><li>等待 Glitch 生成新项目</li><li>将项目 URL 复制粘贴到 Blender DeployToGlitch 面板中作为项目名称（您可以粘贴完整的 URL，面板将提取必要的信息）</li><li>在 Glitch 上打开 <code>.env</code> 文件，并在 <strong>DEPLOY_KEY</strong> 旁边的 <code>Variable Value</code> 字段中输入密码</li><li>在 Blender 的 <code>Key</code> 字段中输入相同的密码</li><li>点击 <code>DeployToGlitch</code> 按钮构建并上传您的项目到 glitch。上传完成后将打开一个浏览器。如果打开后显示黑色，请尝试刷新页面。</li></ol></details><h4 id="glitch-1" tabindex="-1"><a class="header-anchor" href="#glitch-1"><span>Glitch 故障排除</span></a></h4><p>如果您点击 <code>Create new Glitch Remix</code>，浏览器显示 <code>there was an error starting the editor</code> 这样的错误，您可以点击 <strong>OK</strong>。然后访问 <a href="https://glitch.com/" target="_blank" rel="noopener noreferrer">glitch.com</a> 并确保您已登录。之后，您可以再次尝试点击 Unity 或 Blender 中的按钮。</p><h3 id="netlify" tabindex="-1"><a class="header-anchor" href="#netlify"><span>部署到 Netlify</span></a></h3><details class="hint-container details"><summary>如何从 Unity 部署到 Netlify？</summary><p>只需将 <code>DeployToNetlify</code> 组件添加到您的场景中并按照说明进行操作。您可以通过点击按钮或部署到现有项目来创建新项目。</p><p><img src="'+k+'" alt="Deploy to netlify component"></p><p><img src="'+v+'" alt="Deploy to netlify component"></p></details><h3 id="vercel" tabindex="-1"><a class="header-anchor" href="#vercel"><span>部署到 Vercel</span></a></h3><ol><li>在 vercel 上创建一个新项目</li><li>将您的 web 项目添加到 github 仓库</li><li>将仓库添加到 vercel 上的项目</li></ol><p>请参阅我们的 <a href="https://github.com/needle-engine/nextjs-sample" target="_blank" rel="noopener noreferrer">sample project</a> 获取项目配置</p><h3 id="itch.io" tabindex="-1"><a class="header-anchor" href="#itch.io"><span>部署到 itch.io</span></a></h3><details class="hint-container details"><summary>如何从 Unity 部署到 itch.io？</summary><ol><li><p>在 <a href="https://itch.io/game/new" target="_blank" rel="noopener noreferrer">itch.io</a> 上创建一个新项目</p></li><li><p>将 <code>Kind of project</code> 设置为 <code>HTML</code><img src="https://user-images.githubusercontent.com/5083203/191211856-8a114480-bae7-4bd1-868e-2e955587acd7.png" alt="image"></p></li><li><p>将 <code>DeployToItch</code> 组件添加到您的场景中，然后点击 <code>Build</code> 按钮 <img src="https://user-images.githubusercontent.com/5083203/193812540-1881837e-ed9e-49fc-9658-52e5a914299a.png" alt="image"></p></li><li><p>等待构建完成，完成后会打开一个包含最终 zip 文件的文件夹</p></li><li><p>将最终 zip 上传到 itch.io <img src="https://user-images.githubusercontent.com/5083203/191212661-f626f0cb-bc8e-4738-ad2c-3982aca65f39.png" alt="20220920-104629_Create_a_new_project_-itch io-_Google_Chrome-needle"></p></li><li><p>选择 <code>This file will be played in the browser</code><img src="https://user-images.githubusercontent.com/5083203/191212967-00b687f3-bf56-449e-880c-d8daf8a52247.png" alt="image"></p></li><li><p>保存您的 itch 页面并查看 itch 项目页面。 现在它应该会加载您的 Needle Engine 项目 😊</p></li></ol><h4 id="-7" tabindex="-1"><a class="header-anchor" href="#-7"><span>可选设置</span></a></h4><p><img src="https://user-images.githubusercontent.com/5083203/191217263-355d9b70-5431-4170-8eca-bfbbb39ae810.png" alt="image"></p></details><details class="hint-container details"><summary>Itch.io: 未找到 index.html</summary><h4 id="failed-to-find-index.html" tabindex="-1"><a class="header-anchor" href="#failed-to-find-index.html"><span>Failed to find index.html</span></a></h4><p><img src="https://user-images.githubusercontent.com/5083203/191213162-2be63e46-2a65-4d41-a713-98c753ccb600.png" alt="image"> 如果您在上传项目后看到此错误，请确保您没有上传 gzipped 的 index.html 文件。 您可以在 Needle web 项目文件夹中的 <code>vite.config.js</code> 中禁用 gzip 压缩。只需删除包含 <code>viteCompression({ deleteOriginFile: true })</code> 的行。然后再次构建您的项目并上传到 itch。</p></details><h3 id="ftp" tabindex="-1"><a class="header-anchor" href="#ftp"><span>部署到 FTP</span></a></h3><details class="hint-container details"><summary>如何从 Unity 部署到我的 FTP 服务器？</summary><ol><li>将 <code>DeployToFTP</code> 组件¹ 添加到场景中的一个 GameObject 上（将其添加到与 ExportInfo 相同的 GameObject 是个好习惯 - 但不是强制的）</li><li>如果尚未这样做，请分配一个 FTP 服务器资产并填写服务器、用户名和密码 ² <em>此资产包含您 FTP 服务器的访问信息 - 您在托管服务提供商处创建新的 FTP 帐户时会获得这些信息</em></li><li>点击 <code>DeployToFTP</code> 组件上的 <kbd>Build &amp; Deploy</kbd> 按钮，构建您的项目并将其上传到您的 FTP 帐户</li></ol><p><img src="'+_+'" alt="Deploy to FTP component in Unity"><em>¹ Deploy to FTP 组件</em></p><p><img src="'+T+'" alt="Deploy to FTP server asset"><em>² 包含您 FTP 用户帐户访问信息的 FTP Server 资产</em></p><p><img src="'+x+'" alt="Deploy to FTP component in Unity with server asset assigned"><em>分配服务器资产后的 Deploy To FTP 组件。您可以使用路径字段直接部署到服务器的子文件夹</em></p></details><details class="hint-container details"><summary>如何手动部署到我的 FTP 服务器？</summary><ol><li>打开 <code>File &gt; Build Settings</code>，选择 <code>Needle Engine</code>，然后点击 <kbd>Build</kbd></li><li>等待构建完成 - 所有构建和压缩步骤运行完成后，结果 <code>dist</code> 文件夹将自动打开。</li><li>将 <code>dist</code> 文件夹中的文件复制到您的 FTP 存储空间。</li></ol><p><strong>就这样！</strong> 😉</p><p><img src="https://user-images.githubusercontent.com/2693840/187311461-e6afb2d7-5761-48cf-bacb-1c1733bb768b.png" alt="20220830-003602_explorer-needle"></p><blockquote><p><strong>注意</strong>: 如果上传后结果不工作，可能是因为您的网络服务器不支持提供 gzipped 文件。您有两种方法解决此问题： 选项 1: 您可以尝试使用 .htaccess 文件在您的服务器上启用 gzip 压缩！ 选项 2: 您可以在 Build Settings 中（File/Build Window，选择 Needle Engine 平台）关闭 gzip 压缩。</p></blockquote><blockquote><p><strong>注意</strong>: 如果在压缩过程中出现错误，请告知我们并报告 bug！如果您的项目在本地工作，但仅在进行生产版本构建时失败，您可以通过进行开发版本构建立即解决问题。只需在 Build Settings 中切换 <code>Development Build</code> 即可。</p></blockquote><p><img src="'+P+`" alt="Unity build window showing Needle Engine platform"></p></details><h4 id=".htaccess-gzip" tabindex="-1"><a class="header-anchor" href="#.htaccess-gzip"><span>使用 .htaccess 文件启用 gzip</span></a></h4><p>要在您的 FTP 服务器上启用 gzip 压缩，您可以在要上传的目录（或父目录）中创建一个名为 <code>.htaccess</code> 的文件。 将以下代码插入到您的 <code>.htaccess</code> 文件中，然后保存/上传到您的服务器：</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span>&lt;IfModule mod_mime.c&gt;</span></span>
<span class="line"><span>RemoveType .gz</span></span>
<span class="line"><span>AddEncoding gzip .gz</span></span>
<span class="line"><span>AddType application/javascript .js.gz</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span></code></pre></div><h3 id="github-pages" tabindex="-1"><a class="header-anchor" href="#github-pages"><span>部署到 Github Pages</span></a></h3>`,58)),t("details",O,[e[3]||(e[3]=t("summary",null,"如何从 Unity 部署到 Github Pages？",-1)),e[4]||(e[4]=t("p",null,[i("将 DeployToGithubPages 组件添加到您的场景中，并复制粘贴您想要部署到的 github 仓库（或 github pages url）。 "),t("img",{src:d,alt:"Deploy To github pages component"})],-1)),o(r,{src:"https://www.youtube.com/watch?v=Vyk3cWB6u-c"})]),e[9]||(e[9]=s('<h4 id="github-pages-1" tabindex="-1"><a class="header-anchor" href="#github-pages-1"><span>Github Pages 故障排除</span></a></h4><ul><li><strong>我部署到 github pages 了，但是没有运行任何 action / 网站没有上线</strong><ul><li>如果您是第一次部署，可能需要几分钟网站才能上线。您可以在 github 上查看 <strong>Actions</strong> 标签页（<code>/actions</code>）来查看部署过程。</li><li>如果几分钟后您的网站仍未上线，或者您在 github 上的 <strong>Actions</strong> 标签页中没有看到任何 workflow 运行，请转到 <strong>Github Pages</strong> 设置页面（<code>/settings/pages</code>），并确保 <strong>Branch</strong> 设置为 <em>gh-pages</em></li></ul></li></ul><h3 id="facebook-instant-games" tabindex="-1"><a class="header-anchor" href="#facebook-instant-games"><span>部署到 Facebook Instant Games</span></a></h3><p>使用 Needle Engine，您可以自动构建到 Facebook Instant Games 无需对您的 web 应用或游戏进行手动调整。</p><details class="hint-container details"><summary>如何从 Unity 部署到 Facebook Instant Games？</summary><ul><li>将 <code>Deploy To Facebook Instant Games</code> 组件添加到您的场景中： <img src="'+w+'" alt="Deploy to facebook instant games component"></li><li>点击 <code>Build For Instant Games</code> 按钮</li><li>构建完成后，您将获得一个 ZIP 文件，您可以将其上传到您的 facebook 应用。</li><li>在 Facebook 上添加 <code>Instant Games</code> 模块，并转到 <code>Instant Games/Web hosting</code><img src="'+G+'" alt="Hosting a facebook instant games"></li><li>您可以使用 <code>Upload version</code> 按钮 (1) 上传您的 zip。上传完成并处理完 zip 后，点击 <code>Stage for testing</code> 按钮测试您的应用（2，此处为蓝色按钮）或 <code>Push to production</code>（带星号的按钮） <img src="'+F+'" alt="Upload the zip to facebook instant games"></li><li>就这样 - 然后您可以点击每个版本旁边的 <code>Play</code> 按钮在 facebook 上测试您的游戏。</li></ul></details><details class="hint-container details"><summary>如何在 Facebook 上创建应用（具有 Instant Games 功能）</summary><ol><li><p><a href="https://developers.facebook.com/apps/creation/" target="_blank" rel="noopener noreferrer">创建一个新应用</a>，选择 <code>Other</code>。然后点击 <code>Next</code><img src="'+D+'" alt="Create facebook instant games app"></p></li><li><p>选择类型 <code>Instant Games</code><img src="'+U+'" alt="Create facebook instant games app"></p></li><li><p>创建应用后，添加 <code>Instant Games</code> 产品 <img src="'+B+'" alt="Add instant games product"></p></li></ol><p>您可以在此处找到 <a href="https://developers.facebook.com/docs/games/build/instant-games" target="_blank" rel="noopener noreferrer">官方 instant games 文档</a>。 <strong>注意</strong>：您只需创建一个具有 instant games 功能的应用即可。 我们将处理其他所有事情，无需对您的 Needle Engine 网站进行手动调整。</p></details><h2 id="build-to-folder" tabindex="-1"><a class="header-anchor" href="#build-to-folder"><span>构建到文件夹 (Build To Folder)</span></a></h2><p>在 Unity 中打开 <code>File/Build Settings</code>，选择 <code>Needle Engine</code> 以获取选项：</p><p><img src="'+N+'" alt="image"></p><p><img src="'+S+'" alt="image"></p><p>要构建您的 web 项目以便上传到任何网络服务器，您可以点击 Unity Editor Build Settings Window 中的 <strong>Build</strong> 按钮。您可以启用 <code>Development Build</code> 复选框以忽略压缩（见下文），这需要您的机器上安装 toktx。</p><p>要本地预览最终构建，您可以使用窗口底部的 <code>Preview Build</code> 按钮。此按钮将首先执行常规构建，然后在包含最终文件的目录中启动本地服务器，以便您可以看到将这些文件上传到网络服务器后得到的结果。</p><p>Nodejs <strong>仅</strong>在开发期间需要。发布的网站（使用我们默认的 vite 模板）是一个静态页面，不依赖于 Nodejs，可以放在任何常规网络服务器上。如果您想在同一个网络服务器上运行我们的极简网络服务器（自动包含在 Glitch 部署过程中），则需要 Nodejs。</p><hr><h2 id="cross-platform-deployment-workflows" tabindex="-1"><a class="header-anchor" href="#cross-platform-deployment-workflows"><span>跨平台部署工作流程 (Cross-Platform Deployment Workflows)</span></a></h2><p>可以创建常规的 Unity 项目，您可以同时构建到 Needle Engine 和常规的 Unity 平台，例如 Desktop 甚至 WebGL。我们的“组件映射”方法意味着在 Unity 内部不会修改运行时逻辑 - 如果您愿意，您可以常规地使用 Play Mode 并构建到其他目标平台。在某些情况下，这意味着您将有重复的代码（C# 代码和匹配的 TypeScript 逻辑）。由此产生的额外工作量取决于您的项目。</p><p><strong>在 Unity 中进入 Play Mode</strong> 在 <code>Project Settings &gt; Needle Engine</code> 中，您可以关闭 <code>Override Play Mode</code> 和 <code>Override Build settings</code> 来在 Needle 的构建过程和 Unity 的构建过程之间切换： <img src="https://user-images.githubusercontent.com/2693840/187308490-5acb9016-ffff-4113-be62-4de450a42b08.png" alt="image"></p><h2 id="unity-needle-engine" tabindex="-1"><a class="header-anchor" href="#unity-needle-engine"><span>Unity 的 Needle Engine 命令行参数</span></a></h2><p>Unity 的 Needle Engine 支持各种命令行参数，用于导出单个资产（Prefabs 或 Scenes）或以批处理模式（无窗口）构建整个 web 项目。</p><p>下表列出了可用的选项：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>-scene</code></td><td>要导出场景或资产的路径，例如 <code>Assets/path/to/myObject.prefab</code> 或 <code>Assets/path/to/myScene.unity</code></td></tr><tr><td><code>-outputPath &lt;path/to/output.glb&gt;</code></td><td>设置构建的输出路径（仅在构建场景时有效）</td></tr><tr><td><code>-buildProduction</code></td><td>运行生产版本构建</td></tr><tr><td><code>-buildDevelopment</code></td><td>运行开发版本构建</td></tr><tr><td><code>-debug</code></td><td>打开控制台窗口进行调试</td></tr></tbody></table><hr><p>本页面由 AI 自动翻译</p>',23))])}const q=z(j,[["render",A]]),H=JSON.parse('{"path":"/lang/zh/deployment.html","title":"部署与优化","lang":"zh-CN","frontmatter":{"title":"部署与优化","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/needle engine_zh.png"}],["meta",{"name":"og:description","content":"---\\n部署是将您的应用程序通过网站公开的过程。Needle Engine 利用最新的压缩技术，例如 KTX2、Draco 和 Meshopt，确保您的项目尽可能小巧快速。"}]],"description":"---\\n部署是将您的应用程序通过网站公开的过程。Needle Engine 利用最新的压缩技术，例如 KTX2、Draco 和 Meshopt，确保您的项目尽可能小巧快速。"},"headers":[{"level":2,"title":"部署是什么意思？","slug":"","link":"#","children":[]},{"level":2,"title":"可用的部署目标","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"开发版本构建 (Development Builds)","slug":"development-builds","link":"#development-builds","children":[]},{"level":2,"title":"生产版本构建 (Production Builds)","slug":"production-builds","link":"#production-builds","children":[{"level":3,"title":"优化和压缩选项","slug":"-2","link":"#-2","children":[]},{"level":3,"title":"纹理压缩 (Texture compression)","slug":"texture-compression","link":"#texture-compression","children":[]},{"level":3,"title":"网格压缩 (Mesh compression)","slug":"mesh-compression","link":"#mesh-compression","children":[]},{"level":3,"title":"渐进式纹理 (Progressive Textures)","slug":"progressive-textures","link":"#progressive-textures","children":[]},{"level":3,"title":"自动网格 LODs (Level of Detail)","slug":"lods-level-of-detail","link":"#lods-level-of-detail","children":[]}]},{"level":2,"title":"部署选项","slug":"-6","link":"#-6","children":[{"level":3,"title":"部署到 Glitch 🎏","slug":"glitch","link":"#glitch","children":[]},{"level":3,"title":"部署到 Netlify","slug":"netlify","link":"#netlify","children":[]},{"level":3,"title":"部署到 Vercel","slug":"vercel","link":"#vercel","children":[]},{"level":3,"title":"部署到 itch.io","slug":"itch.io","link":"#itch.io","children":[]},{"level":3,"title":"部署到 FTP","slug":"ftp","link":"#ftp","children":[]},{"level":3,"title":"部署到 Github Pages","slug":"github-pages","link":"#github-pages","children":[]},{"level":3,"title":"部署到 Facebook Instant Games","slug":"facebook-instant-games","link":"#facebook-instant-games","children":[]}]},{"level":2,"title":"构建到文件夹 (Build To Folder)","slug":"build-to-folder","link":"#build-to-folder","children":[]},{"level":2,"title":"跨平台部署工作流程 (Cross-Platform Deployment Workflows)","slug":"cross-platform-deployment-workflows","link":"#cross-platform-deployment-workflows","children":[]},{"level":2,"title":"Unity 的 Needle Engine 命令行参数","slug":"unity-needle-engine","link":"#unity-needle-engine","children":[]}],"git":{"updatedTime":1745311490000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"25e22e2b0b9e4fc1e515be2b189c24864e21ac9f","time":1745311490000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add multilanguage support"}]},"filePathRelative":"lang/zh/deployment.md"}');export{q as comp,H as data};
