import{_ as p}from"./unity-needle-engine-modules-physics-De-OMij1.js";import{_ as h}from"./custom-loading-style-s1K1my2z.js";import{_ as r,c as k,e as l,a as s,d as e,b as n,w as t,r as d,o}from"./app-9T6lAodh.js";const g={},c={class:"hint-container tip"};function C(y,i){const a=d("RouteLink");return o(),k("div",null,[i[25]||(i[25]=l('<h2 id="bundling-and-web-frontends" tabindex="-1"><a class="header-anchor" href="#bundling-and-web-frontends"><span>Bundling and web frontends</span></a></h2><p>Needle Engine एक वेब कंपोनेंट के तौर पर बनाया गया है। इसका मतलब है कि अपने प्रोजेक्ट में <code>@needle-tools/engine</code> इंस्टॉल करें और <code>&lt;needle-engine src=&quot;path/to/your.glb&quot;&gt;</code> को अपने वेब-प्रोजेक्ट में कहीं भी शामिल करें।</p><ul><li>npm का उपयोग करके इंस्टॉल करें: <code>npm i @needle-tools/engine</code></li></ul><p>हमारे डिफ़ॉल्ट Vite आधारित प्रोजेक्ट टेम्पलेट के साथ, Needle Engine डिप्लॉयमेंट पर एक वेब ऐप में बंडल हो जाता है। यह छोटी फ़ाइलों, ट्री-शेकिंग (यूनिटी में कोड स्ट्रिपिंग के समान) और ऑप्टिमाइज़्ड लोड टाइम सुनिश्चित करता है। कई छोटी स्क्रिप्ट और कंपोनेंट डाउनलोड करने के बजाय, केवल एक या कुछ ही डाउनलोड होते हैं जिनमें न्यूनतम आवश्यक कोड होता है।</p><p>Vite (हमारा डिफ़ॉल्ट बंडलर) का एक अच्छा स्पष्टीकरण है कि वेब ऐप्स को बंडल क्यों किया जाना चाहिए: <a href="https://vitejs.dev/guide/why.html" target="_blank" rel="noopener noreferrer">Why Bundle for Production</a></p><h3 id="vite-vue-react-svelte-react-three-fiber..." tabindex="-1"><a class="header-anchor" href="#vite-vue-react-svelte-react-three-fiber..."><span>Vite, Vue, React, Svelte, React Three Fiber...</span></a></h3><p>Needle Engine फ्रेमवर्क के चयन के बारे में तटस्थ है। हमारा डिफ़ॉल्ट टेम्पलेट लोकप्रिय <a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">vite</a> को बंडलर के रूप में उपयोग करता है। वहाँ से, आप vue, svelte, nuxt, react, react-three-fiber या अन्य फ्रेमवर्क जोड़ सकते हैं, और हमारे पास उनमें से कई के लिए सैंपल हैं। आप अन्य बंडलर भी इंटीग्रेट कर सकते हैं, या किसी का भी उपयोग नहीं कर सकते हैं - बस सादा HTML और Javascript।</p><p>यहाँ कुछ उदाहरण तकनीकी स्टैक दिए गए हैं जो संभव हैं और जिनके साथ हम Needle Engine का उपयोग करते हैं:</p>',8)),s("ul",null,[i[4]||(i[4]=l('<li><p><strong>Vite + HTML</strong> — हमारे डिफ़ॉल्ट टेम्पलेट में यही उपयोग होता है!</p></li><li><p><strong>Vite + Vue</strong> — <a href="https://needle.tools" target="_blank" rel="noopener noreferrer">Needle Tools</a> वेबसाइट में यही उपयोग होता है! डाउनलोड करने के लिए एक सैंपल <a href="https://github.com/needle-tools/needle-engine-samples" target="_blank" rel="noopener noreferrer">यहाँ</a> पाएं।</p></li><li><p><strong>Vite + Svelte</strong></p></li><li><p><strong>Vite + SvelteKit</strong></p></li><li><p><strong>Vite + React</strong> — यूनिटी इंटीग्रेशन के साथ एक प्रायोगिक टेम्पलेट आता है जिसे आप प्रोजेक्ट जेनरेट करते समय चुन सकते हैं!</p></li><li><p><strong>react-three-fiber</strong> — यूनिटी इंटीग्रेशन के साथ एक प्रायोगिक टेम्पलेट आता है जिसे आप प्रोजेक्ट जेनरेट करते समय चुन सकते हैं!</p></li><li><p><strong>Vercel &amp; Nextjs</strong> — एक <a href="https://github.com/needle-engine/nextjs-sample" target="_blank" rel="noopener noreferrer">उदाहरण nextjs प्रोजेक्ट यहाँ</a> पाएं।</p></li>',7)),s("li",null,[s("p",null,[i[1]||(i[1]=s("strong",null,"CDN without any bundler",-1)),i[2]||(i[2]=e(" — एक कोड उदाहरण ")),n(a,{to:"/lang/hi/vanilla-js.html"},{default:t(()=>i[0]||(i[0]=[e("यहाँ")])),_:1}),i[3]||(i[3]=e(" पाएं।"))])])]),i[26]||(i[26]=s("p",null,"संक्षेप में: हम वर्तमान में एक न्यूनतम vite टेम्पलेट प्रदान कर रहे हैं, लेकिन आप इसे बढ़ा सकते हैं या अन्य फ्रेमवर्क पर स्विच कर सकते हैं - हमें बताएं कि आप क्या और कैसे बनाते हैं, और हम आपके उपयोग के मामले के लिए अनुभव को कैसे बेहतर बना सकते हैं या एक उदाहरण प्रदान कर सकते हैं!",-1)),s("div",c,[i[12]||(i[12]=s("p",{class:"hint-container-title"},"Tips",-1)),s("p",null,[i[6]||(i[6]=e("कुछ फ्रेमवर्क को ")),i[7]||(i[7]=s("code",null,"needle.config.json",-1)),i[8]||(i[8]=e(" में कस्टम सेटिंग्स की आवश्यकता होती है। अधिक जानकारी ")),n(a,{to:"/lang/hi/reference/needle-config-json.html"},{default:t(()=>i[5]||(i[5]=[e("यहाँ")])),_:1}),i[9]||(i[9]=e(" पाएं। आमतौर पर, ")),i[10]||(i[10]=s("code",null,"baseUrl",-1)),i[11]||(i[11]=e(" सेट करने की आवश्यकता होती है।"))])]),i[27]||(i[27]=l(`<details class="hint-container details"><summary>मैं यूनिटी में एक कस्टम प्रोजेक्ट टेम्पलेट कैसे बनाऊं?</summary><p>आप अन्य बंडलर, बिल्ड सिस्टम, या किसी का भी उपयोग न करने के लिए अपने स्वयं के वेब प्रोजेक्ट टेम्पलेट बना और साझा कर सकते हैं।</p><p><strong>एक नया टेम्पलेट बनाएं</strong></p><ol><li>उस फ़ोल्डर में एक ProjectTemplate जोड़ने के लिए <code>Create/Needle Engine/Project Template</code> चुनें जिसे आप टेम्पलेट के रूप में उपयोग करना चाहते हैं।</li><li>हो गया! यह इतना सरल है।</li></ol><p>निर्भरताएँ यूनिटी से आती हैं जब प्रोजेक्ट में NpmDef होता है (इसलिए जब आपका प्रोजेक्ट स्थानीय संदर्भों का उपयोग करता है)। आप अपने पैकेजों को npm पर भी प्रकाशित कर सकते हैं और संस्करण संख्या के माध्यम से उनका संदर्भ दे सकते हैं।</p></details><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking"><span>Tree-shaking बंडल आकार को कम करने के लिए</span></a></h3><p>Tree shaking वेब एप्लिकेशन के बंडलिंग के संबंध में एक सामान्य अभ्यास को संदर्भित करता है (<a href="https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking" target="_blank" rel="noopener noreferrer">MSDN docs देखें</a>)। इसका मतलब है कि आपके कोड में उपयोग नहीं किए गए कोड पथ और सुविधाओं को फ़ाइल का आकार कम करने के लिए अंतिम बंडल किए गए javascript फ़ाइल(फ़ाइलों) से हटा दिया जाएगा। Needle Engine में शामिल सुविधाओं के बारे में नीचे देखें और उन्हें हटा दें:</p><details class="hint-container details"><summary>Rapier physics engine को कैसे हटाएं? (कुल बंडल आकार को ~2MB (~600KB gzipping करने पर) कम करना)</summary><ul><li><p><strong>विकल्प 1</strong>: needlePlugins कॉन्फ़िगरेशन के माध्यम से: अपने vite.config में <code>useRapier</code> को <code>false</code> पर सेट करें: <code>needlePlugins(command, needleConfig, { useRapier: false }),</code></p></li><li><p><strong>विकल्प 2</strong>: vite.define कॉन्फ़िगरेशन के माध्यम से: <code>NEEDLE_USE_RAPIER</code> को <code>false</code> के साथ परिभाषित करें</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">define</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  NEEDLE_USE_RAPIER</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> false</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">},</span></span></code></pre></div></li><li><p><strong>विकल्प 3</strong>: .env के माध्यम से अपने वेब प्रोजेक्ट में एक <code>.env</code> फ़ाइल बनाएं और <code>VITE_NEEDLE_USE_RAPIER=false</code> जोड़ें</p></li><li><p><strong>विकल्प 4</strong>: यूनिटी कंपोनेंट के माध्यम से अपने सीन में <code>Needle Engine Modules</code> कंपोनेंट जोड़ें और <code>Physics Engine</code> को <code>None</code> पर सेट करें <img src="`+p+`" alt=""></p></li></ul></details><h2 id="pwa" tabindex="-1"><a class="header-anchor" href="#pwa"><span>एक PWA बनाना</span></a></h2><p>हम अपने vite टेम्पलेट से सीधे Progressive Web App (PWA) बनाना आसानी से सपोर्ट करते हैं। PWA वेब एप्लिकेशन होते हैं जो नियमित वेब पेज या वेबसाइटों की तरह लोड होते हैं लेकिन उपयोगकर्ता को ऑफ़लाइन काम करने, पुश नोटिफिकेशन और डिवाइस हार्डवेयर एक्सेस जैसी कार्यक्षमता प्रदान कर सकते हैं जो पारंपरिक रूप से केवल मूल मोबाइल एप्लिकेशन के लिए उपलब्ध थी।</p><p>डिफ़ॉल्ट रूप से, Needle के साथ बनाए गए PWA में ऑफ़लाइन समर्थन होता है, और यदि आप अपने ऐप का नया संस्करण प्रकाशित करते हैं तो वे वैकल्पिक रूप से स्वचालित रूप से रीफ़्रेश हो सकते हैं।</p><ol><li>अपने वेब प्रोजेक्ट में <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a> इंस्टॉल करें: <code>npm install vite-plugin-pwa --save-dev</code></li><li>नीचे दिखाए अनुसार <code>vite.config.js</code> को संशोधित करें। सुनिश्चित करें कि आप <code>needlePlugins</code> और <code>VitePWA</code> दोनों को समान <code>pwaOptions</code> ऑब्जेक्ट पास करें।</li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> VitePWA </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;vite-plugin-pwa&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> default</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> defineConfig</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">async</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ({</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;"> command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> })</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // Create the pwaOptions object. </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // You can edit or enter PWA settings here (e.g. change the PWA name or add icons).</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /** </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">@</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">type</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">import(&quot;vite-plugin-pwa&quot;).VitePWAOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {};</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  </span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> needlePlugins </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> await</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> import</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;@needle-tools/engine/plugins/vite/index.js&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    return</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        plugins</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> [</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">            // pass the pwaOptions object to the needlePlugins and the VitePWA function</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            needlePlugins</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> needleConfig</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwa</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> pwaOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            VitePWA</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">pwaOptions</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        ]</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // the rest of your vite config...</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">डिफ़ॉल्ट रूप से सभी एसेट कैश किए जाते हैं</p><p>ध्यान दें कि डिफ़ॉल्ट रूप से, आपके बिल्ड फ़ोल्डर में सभी एसेट PWA precache में जोड़े जाते हैं - कई डायनामिक एसेट वाले बड़े एप्लिकेशन के लिए, यह वह नहीं हो सकता है जो आप चाहते हैं (कल्पना कीजिए कि YouTube PWA उपयोगकर्ता द्वारा ऐप खोलने के बाद सभी वीडियो कैश करता है!)। इस व्यवहार को कस्टमाइज़ करने के तरीके के लिए <a href="#more-pwa-options">More PWA Options</a> देखें।</p></div><h3 id="pwa-1" tabindex="-1"><a class="header-anchor" href="#pwa-1"><span>PWA का परीक्षण</span></a></h3><p>अपने PWA का परीक्षण करने के लिए, पृष्ठ को डिप्लॉय करें, उदाहरण के लिए <code>DeployToFTP</code> कंपोनेंट का उपयोग करके। फिर, डिप्लॉय किए गए पृष्ठ को ब्राउज़र में खोलें और जांचें कि PWA सुविधाएँ अपेक्षा के अनुसार काम करती हैं या नहीं:</p><ul><li>ऐप इंस्टाल करने योग्य के रूप में दिखाई देता है</li><li>ऐप ऑफ़लाइन काम करता है</li><li>ऐप को <a href="https://pwabuilder.com/" target="_blank" rel="noopener noreferrer">pwabuilder.com</a> द्वारा ऑफ़लाइन-सक्षम PWA के रूप में पहचाना जाता है</li></ul><p>PWA संसाधन कैश करने और ऑफ़लाइन समर्थन प्रदान करने के लिए Service Workers का उपयोग करते हैं। विकास के दौरान Service Workers का उपयोग करना कुछ हद तक कठिन होता है, और आमतौर पर वे केवल बिल्ड के लिए सक्षम होते हैं (उदाहरण के लिए जब आप <code>DeployTo...</code> कंपोनेंट का उपयोग करते हैं)।</p><p>आप अपनी <code>vite.config.js</code> में विकल्पों ऑब्जेक्ट में निम्नलिखित जोड़कर विकास के लिए PWA समर्थन सक्षम कर सकते हैं।</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Note: PWAs behave different in dev mode. </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Make sure to verify the behaviour in production builds!</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  devOptions</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    enabled</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> true</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>कृपया ध्यान दें कि विकास मोड में PWA ऑफ़लाइन उपयोग का समर्थन नहीं करते हैं - इसे आज़माने से अप्रत्याशित व्यवहार हो सकता है।</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>स्वचालित रूप से चल रहे ऐप्स को अपडेट करना</span></a></h3><p>वेबसाइटें आमतौर पर पेज रीफ़्रेश पर नई या अपडेट की गई सामग्री दिखाती हैं।</p><p>कुछ स्थितियों में, आप चाहते हैं कि पृष्ठ स्वचालित रूप से रीफ़्रेश और रीलोड हो जाए जब कोई नया संस्करण प्रकाशित हो - जैसे कि संग्रहालय, व्यापार शो, सार्वजनिक प्रदर्शन, या अन्य लंबे समय तक चलने वाले परिदृश्यों में।</p><p>स्वचालित अपडेट सक्षम करने के लिए, pwaOptions ऑब्जेक्ट में <code>updateInterval</code> प्रॉपर्टी को एक अवधि (मिलीसेकंड में) पर सेट करें जिसमें ऐप को अपडेट के लिए जांच करनी चाहिए। यदि कोई अपडेट पाया जाता है, तो पृष्ठ स्वचालित रूप से रीलोड हो जाएगा।</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  updateInterval</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 15</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 60</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // 15 minutes, in milliseconds</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">आवधिक रीलोड और उपयोगकर्ता डेटा</p><p>ऐसे एप्लिकेशन में स्वचालित रीलोड का उपयोग करने की अनुशंसा नहीं की जाती है जहां उपयोगकर्ता फॉर्म या अन्य डेटा के साथ इंटरैक्ट कर रहे हों जो रीलोड पर खो सकता है। ऐसे एप्लिकेशन के लिए, रीलोड प्रॉम्प्ट दिखाने की अनुशंसा की जाती है। रीलोड के बजाय रीलोड प्रॉम्प्ट को कैसे लागू करें, इस बारे में अधिक जानकारी के लिए <a href="https://vite-pwa-org.netlify.app/guide/prompt-for-update.html" target="_blank" rel="noopener noreferrer">Vite PWA plugin documentation</a> देखें।</p></div><h3 id="pwa-2" tabindex="-1"><a class="header-anchor" href="#pwa-2"><span>अधिक PWA विकल्प</span></a></h3><p>चूंकि Needle पर्दे के पीछे <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a> का उपयोग करता है, आप इसके द्वारा प्रदान किए गए सभी विकल्पों और हुक का उपयोग कर सकते हैं। उदाहरण के लिए, आप एक कस्टम ऐप शीर्षक या थीम रंग के साथ आंशिक मैनिफ़ेस्ट प्रदान कर सकते हैं:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // manifest options provided here will override the defaults </span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  manifest</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    short_name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    theme_color</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;#B2D464&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>आंशिक कैशिंग, कस्टम सर्विस वर्कर या विभिन्न अपडेट रणनीतियों जैसी जटिल आवश्यकताओं के लिए, आप <code>needlePlugins</code> से <code>{ pwa: pwaOptions }</code> विकल्प हटा सकते हैं और Vite PWA plugin के माध्यम से सीधे PWA कार्यक्षमता जोड़ सकते हैं।</p><h2 id="needle-engine-javascript" tabindex="-1"><a class="header-anchor" href="#needle-engine-javascript"><span>Needle Engine और कंपोनेंट को बाहरी javascript से एक्सेस करना</span></a></h2>`,28)),s("p",null,[i[14]||(i[14]=e("आपके द्वारा उजागर किया गया कोड बंडलिंग के बाद JavaScript से एक्सेस किया जा सकता है। यह दर्शक और अन्य एप्लिकेशन बनाने की अनुमति देता है जहां संपादन समय में ज्ञात डेटा और रनटाइम में ही ज्ञात डेटा (जैसे गतिशील रूप से लोड की गई फ़ाइलें, उपयोगकर्ता द्वारा जेनरेट की गई सामग्री) के बीच विभाजन होता है। इंजन के बाहर नियमित javascript से कंपोनेंट एक्सेस करने के लिए कृपया ")),n(a,{to:"/lang/hi/scripting.html#accessing-needle-engine-and-components-from-anywhere"},{default:t(()=>i[13]||(i[13]=[e("interop with regular javascript section")])),_:1}),i[15]||(i[15]=e(" देखें।"))]),i[28]||(i[28]=s("h2",{id:"-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#-1"},[s("span",null,"लोडिंग कैसे दिखती है इसे कस्टमाइज़ करना")])],-1)),s("p",null,[n(a,{to:"/lang/hi/reference/needle-engine-attributes.html"},{default:t(()=>i[16]||(i[16]=[e("needle engine component reference")])),_:1}),i[17]||(i[17]=e(" में ")),i[18]||(i[18]=s("em",null,"Loading Display",-1)),i[19]||(i[19]=e(" सेक्शन देखें।"))]),i[29]||(i[29]=l('<h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>बिल्टिन स्टाइल</span></a></h3><p>needle-engine की लोडिंग दिखावट लाइट या डार्क स्किन का उपयोग कर सकती है। दिखावट बदलने के लिए <code>&lt;needle-engine&gt;</code> वेब कंपोनेंट पर <code>loading-style</code> विशेषता का उपयोग करें। विकल्प <code>light</code> और <code>dark</code> (डिफ़ॉल्ट) हैं:</p><p><code>&lt;needle-engine loading-style=&quot;light&quot;&gt;&lt;/needle-engine&gt;</code></p><h3 id="pro-feature" tabindex="-1"><a class="header-anchor" href="#pro-feature"><span>कस्टम लोडिंग स्टाइल — <em>PRO feature</em></span></a></h3>',4)),s("p",null,[i[21]||(i[21]=e("कृपया ")),n(a,{to:"/lang/hi/reference/needle-engine-attributes.html"},{default:t(()=>i[20]||(i[20]=[e("needle engine component reference")])),_:1}),i[22]||(i[22]=e(" में ")),i[23]||(i[23]=s("em",null,"Loading Display",-1)),i[24]||(i[24]=e(" सेक्शन देखें।"))]),i[30]||(i[30]=s("p",null,[s("img",{src:h,alt:"custom loading"})],-1)),i[31]||(i[31]=s("p",null,"यह पृष्ठ AI का उपयोग करके स्वचालित रूप से अनुवादित किया गया है।",-1))])}const B=r(g,[["render",C]]),E=JSON.parse('{"path":"/lang/hi/html.html","title":"Frameworks, Bundlers, HTML","lang":"hi-IN","frontmatter":{"title":"Frameworks, Bundlers, HTML","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/frameworks, bundlers, html_hi.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine एक वेब कंपोनेंट के तौर पर बनाया गया है।\\nइसका मतलब है कि अपने प्रोजेक्ट में @needle-tools/engine इंस्टॉल करें और  को अपने वेब-प्रोजेक्ट में कहीं भी शामिल करें।"}]],"description":"---\\nNeedle Engine एक वेब कंपोनेंट के तौर पर बनाया गया है।\\nइसका मतलब है कि अपने प्रोजेक्ट में @needle-tools/engine इंस्टॉल करें और  को अपने वेब-प्रोजेक्ट में कहीं भी शामिल करें।"},"headers":[{"level":2,"title":"Bundling and web frontends","slug":"bundling-and-web-frontends","link":"#bundling-and-web-frontends","children":[{"level":3,"title":"Vite, Vue, React, Svelte, React Three Fiber...","slug":"vite-vue-react-svelte-react-three-fiber...","link":"#vite-vue-react-svelte-react-three-fiber...","children":[]},{"level":3,"title":"Tree-shaking बंडल आकार को कम करने के लिए","slug":"tree-shaking","link":"#tree-shaking","children":[]}]},{"level":2,"title":"एक PWA बनाना","slug":"pwa","link":"#pwa","children":[{"level":3,"title":"PWA का परीक्षण","slug":"pwa-1","link":"#pwa-1","children":[]},{"level":3,"title":"स्वचालित रूप से चल रहे ऐप्स को अपडेट करना","slug":"","link":"#","children":[]},{"level":3,"title":"अधिक PWA विकल्प","slug":"pwa-2","link":"#pwa-2","children":[]}]},{"level":2,"title":"Needle Engine और कंपोनेंट को बाहरी javascript से एक्सेस करना","slug":"needle-engine-javascript","link":"#needle-engine-javascript","children":[]},{"level":2,"title":"लोडिंग कैसे दिखती है इसे कस्टमाइज़ करना","slug":"-1","link":"#-1","children":[{"level":3,"title":"बिल्टिन स्टाइल","slug":"-2","link":"#-2","children":[]},{"level":3,"title":"कस्टम लोडिंग स्टाइल — PRO feature","slug":"pro-feature","link":"#pro-feature","children":[]}]}],"git":{"updatedTime":1745319699000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"833ce0af31c32254139592f63afbfed4fac50b2a","time":1745319699000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Language: add FR and HI"}]},"filePathRelative":"lang/hi/html.md"}');export{B as comp,E as data};
