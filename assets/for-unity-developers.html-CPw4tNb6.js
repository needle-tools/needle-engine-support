import{_ as r,c as k,e as l,a as e,d as s,b as a,w as n,r as h,o}from"./app-9T6lAodh.js";const d={},c={class:"hint-container details"};function g(y,i){const t=h("RouteLink"),p=h("video-embed");return o(),k("div",null,[i[41]||(i[41]=l('<p>Needle Engine provides a tight integration into the Unity Editor. This allows developers and designers alike to work together in a familiar environment and deliver fast, performant and lightweight web-experiences.</p><p>The following guide is mainly aimed at developers with a Unity3D background but it may also be useful for developers with a web or three.js background. It covers topics regarding how things are done in Unity vs in three.js or Needle Engine.</p><p>If you are all new to Typescript and Javascript and you want to dive into writing scripts for Needle Engine then we also recommend reading the <a href="./typescript-essentials">Typescript Essentials Guide</a> for a basic understanding between the differences between C# and Javascript/Typescript.</p><p>If you want to code-along you can <a href="https://engine.needle.tools/new" target="_blank" rel="noopener noreferrer">open engine.needle.tools/new</a> to create a small project that you can edit in the browser âš¡</p><h2 id="the-basics" tabindex="-1"><a class="header-anchor" href="#the-basics"><span>The Basics</span></a></h2><p>Needle Engine is a 3d web engine running on-top of <a href="https://threejs.org/" target="_blank" rel="noopener noreferrer">three.js</a>. Three.js is one of the most popular 3D webgl based rendering libraries for the web. Whenever we refer to a <code>gameObject</code> in Needle Engine we are <em>actually</em> also talking about a three.js <code>Object3D</code>, the base type of any object in three.js. Both terms can be used interchangeably. Any <code>gameObject</code> <em>is</em> a <code>Object3D</code>.</p><p>This also means that - if you are already familiar with three.js - you will have no problem at all using Needle Engine. Everything you can do with three.js can be done in Needle Engine as well. If you are already using certain libraries then you will be able to also use them in a Needle Engine based environment.</p>',7)),e("p",null,[i[2]||(i[2]=s("Note: ")),i[3]||(i[3]=e("strong",null,[s("Needle Engine's Exporter does "),e("em",null,"NOT"),s(" compile your existing C# code to Web Assembly")],-1)),i[4]||(i[4]=s(".")),i[5]||(i[5]=e("br",null,null,-1)),i[6]||(i[6]=s(" While using Web Assembly ")),i[7]||(i[7]=e("em",null,"may",-1)),i[8]||(i[8]=s(" result in better performance at runtime, it comes at a high cost for iteration speed and flexibility in building web experiences. Read more about our ")),a(t,{to:"/vision.html"},{default:n(()=>i[0]||(i[0]=[s("vision")])),_:1}),i[9]||(i[9]=s(" and ")),a(t,{to:"/technical-overview.html"},{default:n(()=>i[1]||(i[1]=[s("technical overview")])),_:1}),i[10]||(i[10]=s("."))]),e("details",c,[i[11]||(i[11]=e("summary",null,"How to create a new Unity project with Needle Engine? (Video)",-1)),a(p,{src:"https://www.youtube.com/watch?v=gZX_sqrne8U",limit_height:""})]),i[42]||(i[42]=l(`<h2 id="creating-a-component" tabindex="-1"><a class="header-anchor" href="#creating-a-component"><span>Creating a Component</span></a></h2><p>In Unity you create a new component by deriving from <code>MonoBehaviour</code>:</p><div class="language-csharp" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">using</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> UnityEngine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">public</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> :</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MonoBehaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>A custom component in Needle Engine on the other hand is written as follows:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h2 id="script-fields" tabindex="-1"><a class="header-anchor" href="#script-fields"><span>Script Fields</span></a></h2><h3 id="serializable" tabindex="-1"><a class="header-anchor" href="#serializable"><span>serializable</span></a></h3><p>If you have seen some Needle Engine scripts then you might have noticed that some variables are annotated with <code>@serializable</code> above their declaration. This is a Decorator in Typescript and can be used to modify or annotate code. In Needle Engine this is used for example to let the core serialization know which types we expect in our script when it converts from the raw component information stored in the glTF to a Component instance.<br> Consider the following example:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Object3D </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Behaviour</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myOtherComponent</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Object3D</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    someOtherObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Object3D</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>This tells Needle Engine that <code>myOtherComponent</code> should be of type <code>Behaviour</code>. It will then automatically assign the correct reference to the field when your scene is loaded. The same is true for <code>someOtherObject</code> where we want to deserialize to an <code>Object3D</code> reference.</p><p>Note that in some cases the type can be ommitted. This can be done for all <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">primitive types in Javascript</a>. These are <code>boolean</code>, <code>number</code>, <code>bigint</code>, <code>string</code>, <code>null</code> and <code>undefined</code>.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">()</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // &lt; no type is needed here because the field type is a primitive</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myString</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h3 id="public-vs-private" tabindex="-1"><a class="header-anchor" href="#public-vs-private"><span>public vs private</span></a></h3><p>Field without any accessor modified like <code>private</code>, <code>public</code> or <code>protected</code> will by default be <code>public</code> in javascript</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /// no accessor means it is public:</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // explicitly making it private:</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myPrivateNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    protected</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myProtectedNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>The same is true for methods as well.</p><h2 id="gameobjects-and-the-scene" tabindex="-1"><a class="header-anchor" href="#gameobjects-and-the-scene"><span>GameObjects and the Scene</span></a></h2><p>To access the current scene from a component you use <code>this.scene</code> which is equivalent to <code>this.context.scene</code>, this gives you the root three.js scene object.</p><p>To traverse the hierarchy from a component you can either iterate over the children of an object<br> with a for loop:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">let</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">++</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children[i])</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>or you can iterate using the <code>foreach</code> equivalent:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> child </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(child)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>You can also use three.js specific methods to quickly iterate all objects recursively using the <a href="https://threejs.org/docs/#api/en/core/Object3D.traverse" target="_blank" rel="noopener noreferrer"><code>traverse</code></a> method:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">//---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">traverse</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(obj))</span></span></code></pre></div><p>or to just traverse visible objects use <a href="https://threejs.org/docs/#api/en/core/Object3D.traverseVisible" target="_blank" rel="noopener noreferrer"><code>traverseVisible</code></a> instead.</p><p>Another option that is quite useful when you just want to iterate objects being renderable you can query all renderer components and iterate over them like so:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> renderer </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getComponentsInChildren</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer))</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>For more information about getting components see the next section.</p><h2 id="components" tabindex="-1"><a class="header-anchor" href="#components"><span>Components</span></a></h2>`,29)),e("p",null,[i[13]||(i[13]=s("Needle Engine is making heavy use of a Component System that is similar to that of Unity. This means that you can add or remove components to any ")),i[14]||(i[14]=e("code",null,"Object3D",-1)),i[15]||(i[15]=s(" / ")),i[16]||(i[16]=e("code",null,"GameObject",-1)),i[17]||(i[17]=s(" in the scene. A component will be registered to the engine when using ")),i[18]||(i[18]=e("code",null,"addNewComponent(<Object3D>, <ComponentType>)",-1)),i[19]||(i[19]=s(".")),i[20]||(i[20]=e("br",null,null,-1)),i[21]||(i[21]=s(" The event methods that the attached component will then automatically be called by the engine (e.g. ")),i[22]||(i[22]=e("code",null,"update",-1)),i[23]||(i[23]=s(" or ")),i[24]||(i[24]=e("code",null,"onBeforeRender",-1)),i[25]||(i[25]=s("). A full list of event methods can be found in the ")),a(t,{to:"/scripting.html#lifecycle-methods"},{default:n(()=>i[12]||(i[12]=[s("scripting documentation")])),_:1})]),i[43]||(i[43]=l('<h4 id="finding-components-in-the-scene" tabindex="-1"><a class="header-anchor" href="#finding-components-in-the-scene"><span>Finding Components in the Scene</span></a></h4><p>For getting component you can use the familiar methods similar to Unity. Note that the following uses the <code>Animator</code> type as an example but you can as well use any component type that is either built-in or created by you.</p><table><thead><tr><th>Method name</th><th>Desciption</th></tr></thead><tbody><tr><td><code>this.gameObject.getComponent(Animator)</code></td><td>Get the <code>Animator</code> component on a GameObject/Object3D. It will either return the <code>Animator</code> instance if it has an Animator component or <code>null</code> if the object has no such componnent.</td></tr><tr><td><code>this.gameObject.getComponentInChildren(Animator)</code></td><td>Get the first <code>Animator</code> component on a GameObject/Object3D or on any of its children</td></tr><tr><td><code>this.gameObject.getComponentsInParents(Animator)</code></td><td>Get all animator components in the parent hierarchy (including the current GameObject/Object3D)</td></tr></tbody></table><p>These methods are also available on the static GameObject type. For example <code>GameObject.getComponent(this.gameObject, Animator)</code> to get the <code>Animator</code> component on a passed in GameObject/Object3D.</p><p>To search the whole scene for one or multiple components you can use <code>GameObject.findObjectOfType(Animator)</code> or <code>GameObject.findObjectsOfType(Animator)</code>.</p><h2 id="renamed-unity-types" tabindex="-1"><a class="header-anchor" href="#renamed-unity-types"><span>Renamed Unity Types</span></a></h2><p>Some Unity-specific types are mapped to different type names in our engine. See the following list:</p><table><thead><tr><th>Type in Unity</th><th>Type in Needle Engine</th><th></th></tr></thead><tbody><tr><td><code>UnityEvent</code></td><td><code>EventList</code></td><td>A UnityEvent will be exported as a <code>EventList</code> type (use <code>serializable(EventList)</code> to deserialize UnityEvents)</td></tr><tr><td><code>GameObject</code></td><td><code>Object3D</code></td><td></td></tr><tr><td><code>Transform</code></td><td><code>Object3D</code></td><td>In three.js and Needle Engine a GameObject and a Transform are the same (there is no <code>Transform</code> component). The only exception to that rule is when referencing a <code>RectTransform</code> which is a component in Needle Engine as well.</td></tr><tr><td><code>Color</code></td><td><code>RGBAColor</code></td><td>The three.js color type doesnt have a alpha property. Because of that all Color types exported from Unity will be exported as <code>RGBAColor</code> which is a custom Needle Engine type</td></tr></tbody></table><h2 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>Transform</span></a></h2><p>Transform data can be accessed on the <code>GameObject</code> / <code>Object3D</code> directly. Unlike to Unity there is no extra transform component that holds this data.</p><ul><li><code>this.gameObject.position</code> is the vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.position" target="_blank" rel="noopener noreferrer">position</a> in local space</li><li><code>this.gameObject.worldPosition</code> is the vector3 position in world space</li><li><code>this.gameObject.rotation</code> is the <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.rotation" target="_blank" rel="noopener noreferrer">euler rotation</a> in local space</li><li><code>this.gameObject.worldRotation</code> is the euler rotation in euler angles in world space</li><li><code>this.gameObject.quaternion</code> - is the <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.quaternion" target="_blank" rel="noopener noreferrer">quaternion rotation</a> in local space</li><li><code>this.gameObject.worldQuaternion</code> is the quaternion rotation in world space</li><li><code>this.gameObject.scale</code> - is the vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.scale" target="_blank" rel="noopener noreferrer">scale</a> in local space</li><li><code>this.gameObject.worldScale</code> is the vector3 scale in world space</li></ul><p>The major difference here to keep in mind is that <code>position</code> in three.js is by default a localspace position whereas in Unity <code>position</code> would be worldspace. The next section will explain how to get the worldspace position in three.js.</p><h3 id="world-position-rotation-scale..." tabindex="-1"><a class="header-anchor" href="#world-position-rotation-scale..."><span>WORLD- Position, Rotation, Scale...</span></a></h3><p>In three.js (and thus also in Needle Engine) the <code>object.position</code>, <code>object.rotation</code>, <code>object.scale</code> are all local space coordinates. This is different to Unity where we are used to <code>position</code> being worldspace and using <code>localPosition</code> to deliberately use the local space position.</p><p>If you want to access the world coordinates in Needle Engine we have utility methods that you can use with your objects. Call <code>getWorldPosition(yourObject)</code> to calculate the world position. Similar methods exist for rotation/quaternion and scale. To get access to those methods just import them from Needle Engine like so <code>import { getWorldPosition } from &quot;@needle.tools/engine&quot;</code></p>',15)),e("p",null,[i[27]||(i[27]=s("Note that these utility methods like ")),i[28]||(i[28]=e("code",null,"getWorldPosition",-1)),i[29]||(i[29]=s(", ")),i[30]||(i[30]=e("code",null,"getWorldRotation",-1)),i[31]||(i[31]=s(", ")),i[32]||(i[32]=e("code",null,"getWorldScale",-1)),i[33]||(i[33]=s(" internally have a buffer of Vector3 instances and are meant to be used locally only. This means that you should not cache them in your component, otherwise your cached value will eventually be overriden. But it is safe to call ")),i[34]||(i[34]=e("code",null,"getWorldPosition",-1)),i[35]||(i[35]=s(" multiple times in your function to make calculations without having to worry to re-use the same instance. If you are not sure what this means you should take a look at the ")),i[36]||(i[36]=e("strong",null,"Primitive Types",-1)),i[37]||(i[37]=s(" section in the ")),a(t,{to:"/getting-started/typescript-essentials.html#primitive-types"},{default:n(()=>i[26]||(i[26]=[s("Typescript Essentials Guide")])),_:1})]),i[44]||(i[44]=l(`<h2 id="time" tabindex="-1"><a class="header-anchor" href="#time"><span>Time</span></a></h2><p>Use <code>this.context.time</code> to get access to time data:</p><ul><li><code>this.context.time.time</code> is the time since the application started running</li><li><code>this.context.time.deltaTime</code> is the time that has passed since the last frame</li><li><code>this.context.time.frameCount</code> is the number of frames that have passed since the application started</li><li><code>this.context.time.realtimeSinceStartup</code> is the unscaled time since the application has started running</li></ul><p>It is also possible to use <code>this.context.time.timeScale</code> to deliberately slow down time for e.g. slow motion effects.</p><h2 id="raycasting" tabindex="-1"><a class="header-anchor" href="#raycasting"><span>Raycasting</span></a></h2><p>Use <code>this.context.physics.raycast()</code> to perform a raycast and get a list of intersections. If you dont pass in any options the raycast is performed from the mouse position (or first touch position) in screenspace using the currently active <code>mainCamera</code>. You can also pass in a <code>RaycastOptions</code> object that has various settings like <code>maxDistance</code>, the camera to be used or the layers to be tested against.</p><p>Use <code>this.context.physics.raycastFromRay(your_ray)</code> to perform a raycast using a <a href="https://threejs.org/docs/#api/en/math/Ray" target="_blank" rel="noopener noreferrer">three.js ray</a></p><p>Note that the calls above are by default raycasting against visible scene objects. That is different to Unity where you always need colliders to hit objects. The default three.js solution has both pros and cons where one major con is that it can perform quite slow depending on your scene geometry. It may be especially slow when raycasting against skinned meshes. It is therefor recommended to usually set objects with SkinnedMeshRenderers in Unity to the <code>Ignore Raycast</code> layer which will then be ignored by default by Needle Engine as well.</p><p>Another option is to use the physics raycast methods which will only return hits with colliders in the scene.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">physics</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">engine</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">raycast</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Here is a editable <a href="https://stackblitz.com/edit/needle-engine-physics-raycast-example?file=src%2Fmain.ts,package.json,.gitignore" target="_blank" rel="noopener noreferrer">example for physics raycast</a></p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>Input</span></a></h2><p>Use <code>this.context.input</code> to poll input state:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getPointerDown</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">            console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;POINTER DOWN&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>You can also subscribe to events in the <code>InputEvents</code> enum like so:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> InputEvents</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> NEPointerEvent </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onEnable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onDisable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // it is recommended to also unsubscribe from events when your component becomes inactive</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">removeEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    inputPointerDown</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> (</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">evt</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> NEPointerEvent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(evt)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>If you want to handle inputs yourself you can also subscribe to <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener noreferrer">all events the browser provides</a> (there are a ton). For example to subscribe to the browsers click event you can write:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">window</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ()</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;MOUSE CLICK&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Note that in this case you have to handle all cases yourself. For example you may need to use different events if your user is visiting your website on desktop vs mobile vs a VR device. These cases are automatically handled by the Needle Engine input events (e.g. <code>PointerDown</code> is raised both for mouse down, touch down and in case of VR on controller button down).</p><h2 id="inputsystem-callbacks" tabindex="-1"><a class="header-anchor" href="#inputsystem-callbacks"><span>InputSystem Callbacks</span></a></h2><p>Similar to Unity (see <a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.IPointerClickHandler.html" target="_blank" rel="noopener noreferrer">IPointerClickHandler in Unity</a>) you can also register to receive input events on the component itself.</p><p>To make this work make sure your object has a <code>ObjectRaycaster</code> or <code>GraphicRaycaster</code> component in the parent hierarchy.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> PointerEventData </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> ReceiveClickEvent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> implements</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onPointerClick</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> PointerEventData</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> args)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Note: <code>IPointerEventHandler</code> subscribes the object to all possible pointer events. The handlers for them are:</p><ul><li><code>onPointerDown</code></li><li><code>onPointerUp</code></li><li><code>onPointerEnter</code></li><li><code>onPointerMove</code></li><li><code>onPointerExit</code></li><li><code>onPointerClick</code></li></ul><p>All have a <code>PointerEventData</code> argument describing the event.</p><h2 id="debug.log" tabindex="-1"><a class="header-anchor" href="#debug.log"><span>Debug.Log</span></a></h2><p>The <code>Debug.Log()</code> equivalent in javascript is <code>console.log()</code>. You can also use <code>console.warn()</code> or <code>console.error()</code>.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 42</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello web&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// You can pass in as many arguments as you want like so:</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">findObjectOfType</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><h2 id="gizmos" tabindex="-1"><a class="header-anchor" href="#gizmos"><span>Gizmos</span></a></h2><p>In Unity you normally have to use special methods to draw Gizmos like <code>OnDrawGizmos</code> or <code>OnDrawGizmosSelected</code>. In Needle Engine on the other hand such methods dont exist and you are free to draw gizmos from anywhere in your script. Note that it is also your responsibility then to <em>not</em> draw them in e.g. your deployed web application (you can just filter them by <code>if(isDevEnvironment))</code>).</p><p>Here is an example to draw a red wire sphere for one second for e.g. visualizing a point in worldspace</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Vector3 </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> point</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> Vector3</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Gizmos </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Gizmos</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">DrawWireSphere</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(hit</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">point</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.05</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0xff0000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Here are some of the available gizmo methods:</p><table><thead><tr><th>Method name</th><th></th></tr></thead><tbody><tr><td><code>Gizmos.DrawArrow</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox3</code></td><td></td></tr><tr><td><code>Gizmos.DrawDirection</code></td><td></td></tr><tr><td><code>Gizmos.DrawLine</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawSphere</code></td><td></td></tr><tr><td><code>Gizmos.DrawWireSphere</code></td><td></td></tr></tbody></table><h2 id="useful-utility-methods" tabindex="-1"><a class="header-anchor" href="#useful-utility-methods"><span>Useful Utility Methods</span></a></h2><p>Import from <code>@needle-tools/engine</code> e.g. <code>import { getParam } from &quot;@needle-tools/engine&quot;</code></p><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>getParam()</code></td><td>Checks if a url parameter exists. Returns true if it exists but has no value (e.g. <code>?help</code>), false if it is not found in the url or is set to 0 (e.g. <code>?help=0</code>), otherwise it returns the value (e.g. <code>?message=test</code>)</td></tr><tr><td><code>isMobileDevice()</code></td><td>Returns true if the app is accessed from a mobile device</td></tr><tr><td><code>isDevEnvironment()</code></td><td>Returns true if the current app is running on a local server</td></tr><tr><td><code>isMozillaXR()</code></td><td></td></tr><tr><td><code>isiOS</code></td><td></td></tr><tr><td><code>isSafari</code></td><td></td></tr></tbody></table><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> isMobileDevice </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">( </span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">isMobileDevice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">() )</span></span></code></pre></div><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> getParam </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// returns true </span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myFlag </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> getParam</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;some_flag&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(myFlag)</span></span></code></pre></div><h2 id="the-web-project" tabindex="-1"><a class="header-anchor" href="#the-web-project"><span>The Web project</span></a></h2><p>In C# you usually work with a solution containing one or many projects. In Unity this solution is managed by Unity for you and when you open a C# script it opens the project and shows you the file.<br> You usually install Packages using Unity&#39;s built-in package manager to add features provided by either Unity or other developers (either on your team or e.g. via Unity&#39;s AssetStore). Unity does a great job of making adding and managing packages easy with their PackageManager and you might never have had to manually edit a file like the <code>manifest.json</code> (this is what Unity uses to track which packages are installed) or run a command from the command line to install a package.</p><p>In a web environment you use <code>npm</code> - the Node Package Manager - to manage dependencies / packages for you. It does basically the same to what Unity&#39;s PackageManager does - it installs (downloads) packages from <em>some</em> server (you hear it usually called a <em>registry</em> in that context) and puts them inside a folder named <code>node_modules</code>.</p><p>When working with a web project most of you dependencies are installed from <a href="https://npmjs.com/" target="_blank" rel="noopener noreferrer">npmjs.com</a>. It is the most popular package registry out there for web projects.</p><p>Here is an example of how a package.json might look like:</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">name</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@optional_org/package_name&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">version</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;1.0.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">scripts</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;vite --host&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  },</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">dependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.9-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	},</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">devDependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@types/three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;0.146.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@vitejs/plugin-basic-ssl</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^1.0.1&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">typescript</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^5.0.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^4.3.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite-plugin-compression</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^0.5.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	}</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Our default template uses Vite as its bundler and has no frontend framework pre-installed. Needle Engine is unoppionated about which framework to use so you are free to work with whatever framework you like. We have samples for popular frameworks like Vue.js, Svelte, Next.js, React or React Three Fiber.</p><h2 id="installing-packages-dependencies" tabindex="-1"><a class="header-anchor" href="#installing-packages-dependencies"><span>Installing packages &amp; dependencies</span></a></h2><p>To install a dependency from npm you can open your web project in a commandline (or terminal) and run <code>npm i &lt;the/package_name&gt;</code> (shorthand for <code>npm install</code>)<br> For example run <code>npm i @needle-tools/engine</code> to install <a href="https://www.npmjs.com/package/@needle-tools/engine" target="_blank" rel="noopener noreferrer">Needle Engine</a>. This will then add the package to your <code>package.json</code> to the <code>dependencies</code> array.<br> To install a package as a devDependency only you can run <code>npm i --save-dev &lt;package_name&gt;</code>. More about the difference between dependencies and devDependencies below.</p><h3 id="what-s-the-difference-between-dependencies-and-devdependencies" tabindex="-1"><a class="header-anchor" href="#what-s-the-difference-between-dependencies-and-devdependencies"><span>What&#39;s the difference between &#39;dependencies&#39; and &#39;devDependencies&#39;</span></a></h3><p>You may have noticed that there are two entries containing <em>dependency</em> - <code>dependencies</code> and <code>devDependencies</code>.</p><p><code>dependencies</code> are <strong>always installed</strong> (or bundled) when either your web project is installed or in cases where you develop a library and your package is installed as a dependency of another project.</p><p><code>devDependencies</code> are <strong>only</strong> installed when developing the project (meaning that when you directly run <code>install</code> in the specific directory) and they are otherwise <strong>not</strong> included in your project.</p><h3 id="how-do-i-install-another-package-or-dependency-and-how-to-use-it" tabindex="-1"><a class="header-anchor" href="#how-do-i-install-another-package-or-dependency-and-how-to-use-it"><span>How do I install another package or dependency and how to use it?</span></a></h3><p>The <a href="#installing">Installing</a> section taught us that you can install dependencies by running <code>npm i &lt;package_name&gt;</code> in your project directory where the <code>package_name</code> can be any package that you find on <a href="https://npmjs.org" target="_blank" rel="noopener noreferrer">npm.js</a>.</p><p>Let&#39;s assume you want to add a tweening library to your project. We will use <a href="https://www.npmjs.com/package/@tweenjs/tween.js" target="_blank" rel="noopener noreferrer"><code>@tweenjs/tween.js</code></a> for this example. <a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">Here</a> is the final project if you want to jump ahead and just see the result.</p><p>First run <code>npm install @tweenjs/tween.js</code> in the terminal and wait for the installation to finish. This will add a new entry to our package.json:</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;dependencies&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">: </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.11-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@tweenjs/tween.js</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^20.0.3&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Then open one of your script files in which you want to use tweening and import at the top of the file:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Note that we do here import all types in the library by writing <code>* as TWEEN</code>. We could also just import specific types like <code>import { Tween } from @tweenjs/tween.js</code>.</p><p>Now we can use it in our script. It is always recommended to refer to the documentation of the library that you want to use. In the case of tween.js they provide a <a href="https://github.com/tweenjs/tween.js/blob/HEAD/docs/user_guide.md" target="_blank" rel="noopener noreferrer">user guide</a> that we can follow. Usually the Readme page of the package on npm contains information on how to install and use the package.</p><p>To rotate a cube we create a new component type called <code>TweenRotation</code>, we then go ahead and create our tween instance for the object rotation, how often it should repeat, which easing to use, the tween we want to perform and then we start it. We then only have to call <code>update</code> every frame to update the tween animation. The final script looks like this:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TweenRotation</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // save the instance of our tweener</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> _tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&lt;</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">any</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> rotation </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">rotation</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // create the tween instance</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(rotation)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // set it to repeat forever</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">repeat</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">Infinity</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // set the easing to use</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">easing</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Easing</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Quintic</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">InOut)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // set the values to tween</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">to</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> y</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Math</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">PI</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.5</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> },</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // start it</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">start</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    </span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // update the tweening every frame</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // the &#39;?&#39; is a shorthand for checking if _tween has been created</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">update</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Now we only have to add it to any of the objects in our scene to rotate them forever.<br> You can see the final script in action <a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">here</a>.</p><h1 id="learning-more" tabindex="-1"><a class="header-anchor" href="#learning-more"><span>Learning more</span></a></h1>`,66)),e("ul",null,[i[40]||(i[40]=e("li",null,[e("a",{href:"../scripting"},"Scripting in Needle Engine")],-1)),e("li",null,[a(t,{to:"/getting-started/typescript-essentials.html"},{default:n(()=>i[38]||(i[38]=[s("Typescript Essentials")])),_:1})]),e("li",null,[a(t,{to:"/component-reference.html"},{default:n(()=>i[39]||(i[39]=[s("Component Reference")])),_:1})])])])}const m=r(d,[["render",g]]),u=JSON.parse(`{"path":"/getting-started/for-unity-developers.html","title":"Scripting Introduction for Unity Developers","lang":"en-US","frontmatter":{"title":"Scripting Introduction for Unity Developers","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/scripting introduction for unity developers.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine provides a tight integration into the Unity Editor. This allows developers and designers alike to work together in a familiar environment and deliver fast, performant and lightweight web-experiences.\\nThe following guide is mainly aimed at developers with a Unity3D background but it may also be useful for developers with a web or three.js background. It covers topics regarding how things are done in Unity vs in three.js or Needle Engine.\\nIf you are all new to Typescript and Javascript and you want to dive into writing scripts for Needle Engine then we also recommend reading the Typescript Essentials Guide for a basic understanding between the differences between Cand Javascript/Typescript.\\nIf you want to code-along you can open engine.needle.tools/new to create a small project that you can edit in the browser âš¡\\nNeedle Engine is a 3d web engine running on-top of three.js. Three.js is one of the most popular 3D webgl based rendering libraries for the web. Whenever we refer to a gameObject in Needle Engine we are actually also talking about a three.js Object3D, the base type of any object in three.js. Both terms can be used interchangeably. Any gameObject is a Object3D.\\nThis also means that"}]],"description":"---\\nNeedle Engine provides a tight integration into the Unity Editor. This allows developers and designers alike to work together in a familiar environment and deliver fast, performant and lightweight web-experiences.\\nThe following guide is mainly aimed at developers with a Unity3D background but it may also be useful for developers with a web or three.js background. It covers topics regarding how things are done in Unity vs in three.js or Needle Engine.\\nIf you are all new to Typescript and Javascript and you want to dive into writing scripts for Needle Engine then we also recommend reading the Typescript Essentials Guide for a basic understanding between the differences between Cand Javascript/Typescript.\\nIf you want to code-along you can open engine.needle.tools/new to create a small project that you can edit in the browser âš¡\\nNeedle Engine is a 3d web engine running on-top of three.js. Three.js is one of the most popular 3D webgl based rendering libraries for the web. Whenever we refer to a gameObject in Needle Engine we are actually also talking about a three.js Object3D, the base type of any object in three.js. Both terms can be used interchangeably. Any gameObject is a Object3D.\\nThis also means that"},"headers":[{"level":2,"title":"The Basics","slug":"the-basics","link":"#the-basics","children":[]},{"level":2,"title":"Creating a Component","slug":"creating-a-component","link":"#creating-a-component","children":[]},{"level":2,"title":"Script Fields","slug":"script-fields","link":"#script-fields","children":[{"level":3,"title":"serializable","slug":"serializable","link":"#serializable","children":[]},{"level":3,"title":"public vs private","slug":"public-vs-private","link":"#public-vs-private","children":[]}]},{"level":2,"title":"GameObjects and the Scene","slug":"gameobjects-and-the-scene","link":"#gameobjects-and-the-scene","children":[]},{"level":2,"title":"Components","slug":"components","link":"#components","children":[]},{"level":2,"title":"Renamed Unity Types","slug":"renamed-unity-types","link":"#renamed-unity-types","children":[]},{"level":2,"title":"Transform","slug":"transform","link":"#transform","children":[{"level":3,"title":"WORLD- Position, Rotation, Scale...","slug":"world-position-rotation-scale...","link":"#world-position-rotation-scale...","children":[]}]},{"level":2,"title":"Time","slug":"time","link":"#time","children":[]},{"level":2,"title":"Raycasting","slug":"raycasting","link":"#raycasting","children":[]},{"level":2,"title":"Input","slug":"input","link":"#input","children":[]},{"level":2,"title":"InputSystem Callbacks","slug":"inputsystem-callbacks","link":"#inputsystem-callbacks","children":[]},{"level":2,"title":"Debug.Log","slug":"debug.log","link":"#debug.log","children":[]},{"level":2,"title":"Gizmos","slug":"gizmos","link":"#gizmos","children":[]},{"level":2,"title":"Useful Utility Methods","slug":"useful-utility-methods","link":"#useful-utility-methods","children":[]},{"level":2,"title":"The Web project","slug":"the-web-project","link":"#the-web-project","children":[]},{"level":2,"title":"Installing packages & dependencies","slug":"installing-packages-dependencies","link":"#installing-packages-dependencies","children":[{"level":3,"title":"What's the difference between 'dependencies' and 'devDependencies'","slug":"what-s-the-difference-between-dependencies-and-devdependencies","link":"#what-s-the-difference-between-dependencies-and-devdependencies","children":[]},{"level":3,"title":"How do I install another package or dependency and how to use it?","slug":"how-do-i-install-another-package-or-dependency-and-how-to-use-it","link":"#how-do-i-install-another-package-or-dependency-and-how-to-use-it","children":[]}]}],"git":{"updatedTime":1741521563000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marwie@users.noreply.github.com","commits":39},{"name":"Krystof","username":"Krystof","email":"kipash612@gmail.com","commits":1,"url":"https://github.com/Krystof"},{"name":"hybridherbst","username":"hybridherbst","email":"felix.herbst@gmail.com","commits":4,"url":"https://github.com/hybridherbst"},{"name":"Felix Herbst","username":"","email":"felix.herbst@gmail.com","commits":2}],"changelog":[{"hash":"78305e6712cda8a7dfbea156f2ec00de1b982463","time":1741521563000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add docs for gameObject worldspace etc","tag":"release/4.3.2-beta"},{"hash":"f62246ba766a4f5ce88850c77d41c95defa15643","time":1738882960000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"fix more links, migrate from :tags syntax which causes link issues to frontmatter"},{"hash":"69dd27a196aaca9ee0059d6333f764dffab52c7d","time":1727779285000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"fix broken links"},{"hash":"0c64faf1313d420ba4c8c47435cd9876833c6805","time":1726585195000,"email":"felix.herbst@gmail.com","author":"Felix Herbst","message":"explicitly set twoslash on the scripts that work"},{"hash":"08657b85eb9143a8f91a214c83181f02d628ef4b","time":1726584301000,"email":"felix.herbst@gmail.com","author":"Felix Herbst","message":"sample scripts cleanup, adjust code, add imports so they compile, adjust twoslash config"},{"hash":"c01a70ade9f5dbd112d9a0793b1aaad7886b917f","time":1726514637000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"fixing some types"},{"hash":"d1bb8a7520be74bd36c9a6e315b344597dbd07ea","time":1725399379000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"start reordering header menu","tag":"release/3.47.9"},{"hash":"8141c380ac48ed5b0cf025cca74621a405dcbd89","time":1709193784000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md","tag":"release/3.33.0-pre"},{"hash":"bb3d6ab29995186ef04ec7e2899eb27d3af25121","time":1694512957000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Add needle-engine webcomponent examples + add ContextEvent table"},{"hash":"8d05cbfb9e2605aaa517f07f7a9c76978e62255e","time":1688739824000,"email":"kipash612@gmail.com","author":"Krystof","message":"list all pointer handlers while showcasing the IPointerHandler"},{"hash":"ea71cf22141617a4fdc3110c6ea39dc21b5da5ba","time":1686318145000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Upsdate docs"},{"hash":"12e7070b1efee162384ce38f73f332c878bfc31e","time":1684940378000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Move component compiler docs into separate file"},{"hash":"604c118fdd317c35b559d71ce6f4c59208d1f0cd","time":1684935637000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Unity docs"},{"hash":"f6e3b5240d314b774c1d4c49504709feb7e918e7","time":1684933884000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add docs for debug log and iterating the scene"},{"hash":"ab2f820717b55129385d0db1c8565933830d835c","time":1684921932000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Update Unity dev docs","tag":"release/3.5.12-pre"},{"hash":"4145df0bb7e4c764454535096e8faf47e0de1da4","time":1684918919000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Add docs for installing and using an npm package"},{"hash":"7ae9cb73e73470afccb6954eb790f06f299c70b2","time":1684776286000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"docs update links","tag":"release/3.5.11-pre"},{"hash":"334972184f1370bef667796eddabe550af5d72cb","time":1684759091000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add stackblitz links","tag":"release/3.5.10-pre"},{"hash":"7b1e9ce1d282d8b310d22266d877f308368771c5","time":1684748013000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Update getting started links, rename project structure, add some more primitive typescript docs"},{"hash":"3315558e6c1c13a3f0d484683ec4738ce9187b81","time":1684740189000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"update unity docs"},{"hash":"e1331402b7eeab7d7da54cfaa706b87c03210768","time":1684612158000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"fix scripting links"},{"hash":"3017b8cb4d0f78b39a33bfef9a20ac6921e3a449","time":1684607994000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Adjust table width, some links to typescript docs, test fontmatter description"},{"hash":"2c9b15c8fd2ceddd28377fced3697da661031141","time":1684592760000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"fix some docs, add nav links to sidebar that are always being shown"},{"hash":"2dd3a0e24c0c481f2cc26441e15abb713f92f3db","time":1684586126000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add video, more docs to components and time"},{"hash":"db1ba261816ba3b66f80d2d470d49a4df3d6bddc","time":1684527783000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md","tag":"release/3.5.9-pr.2"},{"hash":"9a6a7a5fb716a25a5051fe6116675ad2df3fd27d","time":1684515971000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"More wording","tag":"release/3.5.9-pr.1"},{"hash":"0d54d66eb9d0f6ec72f6af37d03e49fd0611ee82","time":1684515818000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"minor typo + three.js"},{"hash":"b749bb94edf53b5b1730a0a50e891b5a0c8db436","time":1684515681000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"minor rewording"},{"hash":"7b9299b86cef155257f13b3db9ae3c22d36ec323","time":1684515370000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add info about imports and dependencies"},{"hash":"a63d4c74b596f76bf4f38aae6a149625b86d32e8","time":1684513718000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"adding more documentation to the unity developer guide"},{"hash":"15a4566b901b94a8e0d95142f174467fe503b185","time":1684507444000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"update docs"},{"hash":"eab3609b4f9ba1e74ecfc657a7528843623e0fe8","time":1668445208000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Serializable"},{"hash":"4a701542b83da20c0e49d9948eb14728c7cd82ae","time":1666801854000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"minor","tag":"release/2.41.0-pre"},{"hash":"c239b1d31c1a95b91d8034de07adb07471ed0d11","time":1666604517000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Update docs"},{"hash":"faab8f506b6231e57d842a852231c21b11aa55d9","time":1666542505000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"copyright + update scripting and remove external link icons"},{"hash":"4af6e2fc64dfb8467c329316dc9ca66d798dd4de","time":1666268799000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md"},{"hash":"77222c6967b3c956a6bcd4a3a7402eb8cb1af68b","time":1664282661000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md","tag":"release/2.27.2-pre"},{"hash":"475c608cb38d33080388eced78020d6044218da4","time":1664282647000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md"},{"hash":"3dcaf0f8bb1d0aae169fb99a462bf72ed2c67183","time":1663176010000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md","tag":"release/2.22.0-pre"},{"hash":"bdbafddebf5e13863b5ccbae1746eee6ada159e9","time":1662578547000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md","tag":"release/2.18.0-pre"},{"hash":"ada9e79cd57614a4568f214a88e1a6a3a45a5a74","time":1662578516000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md"},{"hash":"53d13e32f3dd37885bc27b7d01c2f9fe07ff99f8","time":1662578288000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md"},{"hash":"28590e61d8a86d3f47965e439b063a36c15e339a","time":1662577128000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md"},{"hash":"95fa08add662c4f70011ead3b846c7ff65d024ff","time":1662571966000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md"},{"hash":"8683c7759484d8b2b73f1884c7e20cee866218d1","time":1662571672000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update for-unity-developers.md"},{"hash":"9de6f03cef4dd70a491187658f5662ff5682303a","time":1662571502000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Create for-unity-developers.md"}]},"filePathRelative":"getting-started/for-unity-developers.md"}`);export{m as comp,u as data};
