import{_ as d,a as l,b as p,c,d as m,e as h,f as g,g as u,h as y,i as b,j as f,k as x,l as k,m as v,n as _,o as T,p as D,q as P,r as G,s as F,t as U,u as N,v as B,w,x as z}from"./unity-build-window-u6ej7-7p.js";import{_ as C}from"./texture-compression-BuEaeBZn.js";import{_ as E}from"./ktx-env-variable-DxwKzzNo.js";import{_ as S,c as M,a as t,e as o,b as s,d as i,w as O,r as a,o as I}from"./app-9T6lAodh.js";const j={},L={class:"hint-container details"};function A(K,e){const n=a("RouteLink"),r=a("video-embed");return I(),M("div",null,[e[5]||(e[5]=t("h2",{id:"deployment",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#deployment"},[t("span",null,"Deployment का क्या मतलब है?")])],-1)),e[6]||(e[6]=t("p",null,"Deployment आपकी एप्लिकेशन को किसी वेबसाइट पर सार्वजनिक रूप से उपलब्ध कराने की प्रक्रिया है। Needle Engine यह सुनिश्चित करता है कि KTX2, Draco और Meshopt जैसी नवीनतम कम्प्रेशन तकनीकों का उपयोग करके आपका प्रोजेक्ट यथासंभव छोटा और तेज़ हो।",-1)),e[7]||(e[7]=t("h2",{id:"deployment-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#deployment-1"},[t("span",null,"उपलब्ध Deployment लक्ष्य")])],-1)),t("ul",null,[t("li",null,[t("p",null,[s(n,{to:"/lang/hi/cloud/#deploy-from-unity"},{default:O(()=>e[0]||(e[0]=[i("Needle Cloud")])),_:1}),e[1]||(e[1]=i(" स्थानिक वेब ऐप्स और संपत्ति साझा करने के लिए बढ़िया।"))])]),e[2]||(e[2]=o('<li><p><a href="#deploy-to-glitch">Glitch</a> सर्वर-साइड कोड पर प्रयोग और हैकिंग के लिए बढ़िया।</p></li><li><p><a href="#deploy-to-netlify">Netlify</a> आपकी अपनी वेबसाइट और कस्टम डोमेन नाम होस्ट करने के लिए बढ़िया।</p></li><li><p><a href="#deploy-to-itch.io">itch.io</a> अक्सर खेलों के लिए उपयोग किया जाता है।</p></li><li><p><a href="#deploy-to-github-pages">GitHub Pages</a> मुफ़्त स्टैटिक पेज होस्टिंग।</p></li><li><p><a href="#deploy-to-vercel">Vercel</a> फ्रंटएंड डेवलपर्स के लिए प्लेटफ़ॉर्म</p></li><li><p><a href="#deploy-to-ftp">FTP Upload</a> FTP समर्थन वाले किसी भी सर्वर पर सीधे Deploy करें। FTP और SFTP दोनों समर्थित हैं।</p></li><li><p><a href="#build-to-folder">Build to folder</a> किसी फ़ोल्डर में Build करते समय, आप फ़ाइलों को किसी भी वेब सर्वर या अन्य होस्टिंग सेवा पर अपलोड कर सकते हैं।</p></li><li><p><a href="#deploy-to-facebook-instant-games">Facebook Instant Games</a> Facebook और Facebook Messenger पर गेम्स प्लेटफ़ॉर्म।</p></li>',8))]),e[8]||(e[8]=o('<div class="hint-container tip"><p class="hint-container-title">क्या कुछ छूट रहा है?</p><p>कृपया हमारे <a href="https://forum.needle.tools/?utm_source=needle_docs&amp;utm_content=content" target="_blank" rel="noopener noreferrer">forum</a> में हमें बताएं!</p></div><h2 id="development-builds" tabindex="-1"><a class="header-anchor" href="#development-builds"><span>Development Builds</span></a></h2><p>अपने Editor (जैसे Unity या Blender) के भीतर विकल्पों तक पहुँचने के तरीके के बारे में ऊपर दिए गए गाइड देखें।</p><p>Production build से मुख्य अंतर यह है कि यह फ़ाइल आकार और लोडिंग गति को कम करने के लिए <a href="https://registry.khronos.org/KTX/specs/2.0/ktxspec.v2.html" target="_blank" rel="noopener noreferrer">ktx2</a> और <a href="https://google.github.io/draco/" target="_blank" rel="noopener noreferrer">draco</a> कम्प्रेशन नहीं करता है, साथ ही उच्च-गुणवत्ता वाली textures को प्रगतिशील रूप से लोड करने का विकल्प भी नहीं होता है।</p><p>फ़ाइल आकार और लोडिंग गति को अनुकूलित करने के लिए हम आम तौर पर production build बनाने की सलाह देते हैं (नीचे अधिक जानकारी देखें)।</p><h2 id="production-builds" tabindex="-1"><a class="header-anchor" href="#production-builds"><span>Production Builds</span></a></h2><p>एक production build बनाने के लिए, आपके पास <a href="https://github.com/KhronosGroup/KTX-Software/releases" target="_blank" rel="noopener noreferrer">toktx</a> स्थापित होना चाहिए, जो KTX2 सुपरकम्प्रेशन फॉर्मेट का उपयोग करके texture कम्प्रेशन प्रदान करता है। कृपया <a href="https://github.com/KhronosGroup/KTX-Software/releases" target="_blank" rel="noopener noreferrer">toktx Releases Page</a> पर जाएं और नवीनतम संस्करण (लिखते समय v4.1.0) डाउनलोड और इंस्टॉल करें। इसे इंस्टॉल करने के बाद आपको Unity को पुनरारंभ करने की आवश्यकता हो सकती है। <em>यदि आप सुनिश्चित हैं कि आपने toktx इंस्टॉल कर लिया है और यह आपके PATH का हिस्सा है लेकिन फिर भी नहीं मिल रहा है, तो कृपया अपनी मशीन को पुनरारंभ करें और फिर से build करने का प्रयास करें।</em></p><details class="hint-container details"><summary>Advanced: Custom glTF extensions</summary><p>यदि आप अपने custom glTF extensions जोड़ने की योजना बना रहे हैं, तो production के लिए building के लिए <code>gltf-transform</code> में उन्हें संभालना आवश्यक है। संदर्भ के लिए <a href="https://www.npmjs.com/package/@needle-tools/gltf-build-pipeline" target="_blank" rel="noopener noreferrer">@needle-tools/gltf-build-pipeline</a> देखें।</p></details><h3 id="optimization-compression" tabindex="-1"><a class="header-anchor" href="#optimization-compression"><span>Optimization और Compression विकल्प</span></a></h3><h3 id="texture" tabindex="-1"><a class="header-anchor" href="#texture"><span>Texture कम्प्रेशन</span></a></h3><p>Production builds textures को डिफ़ॉल्ट रूप से <strong>KTX2</strong> का उपयोग करके कंप्रेस करेंगे (प्रोजेक्ट में उनके उपयोग के आधार पर ETC1S या UASTC) लेकिन आप <strong>WebP</strong> कम्प्रेशन भी चुन सकते हैं और एक गुणवत्ता स्तर चुन सकते हैं।</p><h4 id="etc1s-uastc-webp" tabindex="-1"><a class="header-anchor" href="#etc1s-uastc-webp"><span>मैं ETC1S, UASTC और WebP कम्प्रेशन में से कैसे चुनूं?</span></a></h4><table><thead><tr><th>फॉर्मेट</th><th>ETC1S</th><th>UASTC</th><th>WebP</th></tr></thead><tbody><tr><td><strong>GPU Memory Usage</strong></td><td>कम</td><td>कम</td><td>उच्च (uncompressed)</td></tr><tr><td><strong>File Size</strong></td><td>कम</td><td>उच्च</td><td>बहुत कम</td></tr><tr><td><strong>Quality</strong></td><td>मध्यम</td><td>बहुत उच्च</td><td>गुणवत्ता सेटिंग पर निर्भर करता है</td></tr><tr><td><strong>Typical usage</strong></td><td>सभी चीज़ों के लिए काम करता है, लेकिन रंग textures के लिए सबसे अच्छा है</td><td>उच्च-विवरण डेटा textures: normal maps, roughness, metallic, आदि।</td><td>ऐसी फाइलें जहां ETC1S गुणवत्ता पर्याप्त नहीं है लेकिन UASTC बहुत बड़ी है</td></tr></tbody></table><p>आप Unity में Needle Texture Importer का उपयोग करके या Blender में Material टैब में प्रति Texture texture कम्प्रेशन और प्रगतिशील लोडिंग विकल्प चुनने का विकल्प रखते हैं।</p><details class="hint-container details"><summary>Unity: मैं प्रति-texture कम्प्रेशन सेटिंग्स कैसे सेट कर सकता हूं?</summary><p><img src="'+l+'" alt="image"><img src="'+p+'" alt="image"></p></details><details class="hint-container details"><summary>Blender: मैं प्रति-texture कम्प्रेशन सेटिंग्स कैसे सेट कर सकता हूं?</summary><p>material टैब का चयन करें। आपको उस material द्वारा उपयोग की जा रही सभी textures के लिए कम्प्रेशन विकल्प दिखाई देंगे। <img src="'+C+'" alt="Blender में Texture Compression विकल्प"></p></details><details class="hint-container details"><summary>Toktx नहीं मिल सकता है</summary><p>Windows: सुनिश्चित करें कि आपने toktx को अपने सिस्टम environment variables में जोड़ा है। environment variables को रीफ्रेश करने के लिए आपको इसे जोड़ने के बाद अपने कंप्यूटर को पुनरारंभ करने की आवश्यकता हो सकती है। डिफ़ॉल्ट इंस्टॉल स्थान <code>C:\\Program Files\\KTX-Software\\bin</code> है <img src="'+E+'" alt="image"></p></details><h3 id="mesh" tabindex="-1"><a class="header-anchor" href="#mesh"><span>Mesh कम्प्रेशन</span></a></h3><p>डिफ़ॉल्ट रूप से, एक production build Draco कम्प्रेशन का उपयोग करके meshes को कंप्रेस करेगा। प्रति exported glTF draco और mesh-opt के बीच चयन करने के लिए <code>MeshCompression</code> component का उपयोग करें। इसके अतिरिक्त आप mesh import settings (Unity) में production builds के लिए polycount को कम करने के लिए mesh simplification सेट कर सकते हैं। ब्राउज़र में अपनी एप्लिकेशन देखते समय, आप meshes का पूर्वावलोकन करने के लिए अपने URL में <code>?wireframe</code> जोड़ सकते हैं।</p><h4 id="draco-meshopt" tabindex="-1"><a class="header-anchor" href="#draco-meshopt"><span>मैं Draco और Meshopt में से कैसे चुनूं?</span></a></h4><table><thead><tr><th>फॉर्मेट</th><th>Draco</th><th>Meshopt</th></tr></thead><tbody><tr><td><strong>GPU Memory Usage</strong></td><td>मध्यम</td><td>कम</td></tr><tr><td><strong>File Size</strong></td><td>सबसे कम</td><td>कम</td></tr><tr><td><strong>Animation compression</strong></td><td>नहीं</td><td>हाँ</td></tr></tbody></table><details class="hint-container details"><summary>मैं draco और meshopt कम्प्रेशन सेटिंग्स कैसे सेट कर सकता हूं?</summary><p>प्रति exported glTF किस कम्प्रेशन को लागू किया जाना चाहिए यह चुनने के लिए MeshCompression घटक जोड़ें।</p><p><img src="'+c+'" alt="image"></p><ul><li><strong>वर्तमान scene</strong> के लिए कम्प्रेशन बदलने के लिए इसे बस अपने root scene में कहीं भी जोड़ें।</li><li><strong>prefab या NestedGltf</strong> के लिए कम्प्रेशन बदलने के लिए इसे एक <code>GltfObject</code> या prefab में जोड़ें जिसे किसी भी घटक द्वारा संदर्भित / निर्यात किया जाता है।</li><li><strong>संदर्भित scene</strong> के लिए कम्प्रेशन बदलने के लिए इसे उस संदर्भित scene में जोड़ें जिसे निर्यात किया गया है</li></ul></details><details class="hint-container details"><summary>उत्पादन के लिए build करते समय vertex count को कम करने के लिए mesh simplification विकल्प कहां मिलेंगे?</summary><p>एक Mesh का चयन करें और चयनित mesh के लिए उपलब्ध विकल्पों को देखने के लिए Needle importer विकल्प खोलें: <img src="'+m+'" alt="image"></p></details><h3 id="progressive-textures" tabindex="-1"><a class="header-anchor" href="#progressive-textures"><span>Progressive Textures</span></a></h3><p>आप अपनी scene में कहीं भी <code>Progressive Texture Settings</code> component भी जोड़ सकते हैं, ताकि आपके प्रोजेक्ट में सभी textures प्रगतिशील रूप से लोड हो जाएं। इस समय lightmaps या skybox textures पर Progressive loading लागू नहीं होती है।</p><p>Progressive loading के साथ textures पहले कम रिज़ॉल्यूशन वाले संस्करण का उपयोग करके लोड की जाएंगी। texture दिखाई देने पर एक पूर्ण गुणवत्ता वाला संस्करण गतिशील रूप से लोड किया जाएगा। यह आमतौर पर आपकी scene की प्रारंभिक लोडिंग को काफी कम कर देता है।</p><details class="hint-container details"><summary>मैं Progressive texture loading कैसे सक्षम करूं?</summary><h3 id="progressive-textures-texture-textures" tabindex="-1"><a class="header-anchor" href="#progressive-textures-texture-textures"><span>Progressive textures को प्रति texture<br>या आपके प्रोजेक्ट में सभी textures के लिए सक्षम किया जा सकता है:</span></a></h3><p><img src="'+l+'" alt="image"></p><h3 id="textures" tabindex="-1"><a class="header-anchor" href="#textures"><span>प्रोजेक्ट में उन सभी textures के लिए सक्षम करें जिनकी कोई अन्य विशिष्ट सेटिंग नहीं है:</span></a></h3><p><img src="'+h+'" alt="image"></p></details><h3 id="automatic-mesh-lods-level-of-detail" tabindex="-1"><a class="header-anchor" href="#automatic-mesh-lods-level-of-detail"><span>Automatic Mesh LODs (Level of Detail)</span></a></h3><p>Needle Engine 3.36 के बाद से हम स्वचालित रूप से LOD meshes उत्पन्न करते हैं और runtime पर उनके बीच स्विच करते हैं। LODs की आवश्यकता होने पर ही मांग पर लोड किए जाते हैं, इसलिए यह सुविधा आपकी लोडिंग समय और प्रदर्शन दोनों को कम करती है।</p><p><strong>मुख्य लाभ</strong></p><ul><li>तेज़ प्रारंभिक लोडिंग समय</li><li>स्क्रीन पर औसतन कम vertices के कारण तेज़ रेंडरिंग समय</li><li>LOD meshes के उपयोग के कारण तेज़ raycasting</li></ul><p>आप <code>Progressive Loading Settings</code> component में या Mesh Importer settings में अपने पूरे प्रोजेक्ट के लिए LOD generation अक्षम कर सकते हैं।</p><p><img src="'+g+'" alt="image"></p><p><img src="'+u+'" alt="image"></p><h2 id="deployment-options" tabindex="-1"><a class="header-anchor" href="#deployment-options"><span>Deployment Options</span></a></h2><h3 id="deploy-to-glitch" tabindex="-1"><a class="header-anchor" href="#deploy-to-glitch"><span>Deploy to Glitch 🎏</span></a></h3><p><a href="https://glitch.com/" target="_blank" rel="noopener noreferrer">Glitch</a> छोटे और बड़े वेबसाइटों की होस्टिंग के लिए एक तेज़ और मुफ़्त तरीका प्रदान करता है। हम एक नए Glitch पेज (हमारे स्टार्टर के आधार पर) पर remix और deploy करने का एक आसान तरीका प्रदान कर रहे हैं, और यदि आवश्यक हो तो उसी Glitch पेज पर एक minimalistic networking server भी चलाने का तरीका प्रदान कर रहे हैं।</p><p>आप अपनी scene में <code>DeployToGlitch</code> component जोड़कर और निर्देशों का पालन करके Glitch पर deploy कर सकते हैं।</p><p>ध्यान दें कि Glitch पर होस्ट किए गए मुफ़्त प्रोजेक्ट्स ~100 MB से अधिक नहीं हो सकते हैं। यदि आपको एक बड़ा प्रोजेक्ट अपलोड करने की आवश्यकता है तो एक अलग Deployment लक्ष्य का उपयोग करने पर विचार करें।</p><details class="hint-container details"><summary>Unity से Glitch पर कैसे deploy करें?</summary><ol><li><p><code>ExportInfo</code> component वाले GameObject में <code>DeployToGlitch</code> component जोड़ें।</p></li><li><p>component पर <code>Create new Glitch Remix</code> बटन पर क्लिक करें <img src="'+y+'" alt="image"></p></li><li><p>Glitch अब टेम्पलेट का एक remix बनाएगा। अपने ब्राउज़र से URL कॉपी करें <img src="https://user-images.githubusercontent.com/5083203/179834901-f28852a9-6b06-4d87-8b5b-0384768c92c1.png" alt="image"></p></li><li><p>Unity को फिर से खोलें और अपनी <code>Deploy To Glitch</code> component के <code>Project Name</code> फ़ील्ड में URL पेस्ट करें <img src="https://user-images.githubusercontent.com/5083203/179835274-033e5e1d-b70d-4b13-95ad-f1e2f159b14e.png" alt="image"></p></li><li><p>कुछ सेकंड प्रतीक्षा करें जब तक Unity को Glitch से आपकी Deployment key प्राप्त नहीं हो जाती (यह key Glitch पर <code>.env</code> फ़ाइल में सुरक्षित रूप से संग्रहीत है। इसे दूसरों के साथ साझा न करें, इस key वाले सभी लोग आपकी Glitch वेबसाइट पर अपलोड कर पाएंगे) <img src="'+b+'" alt="key की प्रतीक्षा कर रहा है"></p></li><li><p>एक बार जब Deploy Key प्राप्त हो जाती है, तो आप Glitch पर अपलोड करने के लिए <code>Build &amp; Deploy</code> बटन पर क्लिक कर सकते हैं।</p></li></ol></details><details class="hint-container details"><summary>Blender से Glitch पर कैसे deploy करें?</summary><p><img src="'+f+'" alt="Blender component से Deploy To Glitch"></p><ol><li>Scene टैब में Deploy To Glitch पैनल ढूंढें</li><li>component पर <code>Remix on glitch</code> बटन पर क्लिक करें</li><li>आपका ब्राउज़र Glitch प्रोजेक्ट टेम्पलेट खोलेगा</li><li>Glitch द्वारा एक नया प्रोजेक्ट generate करने की प्रतीक्षा करें</li><li>प्रोजेक्ट URL को Blender DeployToGlitch पैनल में प्रोजेक्ट नाम के रूप में कॉपी पेस्ट करें (आप पूरा URL पेस्ट कर सकते हैं, पैनल आवश्यक जानकारी निकालेगा)</li><li>Glitch पर <code>.env</code> फ़ाइल खोलें और <strong>DEPLOY_KEY</strong> के आगे <code>Variable Value</code> फ़ील्ड में पासवर्ड दर्ज करें</li><li>Blender में उसी पासवर्ड को <code>Key</code> फ़ील्ड में दर्ज करें</li><li>अपनी परियोजना को build और Glitch पर अपलोड करने के लिए <code>DeployToGlitch</code> बटन पर क्लिक करें। जब अपलोड समाप्त हो जाएगा तो एक ब्राउज़र खुल जाएगा। यदि इसे खोलने के बाद काला दिखाई देता है तो पेज को रीफ्रेश करने का प्रयास करें।</li></ol></details><h4 id="glitch" tabindex="-1"><a class="header-anchor" href="#glitch"><span>Glitch समस्या निवारण</span></a></h4><p>यदि आप <code>Create new Glitch Remix</code> पर क्लिक करते हैं और ब्राउज़र <code>there was an error starting the editor</code> जैसी त्रुटि दिखाता है तो आप <strong>OK</strong> पर क्लिक कर सकते हैं। फिर <a href="https://glitch.com/" target="_blank" rel="noopener noreferrer">glitch.com</a> पर जाएं और सुनिश्चित करें कि आप साइन इन हैं। उसके बाद आप Unity या Blender में बटन पर फिर से क्लिक करने का प्रयास करें।</p><h3 id="deploy-to-netlify" tabindex="-1"><a class="header-anchor" href="#deploy-to-netlify"><span>Deploy to Netlify</span></a></h3><details class="hint-container details"><summary>Unity से Netlify पर कैसे deploy करें?</summary><p>बस अपनी scene में <code>DeployToNetlify</code> component जोड़ें और निर्देशों का पालन करें। आप एक बटन के क्लिक के साथ या मौजूदा प्रोजेक्ट्स पर deploy करके नए प्रोजेक्ट्स बना सकते हैं।</p><p><img src="'+x+'" alt="Netlify component पर deploy करें"></p><p><img src="'+k+'" alt="Netlify component पर deploy करें"></p></details><h3 id="deploy-to-vercel" tabindex="-1"><a class="header-anchor" href="#deploy-to-vercel"><span>Deploy to Vercel</span></a></h3><ol><li>Vercel पर एक नया प्रोजेक्ट बनाएं</li><li>अपनी वेब प्रोजेक्ट को एक github repository में जोड़ें</li><li>repository को Vercel पर अपने प्रोजेक्ट में जोड़ें</li></ol><p>प्रोजेक्ट कॉन्फ़िगरेशन के लिए हमारा <a href="https://github.com/needle-engine/nextjs-sample" target="_blank" rel="noopener noreferrer">sample project</a> देखें</p><h3 id="deploy-to-itch.io" tabindex="-1"><a class="header-anchor" href="#deploy-to-itch.io"><span>Deploy to itch.io</span></a></h3><details class="hint-container details"><summary>Unity से itch.io पर कैसे deploy करें?</summary><ol><li><p><a href="https://itch.io/game/new" target="_blank" rel="noopener noreferrer">itch.io</a> पर एक नया प्रोजेक्ट बनाएं</p></li><li><p><code>Kind of project</code> को <code>HTML</code> पर सेट करें <img src="https://user-images.githubusercontent.com/5083203/191211856-8a114480-bae7-4bd1-868e-2e955587acd7.png" alt="image"></p></li><li><p>अपनी scene में <code>DeployToItch</code> component जोड़ें और <code>Build</code> बटन पर क्लिक करें <img src="https://user-images.githubusercontent.com/5083203/193812540-1881837e-ed9e-49fc-9658-52e5a914299a.png" alt="image"></p></li><li><p>build समाप्त होने की प्रतीक्षा करें, यह समाप्त होने पर अंतिम zip के साथ एक फ़ोल्डर खोलेगा</p></li><li><p>अंतिम zip को itch.io पर अपलोड करें <img src="https://user-images.githubusercontent.com/5083203/191212661-f626f0cb-bc8e-4738-ad2c-3982aca65f39.png" alt="20220920-104629_Create_a_new_project_-itch io-_Google_Chrome-needle"></p></li><li><p><code>This file will be played in the browser</code> का चयन करें <img src="https://user-images.githubusercontent.com/5083203/191212967-00b687f3-bf56-449e-880c-d8daf8a52247.png" alt="image"></p></li><li><p>अपना itch पेज सहेजें और itch प्रोजेक्ट पेज देखें। यह अब आपका Needle Engine प्रोजेक्ट लोड करना चाहिए 😊</p></li></ol><h4 id="optional" tabindex="-1"><a class="header-anchor" href="#optional"><span>Optional सेटिंग्स</span></a></h4><p><img src="https://user-images.githubusercontent.com/5083203/191217263-355d9b72-5431-4170-8eca-bfbbb39ae810.png" alt="image"></p></details><details class="hint-container details"><summary>Itch.io: index.html नहीं मिला</summary><h4 id="index.html" tabindex="-1"><a class="header-anchor" href="#index.html"><span>index.html नहीं मिला</span></a></h4><p><img src="https://user-images.githubusercontent.com/5083203/191213162-2be63e46-2a65-4d41-a713-98c753ccb600.png" alt="image"> यदि आपको अपनी परियोजना अपलोड करने के बाद यह त्रुटि दिखाई देती है तो सुनिश्चित करें कि आप gzipped index.html अपलोड न करें। आप अपने Needle web project फ़ोल्डर में <code>vite.config.js</code> में gzip कम्प्रेशन अक्षम कर सकते हैं। बस <code>viteCompression({ deleteOriginFile: true })</code> वाली पंक्ति हटा दें। अपनी परियोजना को फिर से build करें और itch पर अपलोड करें।</p></details><h3 id="deploy-to-ftp" tabindex="-1"><a class="header-anchor" href="#deploy-to-ftp"><span>Deploy to FTP</span></a></h3><details class="hint-container details"><summary>Unity से अपने FTP सर्वर पर कैसे deploy करें?</summary><ol><li>अपनी scene में एक GameObject पर <code>DeployToFTP</code> component¹ जोड़ें (यह ExportInfo वाले उसी GameObject में इसे जोड़ना एक अच्छा अभ्यास है - लेकिन यह अनिवार्य नहीं है)</li><li>यदि आपने पहले से नहीं किया है तो एक FTP सर्वर asset निर्दिष्ट करें और सर्वर, उपयोगकर्ता नाम और पासवर्ड भरें ² <em>इस asset में आपके FTP सर्वर तक पहुँच जानकारी होती है - जब आप अपने होस्टिंग प्रदाता पर एक नया FTP खाता बनाते हैं तो आपको वे प्राप्त होते हैं</em></li><li>अपने प्रोजेक्ट को build और इसे अपने FTP खाते में अपलोड करने के लिए <code>DeployToFTP</code> component पर <kbd>Build &amp; Deploy</kbd> बटन पर क्लिक करें</li></ol><p><img src="'+v+'" alt="Unity में Deploy to FTP component"><em>¹ Deploy to FTP component</em></p><p><img src="'+_+'" alt="FTP सर्वर asset"><em>² FTP सर्वर asset जिसमें आपके FTP उपयोगकर्ता खाते की पहुँच जानकारी होती है</em></p><p><img src="'+T+'" alt="Unity में असाइन किए गए सर्वर asset के साथ Deploy to FTP component"><em>सर्वर asset असाइन होने के बाद Deploy To FTP component। आप path फ़ील्ड का उपयोग करके सीधे अपने सर्वर पर एक उप-फ़ोल्डर में deploy कर सकते हैं</em></p></details><details class="hint-container details"><summary>मैं मैन्युअल रूप से अपने FTP सर्वर पर कैसे deploy करूं?</summary><ol><li><code>File &gt; Build Settings</code> खोलें, <code>Needle Engine</code> चुनें, और <kbd>Build</kbd> पर क्लिक करें</li><li>build पूरा होने की प्रतीक्षा करें - परिणामी <code>dist</code> फ़ोल्डर सभी build और कम्प्रेशन चरण चलने के बाद स्वचालित रूप से खुल जाएगा।</li><li><code>dist</code> फ़ोल्डर से फ़ाइलों को अपने FTP स्टोरेज में कॉपी करें।</li></ol><p><strong>बस हो गया!</strong> 😉</p><p><img src="https://user-images.githubusercontent.com/2693840/187311461-e6afb2d7-5761-48cf-bacb-1c1733bb768b.png" alt="20220830-003602_explorer-needle"></p><blockquote><p><strong>ध्यान दें</strong>: यदि अपलोड करने के बाद परिणाम काम नहीं करता है तो हो सकता है कि आपका वेब सर्वर gzipped फ़ाइलों को सर्व करने का समर्थन नहीं करता हो। समस्या को ठीक करने के लिए आपके पास दो विकल्प हैं: विकल्प 1: आप .htaccess फ़ाइल का उपयोग करके अपने सर्वर पर gzip कम्प्रेशन सक्षम करने का प्रयास कर सकते हैं! विकल्प 2: आप File/Build Window में build सेटिंग्स में gzip कम्प्रेशन बंद कर सकते हैं और Needle Engine प्लेटफ़ॉर्म चुन सकते हैं।</p></blockquote><blockquote><p><strong>ध्यान दें</strong>: यदि आपको कम्प्रेशन के दौरान त्रुटियां मिल रही हैं, तो कृपया हमें बताएं और बग रिपोर्ट करें! यदि आपकी परियोजना स्थानीय रूप से काम करती है और केवल उत्पादन build करते समय विफल हो जाती है, तो आप Development Build करके तुरंत समस्या से बाहर निकल सकते हैं। इसके लिए, Build Settings में बस <code>Development Build</code> चालू करें।</p></blockquote><p><img src="'+D+`" alt="Unity build window में Needle Engine प्लेटफ़ॉर्म दिखाया जा रहा है"></p></details><h4 id=".htaccess-gzip" tabindex="-1"><a class="header-anchor" href="#.htaccess-gzip"><span>.htaccess फ़ाइल का उपयोग करके gzip सक्षम करना</span></a></h4><p>अपने FTP सर्वर पर gzip कम्प्रेशन सक्षम करने के लिए आप उस डायरेक्टरी में (या पैरेंट डायरेक्टरी) <code>.htaccess</code> नाम की एक फ़ाइल बना सकते हैं जहाँ आप अपलोड करना चाहते हैं। निम्नलिखित कोड को अपनी <code>.htaccess</code> फ़ाइल में डालें और इसे अपने सर्वर पर सहेजें/अपलोड करें:</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span>&lt;IfModule mod_mime.c&gt;</span></span>
<span class="line"><span>RemoveType .gz</span></span>
<span class="line"><span>AddEncoding gzip .gz</span></span>
<span class="line"><span>AddType application/javascript .js.gz</span></span></code></pre></div><h3 id="deploy-to-github-pages" tabindex="-1"><a class="header-anchor" href="#deploy-to-github-pages"><span>Deploy to Github Pages</span></a></h3>`,58)),t("details",L,[e[3]||(e[3]=t("summary",null,"Unity से Github Pages पर कैसे deploy करें?",-1)),e[4]||(e[4]=t("p",null,[i("अपनी scene में DeployToGithubPages component जोड़ें और उस github repository (या github pages url) को कॉपी-पेस्ट करें जहाँ आप deploy करना चाहते हैं। "),t("img",{src:d,alt:"Github pages component पर deploy करें"})],-1)),s(r,{src:"https://www.youtube.com/watch?v=Vyk3cWB6u-c"})]),e[9]||(e[9]=o('<h4 id="github-pages" tabindex="-1"><a class="header-anchor" href="#github-pages"><span>Github pages समस्या निवारण</span></a></h4><ul><li><strong>मैंने github pages पर deploy किया लेकिन कोई action नहीं चल रहा है / वेबसाइट लाइव नहीं है</strong><ul><li>यदि आपने पहली बार deploy किया है तो आपकी वेबसाइट उपलब्ध होने में कुछ मिनट लग सकते हैं। आप deployment प्रक्रिया देखने के लिए github पर <strong>Actions</strong> टैब (<code>/actions</code>) देख सकते हैं।</li><li>यदि कुछ मिनटों के बाद आपकी वेबसाइट लाइव नहीं होती है या आपको github पर <strong>Actions</strong> टैब में कोई workflow run दिखाई नहीं देता है तो <strong>Github Pages</strong> सेटिंग्स पेज (<code>/settings/pages</code>) पर जाएं और सुनिश्चित करें कि <strong>Branch</strong> <em>gh-pages</em> पर सेट है।</li></ul></li></ul><h3 id="deploy-to-facebook-instant-games" tabindex="-1"><a class="header-anchor" href="#deploy-to-facebook-instant-games"><span>Deploy to Facebook Instant Games</span></a></h3><p>Needle Engine के साथ आप Facebook Instant Games के लिए स्वचालित रूप से build कर सकते हैं आपके वेब ऐप या गेम में कोई मैन्युअल समायोजन आवश्यक नहीं है।</p><details class="hint-container details"><summary>Unity से Facebook Instant Games पर कैसे deploy करें?</summary><ul><li>अपनी scene में <code>Deploy To Facebook Instant Games</code> component जोड़ें: <img src="'+P+'" alt="Facebook instant games component पर deploy करें"></li><li><code>Build For Instant Games</code> बटन पर क्लिक करें</li><li>build समाप्त होने के बाद आपको एक ZIP फ़ाइल मिलेगी जिसे आप अपने facebook app पर अपलोड कर सकते हैं।</li><li>Facebook पर <code>Instant Games</code> मॉड्यूल जोड़ें और <code>Instant Games/Web hosting</code> पर जाएं <img src="'+G+'" alt="Facebook instant games होस्ट करना"></li><li>आप <code>Upload version</code> बटन (1) का उपयोग करके अपना zip अपलोड कर सकते हैं। अपलोड समाप्त होने और zip संसाधित होने के बाद, अपनी ऐप (2, यहाँ नीला बटन) या <code>Push to production</code> (स्टार आइकन वाला बटन) का परीक्षण करने के लिए <code>Stage for testing</code> बटन पर क्लिक करें। <img src="'+F+'" alt="zip को Facebook instant games पर अपलोड करें"></li><li>बस हो गया - फिर आप facebook पर अपने गेम का परीक्षण करने के लिए प्रत्येक संस्करण के आगे <code>Play</code> बटन पर क्लिक कर सकते हैं।</li></ul></details><details class="hint-container details"><summary>Facebook पर एक ऐप कैसे बनाएं (Instant Games क्षमताओं के साथ)</summary><ol><li><p><a href="https://developers.facebook.com/apps/creation/" target="_blank" rel="noopener noreferrer">एक नया ऐप बनाएं</a> और <code>Other</code> चुनें। फिर <code>Next</code> पर क्लिक करें। <img src="'+U+'" alt="Facebook instant games app बनाएं"></p></li><li><p><code>Instant Games</code> प्रकार चुनें <img src="'+N+'" alt="Facebook instant games app बनाएं"></p></li><li><p>ऐप बनाने के बाद <code>Instant Games</code> उत्पाद जोड़ें <img src="'+B+'" alt="Instant games उत्पाद जोड़ें"></p></li></ol><p>यहां आप facebook पर <a href="https://developers.facebook.com/docs/games/build/instant-games" target="_blank" rel="noopener noreferrer">official instant games documentation</a> पा सकते हैं। <strong>ध्यान दें</strong> कि आपको बस instant games क्षमताओं वाला एक ऐप बनाना है। हम बाकी सब का ध्यान रखेंगे और आपकी Needle Engine वेबसाइट में कोई मैन्युअल समायोजन आवश्यक नहीं है।</p></details><h2 id="build-to-folder" tabindex="-1"><a class="header-anchor" href="#build-to-folder"><span>Build To Folder</span></a></h2><p>Unity में <code>File/Build Settings</code> खोलें और विकल्पों के लिए <code>Needle Engine</code> चुनें:</p><p><img src="'+w+'" alt="image"></p><p><img src="'+z+'" alt="image"></p><p>किसी भी वेब सर्वर पर अपलोड करने के लिए अपनी वेब प्रोजेक्ट को build करने के लिए आप Unity Editor Build Settings Window में <strong>Build</strong> पर क्लिक कर सकते हैं। आप कम्प्रेशन को छोड़ने के लिए <code>Development Build</code> चेकबॉक्स सक्षम कर सकते हैं (नीचे देखें) जिसके लिए आपकी मशीन पर toktx स्थापित होना आवश्यक है।</p><p>अपनी अंतिम build का स्थानीय रूप से पूर्वावलोकन करने के लिए आप विंडो के नीचे <code>Preview Build</code> बटन का उपयोग कर सकते हैं। यह बटन पहले एक नियमित build करेगा और फिर अंतिम फ़ाइलों वाली डायरेक्टरी में एक स्थानीय सर्वर शुरू करेगा ताकि आप देख सकें कि इन फ़ाइलों को अपने वेब सर्वर पर अपलोड करने के बाद आपको क्या मिलता है।</p><p>Nodejs केवल विकास के दौरान आवश्यक है। वितरित वेबसाइट (हमारे डिफ़ॉल्ट vite टेम्पलेट का उपयोग करके) एक static page है जो Nodejs पर निर्भर नहीं करती है और इसे किसी भी नियमित वेब सर्वर पर रखा जा सकता है। Nodejs आवश्यक है यदि आप हमारे minimalistic networking server को उसी वेब सर्वर पर चलाना चाहते हैं (Glitch Deployment प्रक्रिया में स्वचालित रूप से शामिल)।</p><hr><h2 id="cross-platform-deployment" tabindex="-1"><a class="header-anchor" href="#cross-platform-deployment"><span>Cross-Platform Deployment वर्कफ़्लो</span></a></h2><p>नियमित Unity प्रोजेक्ट बनाना संभव है जहां आप Needle Engine और Desktop या WebGL जैसे नियमित Unity प्लेटफ़ॉर्म दोनों पर build कर सकते हैं। हमारा &quot;component mapping&quot; दृष्टिकोण का मतलब है कि Unity के भीतर कोई runtime logic संशोधित नहीं होती है - यदि आप चाहें तो नियमित रूप से Play Mode का उपयोग कर सकते हैं और अन्य लक्ष्य प्लेटफ़ॉर्म पर build कर सकते हैं। कुछ मामलों में इसका मतलब होगा कि आपके पास डुप्लिकेट कोड (C# कोड और मिलान करने वाला TypeScript logic) होगा। इसके कारण अतिरिक्त कार्य की मात्रा आपके प्रोजेक्ट पर निर्भर करती है।</p><p><strong>Unity में Play Mode दर्ज करें</strong><code>Project Settings &gt; Needle Engine</code> में, आप Needle की build प्रक्रिया और Unity की build प्रक्रिया के बीच स्विच करने के लिए <code>Override Play Mode</code> और <code>Override Build settings</code> बंद कर सकते हैं: <img src="https://user-images.githubusercontent.com/2693840/187308490-5acb9016-ffff-4113-be62-4de450a42b08.png" alt="image"></p><h2 id="unity-needle-engine-commandline-arguments" tabindex="-1"><a class="header-anchor" href="#unity-needle-engine-commandline-arguments"><span>Unity के लिए Needle Engine Commandline Arguments</span></a></h2><p>Unity के लिए Needle Engine बैच मोड (windowsless) में एकल संपत्ति (Prefabs या Scenes) निर्यात करने या पूरी वेब प्रोजेक्ट को build करने के लिए विभिन्न commandline arguments का समर्थन करता है।</p><p>निम्नलिखित सूची उपलब्ध विकल्पों की एक तालिका प्रदान करती है:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>-scene</code></td><td>export किए जाने वाले दृश्य या संपत्ति का पथ, उदा. <code>Assets/path/to/myObject.prefab</code> या <code>Assets/path/to/myScene.unity</code></td></tr><tr><td><code>-outputPath &lt;path/to/output.glb&gt;</code></td><td>build के लिए आउटपुट पथ सेट करें (केवल एक दृश्य build करते समय मान्य)</td></tr><tr><td><code>-buildProduction</code></td><td>एक production build चलाएं</td></tr><tr><td><code>-buildDevelopment</code></td><td>एक development build चलाएं</td></tr><tr><td><code>-debug</code></td><td>debugging के लिए एक कंसोल विंडो खोलें</td></tr></tbody></table><hr><p>पेज AI द्वारा स्वचालित रूप से अनुवादित</p>',23))])}const q=S(j,[["render",A]]),H=JSON.parse('{"path":"/lang/hi/deployment.html","title":"Deployment and Optimization","lang":"hi-IN","frontmatter":{"title":"Deployment and Optimization","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/deployment and optimization_hi.png"}],["meta",{"name":"og:description","content":"---\\nDeployment आपकी एप्लिकेशन को किसी वेबसाइट पर सार्वजनिक रूप से उपलब्ध कराने की प्रक्रिया है। Needle Engine यह सुनिश्चित करता है कि KTX2, Draco और Meshopt जैसी नवीनतम कम्प्रेशन तकनीकों का उपयोग करके आपका प्रोजेक्ट यथासंभव छोटा और तेज़ हो।"}]],"description":"---\\nDeployment आपकी एप्लिकेशन को किसी वेबसाइट पर सार्वजनिक रूप से उपलब्ध कराने की प्रक्रिया है। Needle Engine यह सुनिश्चित करता है कि KTX2, Draco और Meshopt जैसी नवीनतम कम्प्रेशन तकनीकों का उपयोग करके आपका प्रोजेक्ट यथासंभव छोटा और तेज़ हो।"},"headers":[{"level":2,"title":"Deployment का क्या मतलब है?","slug":"deployment","link":"#deployment","children":[]},{"level":2,"title":"उपलब्ध Deployment लक्ष्य","slug":"deployment-1","link":"#deployment-1","children":[]},{"level":2,"title":"Development Builds","slug":"development-builds","link":"#development-builds","children":[]},{"level":2,"title":"Production Builds","slug":"production-builds","link":"#production-builds","children":[{"level":3,"title":"Optimization और Compression विकल्प","slug":"optimization-compression","link":"#optimization-compression","children":[]},{"level":3,"title":"Texture कम्प्रेशन","slug":"texture","link":"#texture","children":[]},{"level":3,"title":"Mesh कम्प्रेशन","slug":"mesh","link":"#mesh","children":[]},{"level":3,"title":"Progressive Textures","slug":"progressive-textures","link":"#progressive-textures","children":[]},{"level":3,"title":"Automatic Mesh LODs (Level of Detail)","slug":"automatic-mesh-lods-level-of-detail","link":"#automatic-mesh-lods-level-of-detail","children":[]}]},{"level":2,"title":"Deployment Options","slug":"deployment-options","link":"#deployment-options","children":[{"level":3,"title":"Deploy to Glitch 🎏","slug":"deploy-to-glitch","link":"#deploy-to-glitch","children":[]},{"level":3,"title":"Deploy to Netlify","slug":"deploy-to-netlify","link":"#deploy-to-netlify","children":[]},{"level":3,"title":"Deploy to Vercel","slug":"deploy-to-vercel","link":"#deploy-to-vercel","children":[]},{"level":3,"title":"Deploy to itch.io","slug":"deploy-to-itch.io","link":"#deploy-to-itch.io","children":[]},{"level":3,"title":"Deploy to FTP","slug":"deploy-to-ftp","link":"#deploy-to-ftp","children":[]},{"level":3,"title":"Deploy to Github Pages","slug":"deploy-to-github-pages","link":"#deploy-to-github-pages","children":[]},{"level":3,"title":"Deploy to Facebook Instant Games","slug":"deploy-to-facebook-instant-games","link":"#deploy-to-facebook-instant-games","children":[]}]},{"level":2,"title":"Build To Folder","slug":"build-to-folder","link":"#build-to-folder","children":[]},{"level":2,"title":"Cross-Platform Deployment वर्कफ़्लो","slug":"cross-platform-deployment","link":"#cross-platform-deployment","children":[]},{"level":2,"title":"Unity के लिए Needle Engine Commandline Arguments","slug":"unity-needle-engine-commandline-arguments","link":"#unity-needle-engine-commandline-arguments","children":[]}],"git":{"updatedTime":1745319699000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"833ce0af31c32254139592f63afbfed4fac50b2a","time":1745319699000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Language: add FR and HI"}]},"filePathRelative":"lang/hi/deployment.md"}');export{q as comp,H as data};
