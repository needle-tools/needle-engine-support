import{_ as r}from"./unity-needle-engine-modules-physics-De-OMij1.js";import{_ as d}from"./custom-loading-style-s1K1my2z.js";import{_ as p,c as h,e as l,a as i,d as n,b as t,w as a,r as k,o}from"./app-9T6lAodh.js";const g={},u={class:"hint-container tip"};function c(f,e){const s=k("RouteLink");return o(),h("div",null,[e[26]||(e[26]=l('<h2 id="bundling-und-web-frontends" tabindex="-1"><a class="header-anchor" href="#bundling-und-web-frontends"><span>Bundling und Web Frontends</span></a></h2><p>Needle Engine ist als Web Component aufgebaut. Das bedeutet, installiere einfach <code>@needle-tools/engine</code> in deinem Projekt und füge <code>&lt;needle-engine src=&quot;path/to/your.glb&quot;&gt;</code> überall in deinem Webprojekt ein.</p><ul><li>Installation via npm: <code>npm i @needle-tools/engine</code></li></ul><p>Mit unserer Standard-Vite-basierten Projektvorlage wird Needle Engine bei der Bereitstellung zu einer Web-App gebündelt. Dies sorgt für kleinere Dateien, Tree-Shaking (ähnlich dem Code-Stripping in Unity) und optimiert die Ladezeiten. Anstatt zahlreiche kleine Skripte und Komponenten herunterzuladen, wird nur eines oder wenige heruntergeladen, die den minimal benötigten Code enthalten.</p><p>Vite (unser Standard-Bundler) erklärt gut, warum Web-Apps für die Produktion gebündelt werden sollten: <a href="https://vitejs.dev/guide/why.html" target="_blank" rel="noopener noreferrer">Why Bundle for Production</a></p><h3 id="vite-vue-react-svelte-react-three-fiber..." tabindex="-1"><a class="header-anchor" href="#vite-vue-react-svelte-react-three-fiber..."><span>Vite, Vue, React, Svelte, React Three Fiber...</span></a></h3><p>Needle Engine ist unvoreingenommen bezüglich der Wahl des Frameworks. Unsere Standardvorlage verwendet das beliebte <a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">vite</a> als Bundler. Von dort aus kannst du vue, svelte, nuxt, react, react-three-fiber oder andere Frameworks hinzufügen, und wir haben Beispiele für viele davon. Du kannst auch andere Bundler integrieren oder gar keinen verwenden – einfach reines HTML und Javascript.</p><p>Hier sind einige Beispiel-Tech-Stacks, die möglich sind und mit denen wir Needle Engine verwenden:</p>',8)),i("ul",null,[e[4]||(e[4]=l('<li><p><strong>Vite + HTML</strong> – Das verwendet unsere Standardvorlage!</p></li><li><p><strong>Vite + Vue</strong> – Das verwendet die Website von <a href="https://needle.tools" target="_blank" rel="noopener noreferrer">Needle Tools</a>! Ein Beispiel zum Herunterladen findest du <a href="https://github.com/needle-tools/needle-engine-samples" target="_blank" rel="noopener noreferrer">hier</a>.</p></li><li><p><strong>Vite + Svelte</strong></p></li><li><p><strong>Vite + SvelteKit</strong></p></li><li><p><strong>Vite + React</strong> – Es gibt eine experimentelle Vorlage, die mit der Unity-Integration geliefert wird und die du bei der Projekterstellung auswählen kannst!</p></li><li><p><strong>react-three-fiber</strong> – Es gibt eine experimentelle Vorlage, die mit der Unity-Integration geliefert wird und die du bei der Projekterstellung auswählen kannst!</p></li><li><p><strong>Vercel &amp; Nextjs</strong> – Ein <a href="https://github.com/needle-engine/nextjs-sample" target="_blank" rel="noopener noreferrer">Beispielprojekt für Nextjs findest du hier</a>.</p></li>',7)),i("li",null,[i("p",null,[e[1]||(e[1]=i("strong",null,"CDN ohne Bundler",-1)),e[2]||(e[2]=n(" – Ein Codebeispiel findest du ")),t(s,{to:"/lang/de/vanilla-js.html"},{default:a(()=>e[0]||(e[0]=[n("hier")])),_:1}),e[3]||(e[3]=n("."))])])]),e[27]||(e[27]=i("p",null,"Kurz gesagt: Wir stellen derzeit eine minimale Vite-Vorlage bereit, aber du kannst sie erweitern oder zu anderen Frameworks wechseln – Sag uns, was und wie du baust, und wie wir die Erfahrung für deinen Anwendungsfall verbessern oder ein Beispiel bereitstellen können!",-1)),i("div",u,[e[12]||(e[12]=i("p",{class:"hint-container-title"},"Tips",-1)),i("p",null,[e[6]||(e[6]=n("Einige Frameworks erfordern benutzerdefinierte Einstellungen in ")),e[7]||(e[7]=i("code",null,"needle.config.json",-1)),e[8]||(e[8]=n(". Erfahre mehr ")),t(s,{to:"/lang/de/reference/needle-config-json.html"},{default:a(()=>e[5]||(e[5]=[n("hier")])),_:1}),e[9]||(e[9]=n(". Typischerweise muss die ")),e[10]||(e[10]=i("code",null,"baseUrl",-1)),e[11]||(e[11]=n(" festgelegt werden."))])]),e[28]||(e[28]=l(`<details class="hint-container details"><summary>Wie erstelle ich eine benutzerdefinierte Projektvorlage in Unity?</summary><p>Du kannst deine eigenen Webprojektvorlagen erstellen und teilen, um andere Bundler, Build-Systeme oder gar keine zu verwenden.</p><p><strong>Neue Vorlage erstellen</strong></p><ol><li>Wähle <code>Create/Needle Engine/Project Template</code>, um eine ProjectTemplate in den Ordner einzufügen, den du als Vorlage verwenden möchtest.</li><li>Fertig! So einfach ist das.</li></ol><p>Die Abhängigkeiten kommen von Unity, wenn es ein NpmDef im Projekt gibt (also wenn dein Projekt lokale Referenzen verwendet). Du könntest deine Pakete auch bei npm veröffentlichen und sie über die Versionsnummer referenzieren.</p></details><h3 id="tree-shaking-zur-reduzierung-der-bundle-gr-e" tabindex="-1"><a class="header-anchor" href="#tree-shaking-zur-reduzierung-der-bundle-gr-e"><span>Tree-shaking zur Reduzierung der Bundle-Größe</span></a></h3><p>Tree-shaking bezieht sich auf eine gängige Praxis beim Bundling von Webanwendungen (<a href="https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking" target="_blank" rel="noopener noreferrer">siehe MSDN docs</a>). Es bedeutet, dass Codepfade und Features, die in deinem Code nicht verwendet werden, aus der endgültigen gebündelten Javascript-Datei(en) entfernt werden, um die Dateigröße zu reduzieren. Siehe unten zu Features, die Needle Engine enthält und wie du sie entfernen kannst:</p><details class="hint-container details"><summary>Wie entferne ich die Rapier Physics Engine? (Reduziert die gesamte Bundle-Größe um ca. 2MB (~600KB bei Gzipping))</summary><ul><li><p><strong>Option 1</strong>: über die needlePlugins-Konfiguration: Setze <code>useRapier</code> in deiner vite.config auf <code>false</code>: <code>needlePlugins(command, needleConfig, { useRapier: false }),</code></p></li><li><p><strong>Option 2</strong>: über die vite.define-Konfiguration: Deklariere das <code>NEEDLE_USE_RAPIER</code>-Define mit <code>false</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">define</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  NEEDLE_USE_RAPIER</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> false</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">},</span></span></code></pre></div></li><li><p><strong>Option 3</strong>: über .env Erstelle eine <code>.env</code>-Datei in deinem Webprojekt und füge <code>VITE_NEEDLE_USE_RAPIER=false</code> hinzu.</p></li><li><p><strong>Option 4</strong>: über die Unity-Komponente Füge die <code>Needle Engine Modules</code>-Komponente zu deiner Szene hinzu und setze <code>Physics Engine</code> auf <code>None</code>. <img src="`+r+`" alt=""></p></li></ul></details><h2 id="erstellen-einer-pwa" tabindex="-1"><a class="header-anchor" href="#erstellen-einer-pwa"><span>Erstellen einer PWA</span></a></h2><p>Wir unterstützen die einfache Erstellung einer Progressive Web App (PWA) direkt aus unserer Vite-Vorlage. PWAs sind Webanwendungen, die wie normale Webseiten oder Websites laden, aber Benutzerfunktionen wie Offline-Arbeit, Push-Benachrichtigungen und Zugriff auf Geräte-Hardware bieten können, die traditionell nur für native mobile Anwendungen verfügbar sind. Standardmäßig verfügen mit Needle erstellte PWAs über Offline-Unterstützung und können optional automatisch aktualisiert werden, wenn du eine neue Version deiner App veröffentlichst.</p><ol><li>Installiere das <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a> in deinem Webprojekt: <code>npm install vite-plugin-pwa --save-dev</code></li><li>Ändere deine <code>vite.config.js</code> wie unten gezeigt. Stelle sicher, dass du dasselbe <code>pwaOptions</code>-Objekt sowohl an <code>needlePlugins</code> als auch an <code>VitePWA</code> übergibst.</li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> VitePWA </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;vite-plugin-pwa&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> default</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> defineConfig</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">async</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ({</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;"> command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> })</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // Create the pwaOptions object.</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // You can edit or enter PWA settings here (e.g. change the PWA name or add icons).</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /** </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">@</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">type</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">import(&quot;vite-plugin-pwa&quot;).VitePWAOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> needlePlugins </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> await</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> import</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;@needle-tools/engine/plugins/vite/index.js&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    return</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        plugins</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> [</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">            // pass the pwaOptions object to the needlePlugins and the VitePWA function</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            needlePlugins</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> needleConfig</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwa</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> pwaOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            VitePWA</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">pwaOptions</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        ]</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // the rest of your vite config...</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">Alle Assets werden standardmäßig gecacht</p><p>Beachte, dass standardmäßig alle Assets in deinem Build-Ordner dem PWA-Precache hinzugefügt werden – für große Anwendungen mit vielen dynamischen Assets ist dies möglicherweise nicht das, was du willst (stell dir vor, die YouTube PWA cached alle Videos, sobald ein Benutzer die App öffnet!). Unter <a href="#more-pwa-options">Weitere PWA-Optionen</a> erfährst du, wie du dieses Verhalten anpassen kannst.</p></div><h3 id="pwas-testen" tabindex="-1"><a class="header-anchor" href="#pwas-testen"><span>PWAs testen</span></a></h3><p>Um deine PWA zu testen, deploye die Seite, zum Beispiel mit der <code>DeployToFTP</code>-Komponente. Öffne dann die deployed Seite in einem Browser und prüfe, ob die PWA-Features wie erwartet funktionieren:</p><ul><li>die App wird als installierbar angezeigt</li><li>die App funktioniert offline</li><li>die App wird von <a href="https://pwabuilder.com/" target="_blank" rel="noopener noreferrer">pwabuilder.com</a> als offline-fähige PWA erkannt</li></ul><p>PWAs verwenden Service Worker, um Ressourcen zu cachen und Offline-Unterstützung bereitzustellen. Service Worker sind während der Entwicklung etwas schwieriger zu verwenden und werden typischerweise nur für Builds aktiviert (z. B. wenn du eine <code>DeployTo...</code>-Komponente verwendest).</p><p>Du kannst die PWA-Unterstützung für die Entwicklung aktivieren, indem du Folgendes zum Options-Objekt in deiner <code>vite.config.js</code> hinzufügst.</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Note: PWAs behave different in dev mode.</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Make sure to verify the behaviour in production builds!</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  devOptions</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    enabled</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> true</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>Bitte beachte, dass PWAs im Entwicklungsmodus keine Offline-Nutzung unterstützen – ein Versuch kann zu unerwartetem Verhalten führen.</p><h3 id="automatische-aktualisierung-laufender-apps" tabindex="-1"><a class="header-anchor" href="#automatische-aktualisierung-laufender-apps"><span>Automatische Aktualisierung laufender Apps</span></a></h3><p>Websites zeigen normalerweise neue oder aktualisierte Inhalte beim Seiten-Refresh an.</p><p>In einigen Situationen möchtest du, dass die Seite automatisch aktualisiert und neu geladen wird, wenn eine neue Version veröffentlicht wurde – wie zum Beispiel in einem Museum, auf einer Messe, auf öffentlichen Displays oder in anderen langlebigen Szenarien.</p><p>Um automatische Updates zu aktivieren, setze die <code>updateInterval</code>-Eigenschaft im pwaOptions-Objekt auf eine Dauer (in Millisekunden), in der die App nach Updates suchen soll. Wenn ein Update erkannt wird, wird die Seite automatisch neu geladen.</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  updateInterval</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 15</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 60</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // 15 minutes, in milliseconds</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">Periodische Neuladungen und Benutzerdaten</p><p>Es wird nicht empfohlen, automatische Neuladungen in Anwendungen zu verwenden, in denen Benutzer mit Formularen oder anderen Daten interagieren, die bei einer Neuladung verloren gehen könnten. Für diese Anwendungen wird empfohlen, einen Neulade-Prompt anzuzeigen. Weitere Informationen zur Implementierung eines Neulade-Prompts anstelle von automatischem Neuladen findest du in der <a href="https://vite-pwa-org.netlify.app/guide/prompt-for-update.html" target="_blank" rel="noopener noreferrer">Vite PWA plugin documentation</a>.</p></div><h3 id="weitere-pwa-optionen" tabindex="-1"><a class="header-anchor" href="#weitere-pwa-optionen"><span>Weitere PWA-Optionen</span></a></h3><p>Da Needle unter der Haube das <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a> verwendet, kannst du alle von diesem bereitgestellten Optionen und Hooks nutzen. Zum Beispiel kannst du ein teilweises Manifest mit einem benutzerdefinierten App-Titel oder einer benutzerdefinierten Themenfarbe bereitstellen:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // manifest options provided here will override the defaults</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  manifest</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    short_name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    theme_color</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;#B2D464&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>Für komplexe Anforderungen wie partielles Caching, benutzerdefinierte Service Worker oder verschiedene Aktualisierungsstrategien kannst du die Option <code>{ pwa: pwaOptions }</code> aus <code>needlePlugins</code> entfernen und die PWA-Funktionalität direkt über das Vite PWA plugin hinzufügen.</p><h2 id="zugriff-auf-needle-engine-und-komponenten-aus-externem-javascript" tabindex="-1"><a class="header-anchor" href="#zugriff-auf-needle-engine-und-komponenten-aus-externem-javascript"><span>Zugriff auf Needle Engine und Komponenten aus externem Javascript</span></a></h2>`,27)),i("p",null,[e[14]||(e[14]=n("Code, den du exponierst, kann nach dem Bundling aus JavaScript aufgerufen werden. Dies ermöglicht den Aufbau von Viewern und anderen Anwendungen, bei denen es eine Trennung zwischen Daten gibt, die zur Bearbeitungszeit bekannt sind, und Daten, die erst zur Laufzeit bekannt sind (z. B. dynamisch geladene Dateien, vom Benutzer generierte Inhalte). Für den Zugriff auf Komponenten aus regulärem Javascript außerhalb der Engine siehe den Abschnitt ")),t(s,{to:"/lang/de/scripting.html#accessing-needle-engine-and-components-from-anywhere"},{default:a(()=>e[13]||(e[13]=[n("Interop mit regulärem Javascript")])),_:1}),e[15]||(e[15]=n("."))]),e[29]||(e[29]=i("h2",{id:"anpassen-des-ladebildschirms",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#anpassen-des-ladebildschirms"},[i("span",null,"Anpassen des Ladebildschirms")])],-1)),i("p",null,[e[17]||(e[17]=n("Siehe den Abschnitt ")),e[18]||(e[18]=i("em",null,"Loading Display",-1)),e[19]||(e[19]=n(" in der ")),t(s,{to:"/lang/de/reference/needle-engine-attributes.html"},{default:a(()=>e[16]||(e[16]=[n("Needle Engine Komponentenreferenz")])),_:1}),e[20]||(e[20]=n("."))]),e[30]||(e[30]=l('<h3 id="eingebaute-stile" tabindex="-1"><a class="header-anchor" href="#eingebaute-stile"><span>Eingebaute Stile</span></a></h3><p>Die Lade-Optik von needle-engine kann einen hellen oder dunklen Skin verwenden. Um die Optik zu ändern, verwende das <code>loading-style</code>-Attribut auf der <code>&lt;needle-engine&gt;</code> Webkomponente. Optionen sind <code>light</code> und <code>dark</code> (Standard):</p><p><code>&lt;needle-engine loading-style=&quot;light&quot;&gt;&lt;/needle-engine&gt;</code></p><h3 id="benutzerdefinierter-lade-stil-pro-feature" tabindex="-1"><a class="header-anchor" href="#benutzerdefinierter-lade-stil-pro-feature"><span>Benutzerdefinierter Lade-Stil — <em>PRO Feature</em></span></a></h3>',4)),i("p",null,[e[22]||(e[22]=n("Bitte siehe den Abschnitt ")),e[23]||(e[23]=i("em",null,"Loading Display",-1)),e[24]||(e[24]=n(" in der ")),t(s,{to:"/lang/de/reference/needle-engine-attributes.html"},{default:a(()=>e[21]||(e[21]=[n("Needle Engine Komponentenreferenz")])),_:1}),e[25]||(e[25]=n("."))]),e[31]||(e[31]=i("p",null,[i("img",{src:d,alt:"custom loading"}),n(" Page automatically translated using AI")],-1))])}const b=p(g,[["render",c]]),B=JSON.parse('{"path":"/lang/de/html.html","title":"Frameworks, Bundler, HTML","lang":"de-DE","frontmatter":{"title":"Frameworks, Bundler, HTML","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/frameworks, bundler, html_de.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine ist als Web Component aufgebaut. Das bedeutet, installiere einfach @needle-tools/engine in deinem Projekt und füge  überall in deinem Webprojekt ein."}]],"description":"---\\nNeedle Engine ist als Web Component aufgebaut. Das bedeutet, installiere einfach @needle-tools/engine in deinem Projekt und füge  überall in deinem Webprojekt ein."},"headers":[{"level":2,"title":"Bundling und Web Frontends","slug":"bundling-und-web-frontends","link":"#bundling-und-web-frontends","children":[{"level":3,"title":"Vite, Vue, React, Svelte, React Three Fiber...","slug":"vite-vue-react-svelte-react-three-fiber...","link":"#vite-vue-react-svelte-react-three-fiber...","children":[]},{"level":3,"title":"Tree-shaking zur Reduzierung der Bundle-Größe","slug":"tree-shaking-zur-reduzierung-der-bundle-gr-e","link":"#tree-shaking-zur-reduzierung-der-bundle-gr-e","children":[]}]},{"level":2,"title":"Erstellen einer PWA","slug":"erstellen-einer-pwa","link":"#erstellen-einer-pwa","children":[{"level":3,"title":"PWAs testen","slug":"pwas-testen","link":"#pwas-testen","children":[]},{"level":3,"title":"Automatische Aktualisierung laufender Apps","slug":"automatische-aktualisierung-laufender-apps","link":"#automatische-aktualisierung-laufender-apps","children":[]},{"level":3,"title":"Weitere PWA-Optionen","slug":"weitere-pwa-optionen","link":"#weitere-pwa-optionen","children":[]}]},{"level":2,"title":"Zugriff auf Needle Engine und Komponenten aus externem Javascript","slug":"zugriff-auf-needle-engine-und-komponenten-aus-externem-javascript","link":"#zugriff-auf-needle-engine-und-komponenten-aus-externem-javascript","children":[]},{"level":2,"title":"Anpassen des Ladebildschirms","slug":"anpassen-des-ladebildschirms","link":"#anpassen-des-ladebildschirms","children":[{"level":3,"title":"Eingebaute Stile","slug":"eingebaute-stile","link":"#eingebaute-stile","children":[]},{"level":3,"title":"Benutzerdefinierter Lade-Stil — PRO Feature","slug":"benutzerdefinierter-lade-stil-pro-feature","link":"#benutzerdefinierter-lade-stil-pro-feature","children":[]}]}],"git":{"updatedTime":1745311490000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"25e22e2b0b9e4fc1e515be2b189c24864e21ac9f","time":1745311490000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add multilanguage support"}]},"filePathRelative":"lang/de/html.md"}');export{b as comp,B as data};
