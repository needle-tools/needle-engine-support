import{_ as p,c as d,e as h,a,d as s,b as t,w as n,r as l,o as r}from"./app-9T6lAodh.js";const o={},g={class:"hint-container details"};function c(C,i){const e=l("RouteLink"),k=l("video-embed");return r(),d("div",null,[i[37]||(i[37]=h('<p>Needle Engine यूनिटी एडिटर के साथ गहरा एकीकरण प्रदान करता है। यह डेवलपर्स और डिजाइनरों दोनों को परिचित वातावरण में एक साथ काम करने और तेज़, प्रदर्शनकारी और हल्के वेब अनुभव प्रदान करने की अनुमति देता है।</p><p>निम्नलिखित गाइड मुख्य रूप से Unity3D पृष्ठभूमि वाले डेवलपर्स के लिए है, लेकिन यह वेब या three.js पृष्ठभूमि वाले डेवलपर्स के लिए भी उपयोगी हो सकती है। यह इस बात पर ध्यान केंद्रित करता है कि Unity में चीजें कैसे की जाती हैं बनाम three.js या Needle Engine में।</p><p>यदि आप Typescript और Javascript के लिए बिल्कुल नए हैं और आप Needle Engine के लिए स्क्रिप्ट लिखने में गहराई से उतरना चाहते हैं तो हम C# और Javascript/Typescript के बीच के अंतर की मूल समझ के लिए <a href="./typescript-essentials">Typescript Essentials Guide</a> को पढ़ने की भी सलाह देते हैं।</p><p>यदि आप कोड-साथ करना चाहते हैं तो आप एक छोटा प्रोजेक्ट बनाने के लिए <a href="https://engine.needle.tools/new" target="_blank" rel="noopener noreferrer">engine.needle.tools/new</a> खोल सकते हैं जिसे आप ब्राउज़र में संपादित कर सकते हैं ⚡</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span>मूल बातें</span></a></h2><p>Needle Engine <a href="https://threejs.org/" target="_blank" rel="noopener noreferrer">three.js</a> के ऊपर चलने वाला एक 3d वेब इंजन है। Three.js वेब के लिए सबसे लोकप्रिय 3D webgl-आधारित रेंडरिंग लाइब्रेरी में से एक है। जब भी हम Needle Engine में किसी <code>gameObject</code> का उल्लेख करते हैं तो हम <em>वास्तव में</em> एक three.js <code>Object3D</code> के बारे में भी बात कर रहे होते हैं, जो three.js में किसी भी ऑब्जेक्ट का मूल प्रकार है। दोनों शब्दों का परस्पर उपयोग किया जा सकता है। कोई भी <code>gameObject</code> एक <code>Object3D</code> <em>है</em>।</p><p>इसका मतलब यह भी है कि - यदि आप पहले से ही three.js से परिचित हैं - तो आपको Needle Engine का उपयोग करने में बिल्कुल भी समस्या नहीं होगी। three.js के साथ आप जो कुछ भी कर सकते हैं वह Needle Engine में भी किया जा सकता है। यदि आप पहले से ही कुछ लाइब्रेरी का उपयोग कर रहे हैं तो आप उन्हें Needle Engine-आधारित वातावरण में भी उपयोग कर पाएंगे।</p>',7)),a("p",null,[i[2]||(i[2]=s("ध्यान दें: ")),i[3]||(i[3]=a("strong",null,[s("Needle Engine का Exporter आपके मौजूदा C# कोड को Web Assembly में संकलित "),a("em",null,"नहीं"),s(" करता है")],-1)),i[4]||(i[4]=s("। जबकि Web Assembly का उपयोग रनटाइम पर बेहतर प्रदर्शन दे सकता है, यह वेब अनुभव बनाने में पुनरावृति गति और लचीलेपन के लिए उच्च लागत पर आता है। हमारे ")),t(e,{to:"/lang/hi/vision.html"},{default:n(()=>i[0]||(i[0]=[s("विजन")])),_:1}),i[5]||(i[5]=s(" और ")),t(e,{to:"/lang/hi/technical-overview.html"},{default:n(()=>i[1]||(i[1]=[s("तकनीकी अवलोकन")])),_:1}),i[6]||(i[6]=s(" के बारे में और पढ़ें।"))]),a("details",g,[i[7]||(i[7]=a("summary",null,"Needle Engine के साथ नया Unity प्रोजेक्ट कैसे बनाएं? (वीडियो)",-1)),t(k,{src:"https://www.youtube.com/watch?v=gZX_sqrne8U",limit_height:""})]),i[38]||(i[38]=h(`<h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>एक कॉम्पोनेन्ट बनाना</span></a></h2><p>Unity में आप <code>MonoBehaviour</code> से व्युत्पन्न करके एक नया कॉम्पोनेन्ट बनाते हैं:</p><div class="language-csharp" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">using</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> UnityEngine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">public</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> :</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MonoBehaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>दूसरी ओर Needle Engine में एक कस्टम कॉम्पोनेन्ट इस प्रकार लिखा जाता है:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>स्क्रिप्ट फ़ील्ड्स</span></a></h2><h3 id="serializable" tabindex="-1"><a class="header-anchor" href="#serializable"><span>serializable</span></a></h3><p>यदि आपने कुछ Needle Engine स्क्रिप्ट देखी हैं, तो आपने देखा होगा कि कुछ वेरिएबल्स को उनकी घोषणा के ऊपर <code>@serializable</code> के साथ एनोटेट किया गया है। यह Typescript में एक Decorator है और इसका उपयोग कोड को संशोधित या एनोटेट करने के लिए किया जा सकता है। Needle Engine में इसका उपयोग उदाहरण के लिए कोर क्रमबद्धता को यह बताने के लिए किया जाता है कि जब वह glTF में संग्रहीत कच्चे कॉम्पोनेन्ट जानकारी से एक कॉम्पोनेन्ट इंस्टेंस में परिवर्तित होता है तो हम अपनी स्क्रिप्ट में किन प्रकारों की उम्मीद करते हैं। निम्नलिखित उदाहरण पर विचार करें:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Object3D </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Behaviour</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myOtherComponent</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Object3D</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    someOtherObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Object3D</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>यह Needle Engine को बताता है कि <code>myOtherComponent</code> को <code>Behaviour</code> प्रकार का होना चाहिए। जब आपका दृश्य लोड होता है तो यह स्वचालित रूप से फ़ील्ड को सही संदर्भ असाइन करेगा। <code>someOtherObject</code> के लिए भी यही सच है जहां हम <code>Object3D</code> संदर्भ में डीसेरियलाइज़ करना चाहते हैं।</p><p>ध्यान दें कि कुछ मामलों में प्रकार को छोड़ा जा सकता है। यह <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">Javascript में सभी प्रिमिटिव प्रकारों</a> के लिए किया जा सकता है। ये <code>boolean</code>, <code>number</code>, <code>bigint</code>, <code>string</code>, <code>null</code> और <code>undefined</code> हैं।</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">()</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // &lt; फ़ील्ड प्रकार प्रिमिटिव होने के कारण यहाँ किसी प्रकार की आवश्यकता नहीं है</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myString</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h3 id="public-vs-private" tabindex="-1"><a class="header-anchor" href="#public-vs-private"><span>public vs private</span></a></h3><p><code>private</code>, <code>public</code> या <code>protected</code> जैसे किसी भी एक्सेस संशोधक के बिना फ़ील्ड्स जावास्क्रिप्ट में डिफ़ॉल्ट रूप से <code>public</code> होंगे</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /// no accessor means it is public:</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // explicitly making it private:</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myPrivateNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    protected</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myProtectedNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>यही विधियों के लिए भी सच है।</p><h2 id="gameobjects" tabindex="-1"><a class="header-anchor" href="#gameobjects"><span>GameObjects और सीन</span></a></h2><p>एक कॉम्पोनेन्ट से वर्तमान सीन तक पहुंचने के लिए आप <code>this.scene</code> का उपयोग करते हैं जो <code>this.context.scene</code> के बराबर है, यह आपको रूट three.js सीन ऑब्जेक्ट देता है।</p><p>एक कॉम्पोनेन्ट से पदानुक्रम को ट्रैवर्स करने के लिए आप किसी ऑब्जेक्ट के बच्चों पर पुनरावृति कर सकते हैं for लूप के साथ:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">let</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">++</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children[i])</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>या आप <code>foreach</code> समकक्ष का उपयोग करके पुनरावृति कर सकते हैं:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> child </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(child)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>आप <code>traverse</code> विधि का उपयोग करके सभी वस्तुओं को पुनरावृति करने के लिए three.js विशिष्ट विधियों का भी उपयोग कर सकते हैं:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">//---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">traverse</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(obj))</span></span></code></pre></div><p>या केवल दृश्यमान वस्तुओं को ट्रैवर्स करने के लिए इसके बजाय <a href="https://threejs.org/docs/#api/en/core/Object3D.traverseVisible" target="_blank" rel="noopener noreferrer"><code>traverseVisible</code></a> का उपयोग करें।</p><p>एक और विकल्प जो बहुत उपयोगी है जब आप केवल रेंडर करने योग्य वस्तुओं को पुनरावृति करना चाहते हैं तो आप सभी रेंडरर कॉम्पोनेन्ट को क्वेरी कर सकते हैं और उन पर इस तरह से पुनरावृति कर सकते हैं:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> renderer </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getComponentsInChildren</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer))</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>कॉम्पोनेन्ट प्राप्त करने के बारे में अधिक जानकारी के लिए अगला अनुभाग देखें।</p><h2 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span>कॉम्पोनेन्ट</span></a></h2>`,29)),a("p",null,[i[9]||(i[9]=s("Needle Engine एक कॉम्पोनेन्ट सिस्टम का भारी उपयोग कर रहा है जो Unity के समान है। इसका मतलब है कि आप सीन में किसी भी ")),i[10]||(i[10]=a("code",null,"Object3D",-1)),i[11]||(i[11]=s(" / ")),i[12]||(i[12]=a("code",null,"GameObject",-1)),i[13]||(i[13]=s(" में कॉम्पोनेन्ट जोड़ या हटा सकते हैं। ")),i[14]||(i[14]=a("code",null,"addNewComponent(<Object3D>, <ComponentType>)",-1)),i[15]||(i[15]=s(" का उपयोग करते समय एक कॉम्पोनेन्ट इंजन के साथ पंजीकृत किया जाएगा। संलग्न कॉम्पोनेन्ट के इवेंट मेथड को तब इंजन द्वारा स्वचालित रूप से बुलाया जाएगा (जैसे ")),i[16]||(i[16]=a("code",null,"update",-1)),i[17]||(i[17]=s(" या ")),i[18]||(i[18]=a("code",null,"onBeforeRender",-1)),i[19]||(i[19]=s(")। इवेंट मेथड की पूरी सूची ")),t(e,{to:"/lang/hi/scripting.html#lifecycle-methods"},{default:n(()=>i[8]||(i[8]=[s("स्क्रिप्टिंग डॉक्यूमेंटेशन")])),_:1}),i[20]||(i[20]=s(" में पाई जा सकती है"))]),i[39]||(i[39]=h('<h4 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span>सीन में कॉम्पोनेन्ट ढूँढना</span></a></h4><p>कॉम्पोनेन्ट प्राप्त करने के लिए आप Unity के समान परिचित विधियों का उपयोग कर सकते हैं। ध्यान दें कि निम्नलिखित एक उदाहरण के रूप में <code>Animator</code> प्रकार का उपयोग करता है, लेकिन आप किसी भी कॉम्पोनेन्ट प्रकार का उपयोग कर सकते हैं जो या तो बिल्ट-इन है या आपके द्वारा बनाया गया है।</p><table><thead><tr><th>विधि का नाम</th><th>विवरण</th></tr></thead><tbody><tr><td><code>this.gameObject.getComponent(Animator)</code></td><td>GameObject/Object3D पर <code>Animator</code> कॉम्पोनेन्ट प्राप्त करें। यदि इसमें Animator कॉम्पोनेन्ट है तो यह <code>Animator</code> इंस्टेंस लौटाएगा या यदि ऑब्जेक्ट में ऐसा कोई कॉम्पोनेन्ट नहीं है तो <code>null</code> लौटाएगा।</td></tr><tr><td><code>this.gameObject.getComponentInChildren(Animator)</code></td><td>GameObject/Object3D पर या उसके किसी बच्चे पर पहला <code>Animator</code> कॉम्पोनेन्ट प्राप्त करें</td></tr><tr><td><code>this.gameObject.getComponentsInParents(Animator)</code></td><td>पैरेंट पदानुक्रम में सभी animator कॉम्पोनेन्ट प्राप्त करें (वर्तमान GameObject/Object3D सहित)</td></tr></tbody></table><p>ये विधियां स्टैटिक GameObject प्रकार पर भी उपलब्ध हैं। उदाहरण के लिए <code>GameObject.getComponent(this.gameObject, Animator)</code> पास किए गए GameObject/Object3D पर <code>Animator</code> कॉम्पोनेन्ट प्राप्त करने के लिए।</p><p>एक या अधिक कॉम्पोनेन्ट के लिए पूरे सीन को खोजने के लिए आप <code>GameObject.findObjectOfType(Animator)</code> या <code>GameObject.findObjectsOfType(Animator)</code> का उपयोग कर सकते हैं।</p><h2 id="unity" tabindex="-1"><a class="header-anchor" href="#unity"><span>नाम बदले गए Unity प्रकार</span></a></h2><p>हमारे इंजन में कुछ Unity-विशिष्ट प्रकारों को अलग-अलग प्रकार के नामों पर मैप किया गया है। निम्नलिखित सूची देखें:</p><table><thead><tr><th>Unity में प्रकार</th><th>Needle Engine में प्रकार</th><th></th></tr></thead><tbody><tr><td><code>UnityEvent</code></td><td><code>EventList</code></td><td>एक UnityEvent को <code>EventList</code> प्रकार के रूप में निर्यात किया जाएगा (<code>UnityEvents</code> को डीसेरियलाइज़ करने के लिए <code>serializable(EventList)</code> का उपयोग करें)</td></tr><tr><td><code>GameObject</code></td><td><code>Object3D</code></td><td></td></tr><tr><td><code>Transform</code></td><td><code>Object3D</code></td><td>three.js और Needle Engine में एक GameObject और एक Transform समान हैं (कोई <code>Transform</code> कॉम्पोनेन्ट नहीं है)। इस नियम का एकमात्र अपवाद <code>RectTransform</code> को संदर्भित करना है जो Needle Engine में भी एक कॉम्पोनेन्ट है।</td></tr><tr><td><code>Color</code></td><td><code>RGBAColor</code></td><td>three.js रंग प्रकार में अल्फा प्रॉपर्टी नहीं होती है। इस कारण से Unity से निर्यात किए गए सभी Color प्रकारों को <code>RGBAColor</code> के रूप में निर्यात किया जाएगा जो एक कस्टम Needle Engine प्रकार है</td></tr></tbody></table><h2 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>Transform</span></a></h2><p>Transform डेटा को सीधे <code>GameObject</code> / <code>Object3D</code> पर एक्सेस किया जा सकता है। Unity के विपरीत, ऐसा कोई अतिरिक्त transform कॉम्पोनेन्ट नहीं है जो इस डेटा को धारण करता हो।</p><ul><li><code>this.gameObject.position</code> स्थानीय स्पेस में Vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.position" target="_blank" rel="noopener noreferrer">position</a> है</li><li><code>this.gameObject.worldPosition</code> वर्ल्ड स्पेस में Vector3 position है</li><li><code>this.gameObject.rotation</code> स्थानीय स्पेस में <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.rotation" target="_blank" rel="noopener noreferrer">euler rotation</a> है</li><li><code>this.gameObject.worldRotation</code> वर्ल्ड स्पेस में euler कोणों में euler rotation है</li><li><code>this.gameObject.quaternion</code> - स्थानीय स्पेस में <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.quaternion" target="_blank" rel="noopener noreferrer">quaternion rotation</a> है</li><li><code>this.gameObject.worldQuaternion</code> वर्ल्ड स्पेस में quaternion rotation है</li><li><code>this.gameObject.scale</code> - स्थानीय स्पेस में Vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.scale" target="_blank" rel="noopener noreferrer">scale</a> है</li><li><code>this.gameObject.worldScale</code> वर्ल्ड स्पेस में Vector3 scale है</li></ul><p>यहां ध्यान रखने योग्य मुख्य अंतर यह है कि three.js में <code>position</code> डिफ़ॉल्ट रूप से एक स्थानीय स्पेस स्थिति है, जबकि Unity में <code>position</code> वर्ल्ड स्पेस होगी और स्थानीय स्पेस स्थिति का जानबूझकर उपयोग करने के लिए <code>localPosition</code> का उपयोग किया जाएगा।</p><p>यदि आप Needle Engine में वर्ल्ड निर्देशांक तक पहुंचना चाहते हैं तो हमारे पास यूटिलिटी विधियां हैं जिनका उपयोग आप अपनी वस्तुओं के साथ कर सकते हैं। वर्ल्ड स्थिति की गणना करने के लिए <code>getWorldPosition(yourObject)</code> कॉल करें। रोटेशन/क्वाटरनियन और स्केल के लिए समान विधियां मौजूद हैं। उन विधियों तक पहुंचने के लिए उन्हें Needle Engine से आयात करें जैसे <code>import { getWorldPosition } from &quot;@needle.tools/engine&quot;</code></p>',13)),a("p",null,[i[22]||(i[22]=s("ध्यान दें कि ")),i[23]||(i[23]=a("code",null,"getWorldPosition",-1)),i[24]||(i[24]=s(", ")),i[25]||(i[25]=a("code",null,"getWorldRotation",-1)),i[26]||(i[26]=s(", ")),i[27]||(i[27]=a("code",null,"getWorldScale",-1)),i[28]||(i[28]=s(" जैसी ये यूटिलिटी विधियां आंतरिक रूप से Vector3 इंस्टेंस का बफ़र रखती हैं और इनका उपयोग केवल स्थानीय रूप से किया जाना है। इसका मतलब है कि आपको उन्हें अपने कॉम्पोनेन्ट में कैश नहीं करना चाहिए, अन्यथा आपका कैश किया गया मान अंततः ओवरराइड हो जाएगा। लेकिन एक ही इंस्टेंस का दोबारा उपयोग करने की चिंता किए बिना गणना करने के लिए अपने फ़ंक्शन में ")),i[29]||(i[29]=a("code",null,"getWorldPosition",-1)),i[30]||(i[30]=s(" को कई बार कॉल करना सुरक्षित है। यदि आप निश्चित नहीं हैं कि इसका क्या मतलब है तो आपको ")),t(e,{to:"/lang/hi/getting-started/typescript-essentials.html#primitive-types"},{default:n(()=>i[21]||(i[21]=[s("Typescript Essentials Guide")])),_:1}),i[31]||(i[31]=s(" में ")),i[32]||(i[32]=a("strong",null,"प्रिमिटिव प्रकार",-1)),i[33]||(i[33]=s(" अनुभाग देखना चाहिए।"))]),i[40]||(i[40]=h(`<h2 id="time" tabindex="-1"><a class="header-anchor" href="#time"><span>Time</span></a></h2><p>समय डेटा तक पहुंचने के लिए <code>this.context.time</code> का उपयोग करें:</p><ul><li><code>this.context.time.time</code> एप्लिकेशन के चलने के बाद से का समय है</li><li><code>this.context.time.deltaTime</code> अंतिम फ्रेम के बाद से बीता हुआ समय है</li><li><code>this.context.time.frameCount</code> एप्लिकेशन के शुरू होने के बाद से गुजरे हुए फ्रेम की संख्या है</li><li><code>this.context.time.realtimeSinceStartup</code> एप्लिकेशन के शुरू होने के बाद से का अस्केल किया गया समय है</li></ul><p>जानबूझकर समय को धीमा करने के लिए <code>this.context.time.timeScale</code> का उपयोग करना भी संभव है, जैसे स्लो मोशन प्रभाव के लिए।</p><h2 id="raycasting" tabindex="-1"><a class="header-anchor" href="#raycasting"><span>Raycasting</span></a></h2><p>Raycast करने और इंटरसेक्शन की सूची प्राप्त करने के लिए <code>this.context.physics.raycast()</code> का उपयोग करें। यदि आप कोई विकल्प पास नहीं करते हैं तो raycast स्क्रीनस्पेस में माउस स्थिति (या पहली स्पर्श स्थिति) से ​​वर्तमान में सक्रिय <code>mainCamera</code> का उपयोग करके किया जाता है। आप एक <code>RaycastOptions</code> ऑब्जेक्ट भी पास कर सकते हैं जिसमें विभिन्न सेटिंग्स होती हैं जैसे <code>maxDistance</code>, उपयोग करने के लिए कैमरा या जिस लेयर के विरुद्ध परीक्षण किया जाना है।</p><p><a href="https://threejs.org/docs/#api/en/math/Ray" target="_blank" rel="noopener noreferrer">three.js ray</a> का उपयोग करके raycast करने के लिए <code>this.context.physics.raycastFromRay(your_ray)</code> का उपयोग करें</p><p>ध्यान दें कि उपरोक्त कॉल डिफ़ॉल्ट रूप से दृश्यमान दृश्य ऑब्जेक्ट के विरुद्ध raycast कर रहे हैं। यह Unity से अलग है जहाँ आपको ऑब्जेक्ट को हिट करने के लिए हमेशा कोलाइडर की आवश्यकता होती है। डिफ़ॉल्ट three.js समाधान के दोनों फायदे और नुकसान हैं, जिसमें एक बड़ा नुकसान यह है कि यह आपके दृश्य ज्यामिति के आधार पर काफी धीमी गति से प्रदर्शन कर सकता है। यह विशेष रूप से स्किन्ड जाल के विरुद्ध raycasting करते समय धीमा हो सकता है। इसलिए आमतौर पर Unity में SkinnedMeshRenderers वाले ऑब्जेक्ट को <code>Ignore Raycast</code> लेयर पर सेट करने की सलाह दी जाती है जिसे Needle Engine द्वारा भी डिफ़ॉल्ट रूप से अनदेखा किया जाएगा।</p><p>एक और विकल्प फिजिक्स रेकास्ट विधियों का उपयोग करना है जो केवल दृश्य में कोलाइडर के साथ हिट लौटाएगा।</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">physics</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">engine</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">raycast</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>यहाँ फिजिक्स रेकास्ट के लिए एक संपादन योग्य <a href="https://stackblitz.com/edit/needle-engine-physics-raycast-example?file=src%2Fmain.ts,package.json,.gitignore" target="_blank" rel="noopener noreferrer">उदाहरण</a> है</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>Input</span></a></h2><p>इनपुट स्थिति को पोल ​​करने के लिए <code>this.context.input</code> का उपयोग करें:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getPointerDown</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">            console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;POINTER DOWN&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>आप <code>InputEvents</code> एनम में इवेंट्स की सदस्यता भी ले सकते हैं:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> InputEvents</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> NEPointerEvent </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onEnable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onDisable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // यह अनुशंसा की जाती है कि आपका कॉम्पोनेन्ट निष्क्रिय होने पर इवेंट से सदस्यता समाप्त कर लें</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">removeEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    inputPointerDown</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> (</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">evt</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> NEPointerEvent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(evt)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>यदि आप स्वयं इनपुट संभालना चाहते हैं तो आप <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener noreferrer">ब्राउज़र द्वारा प्रदान किए जाने वाले सभी इवेंट्स</a> (वहाँ बहुत सारे हैं) की सदस्यता भी ले सकते हैं। उदाहरण के लिए ब्राउज़र के क्लिक इवेंट की सदस्यता लेने के लिए आप लिख सकते हैं:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">window</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ()</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;MOUSE CLICK&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>ध्यान दें कि इस मामले में आपको सभी मामलों को स्वयं संभालना होगा। उदाहरण के लिए यदि आपका उपयोगकर्ता डेस्कटॉप, मोबाइल या VR डिवाइस पर आपकी वेबसाइट पर आ रहा है तो आपको अलग-अलग इवेंट्स का उपयोग करने की आवश्यकता हो सकती है। इन मामलों को Needle Engine इनपुट इवेंट्स द्वारा स्वचालित रूप से संभाला जाता है (उदाहरण के लिए <code>PointerDown</code> माउस डाउन, टच डाउन और VR के मामले में कंट्रोलर बटन डाउन के लिए उठाया जाता है)।</p><h2 id="inputsystem-callbacks" tabindex="-1"><a class="header-anchor" href="#inputsystem-callbacks"><span>InputSystem Callbacks</span></a></h2><p>Unity के समान (Unity में <a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.IPointerClickHandler.html" target="_blank" rel="noopener noreferrer">IPointerClickHandler</a> देखें) आप कॉम्पोनेन्ट पर इनपुट इवेंट प्राप्त करने के लिए भी पंजीकरण कर सकते हैं।</p><p>इसे काम करने के लिए सुनिश्चित करें कि आपकी वस्तु में पैरेंट पदानुक्रम में <code>ObjectRaycaster</code> या <code>GraphicRaycaster</code> कॉम्पोनेन्ट है।</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> PointerEventData </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> ReceiveClickEvent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> implements</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onPointerClick</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> PointerEventData</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> args)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>नोट: <code>IPointerEventHandler</code> ऑब्जेक्ट को सभी संभावित पॉइंटर इवेंट्स की सदस्यता देता है। उनके हैंडलर हैं:</p><ul><li><code>onPointerDown</code></li><li><code>onPointerUp</code></li><li><code>onPointerEnter</code></li><li><code>onPointerMove</code></li><li><code>onPointerExit</code></li><li><code>onPointerClick</code></li></ul><p>सभी में इवेंट का वर्णन करने वाला एक <code>PointerEventData</code> आर्गुमेंट होता है।</p><h2 id="debug.log" tabindex="-1"><a class="header-anchor" href="#debug.log"><span>Debug.Log</span></a></h2><p>जावास्क्रिप्ट में <code>Debug.Log()</code> के बराबर <code>console.log()</code> है। आप <code>console.warn()</code> या <code>console.error()</code> का भी उपयोग कर सकते हैं।</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 42</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello web&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// आप जितने चाहें उतने आर्गुमेंट पास कर सकते हैं जैसे:</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">findObjectOfType</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><h2 id="gizmos" tabindex="-1"><a class="header-anchor" href="#gizmos"><span>Gizmos</span></a></h2><p>Unity में आपको आम तौर पर Gizmos जैसे <code>OnDrawGizmos</code> या <code>OnDrawGizmosSelected</code> खींचने के लिए विशेष विधियों का उपयोग करना पड़ता है। दूसरी ओर Needle Engine में ऐसी विधियां मौजूद नहीं हैं और आप अपनी स्क्रिप्ट में कहीं से भी gizmos खींचने के लिए स्वतंत्र हैं। ध्यान दें कि फिर उन्हें e.g. आपके परिनियोजित वेब एप्लिकेशन में <em>नहीं</em> खींचने की जिम्मेदारी भी आपकी है (आप उन्हें \`if(isDevEnvironment)) के द्वारा फ़िल्टर कर सकते हैं)।</p><p>यहाँ एक सेकंड के लिए लाल वायर स्फेयर खींचने का एक उदाहरण दिया गया है, उदाहरण के लिए वर्ल्ड स्पेस में एक बिंदु का विज़ुअलाइज़ेशन</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Vector3 </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> point</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> Vector3</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Gizmos </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Gizmos</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">DrawWireSphere</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(hit</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">point</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.05</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0xff0000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>यहाँ कुछ उपलब्ध gizmo विधियाँ दी गई हैं:</p><table><thead><tr><th>विधि का नाम</th><th></th></tr></thead><tbody><tr><td><code>Gizmos.DrawArrow</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox3</code></td><td></td></tr><tr><td><code>Gizmos.DrawDirection</code></td><td></td></tr><tr><td><code>Gizmos.DrawLine</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawSphere</code></td><td></td></tr><tr><td><code>Gizmos.DrawWireSphere</code></td><td></td></tr></tbody></table><h2 id="-5" tabindex="-1"><a class="header-anchor" href="#-5"><span>उपयोगी यूटिलिटी विधियाँ</span></a></h2><p><code>@needle-tools/engine</code> से आयात करें, उदाहरण के लिए <code>import { getParam } from &quot;@needle-tools/engine&quot;</code></p><table><thead><tr><th>विधि का नाम</th><th>विवरण</th></tr></thead><tbody><tr><td><code>getParam()</code></td><td>जाँचता है कि url पैरामीटर मौजूद है या नहीं। यदि यह मौजूद है लेकिन इसका कोई मान नहीं है (जैसे <code>?help</code>), तो true लौटाता है, यदि यह url में नहीं पाया जाता है या 0 पर सेट है (जैसे <code>?help=0</code>), तो false लौटाता है, अन्यथा यह मान लौटाता है (जैसे <code>?message=test</code>)</td></tr><tr><td><code>isMobileDevice()</code></td><td>यदि ऐप को मोबाइल डिवाइस से एक्सेस किया जा रहा है तो true लौटाता है</td></tr><tr><td><code>isDevEnvironment()</code></td><td>यदि वर्तमान ऐप स्थानीय सर्वर पर चल रहा है तो true लौटाता है</td></tr><tr><td><code>isMozillaXR()</code></td><td></td></tr><tr><td><code>isiOS</code></td><td></td></tr><tr><td><code>isSafari</code></td><td></td></tr></tbody></table><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> isMobileDevice </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">( </span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">isMobileDevice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">() )</span></span></code></pre></div><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> getParam </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// true लौटाता है</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myFlag </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> getParam</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;some_flag&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(myFlag)</span></span></code></pre></div><h2 id="-6" tabindex="-1"><a class="header-anchor" href="#-6"><span>वेब प्रोजेक्ट</span></a></h2><p>C# में आप आमतौर पर एक समाधान के साथ काम करते हैं जिसमें एक या कई प्रोजेक्ट होते हैं। Unity में यह समाधान आपके लिए Unity द्वारा प्रबंधित किया जाता है और जब आप C# स्क्रिप्ट खोलते हैं तो यह प्रोजेक्ट खोलता है और आपको फ़ाइल दिखाता है। आप आमतौर पर Unity के बिल्ट-इन पैकेज मैनेजर का उपयोग करके पैकेज इंस्टॉल करते हैं ताकि Unity या अन्य डेवलपर्स (या तो आपकी टीम में या उदाहरण के लिए Unity के AssetStore के माध्यम से) द्वारा प्रदान की जाने वाली सुविधाओं को जोड़ा जा सके। Unity अपने PackageManager के साथ पैकेज जोड़ना और प्रबंधित करना आसान बनाने का शानदार काम करता है और आपको <code>manifest.json</code> जैसी फ़ाइल को मैन्युअल रूप से संपादित करने (यह वह है जिसका उपयोग Unity यह ट्रैक करने के लिए करता है कि कौन से पैकेज स्थापित हैं) या पैकेज स्थापित करने के लिए कमांड लाइन से एक कमांड चलाने की आवश्यकता कभी नहीं पड़ी होगी।</p><p>वेब वातावरण में आप अपने लिए निर्भरताओं / पैकेजों को प्रबंधित करने के लिए <code>npm</code> - Node Package Manager - का उपयोग करते हैं। यह मूल रूप से वही करता है जो Unity का PackageManager करता है - यह <em>कुछ</em> सर्वर से पैकेज स्थापित (डाउनलोड) करता है (आप आमतौर पर उस संदर्भ में इसे <em>रजिस्ट्री</em> कहते हैं) और उन्हें <code>node_modules</code> नामक फ़ोल्डर के अंदर रखता है।</p><p>वेब प्रोजेक्ट के साथ काम करते समय आपकी अधिकांश निर्भरताएं <a href="https://npmjs.com/" target="_blank" rel="noopener noreferrer">npmjs.com</a> से स्थापित की जाती हैं। यह वेब प्रोजेक्ट के लिए सबसे लोकप्रिय पैकेज रजिस्ट्री है।</p><p>यहां एक उदाहरण दिया गया है कि package.json कैसा दिख सकता है:</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">name</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@optional_org/package_name&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">version</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;1.0.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">scripts</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;vite --host&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  },</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">dependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.9-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	},</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">devDependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@types/three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;0.146.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@vitejs/plugin-basic-ssl</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^1.0.1&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">typescript</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^5.0.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^4.3.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite-plugin-compression</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^0.5.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	}</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>हमारा डिफ़ॉल्ट टेम्पलेट Vite को इसके बंडलर के रूप में उपयोग करता है और कोई फ्रंटएंड फ्रेमवर्क पूर्व-स्थापित नहीं है। Needle Engine इस बारे में किसी भी ढांचे का विरोध नहीं करता है, इसलिए आप अपनी पसंद के किसी भी ढांचे के साथ काम करने के लिए स्वतंत्र हैं। हमारे पास Vue.js, Svelte, Next.js, React या React Three Fiber जैसे लोकप्रिय ढांचों के लिए नमूने हैं।</p><h2 id="-7" tabindex="-1"><a class="header-anchor" href="#-7"><span>पैकेज और निर्भरताएं स्थापित करना</span></a></h2><p>npm से एक निर्भरता स्थापित करने के लिए आप कमांडलाइन (या टर्मिनल) में अपना वेब प्रोजेक्ट खोल सकते हैं और <code>npm i &lt;the/package_name&gt;</code> (जो <code>npm install</code> का संक्षिप्त रूप है) चला सकते हैं उदाहरण के लिए <a href="https://www.npmjs.com/package/@needle-tools/engine" target="_blank" rel="noopener noreferrer">Needle Engine</a> स्थापित करने के लिए <code>npm i @needle-tools/engine</code> चलाएँ। यह तब आपके <code>package.json</code> में <code>dependencies</code> ऐरे में पैकेज जोड़ देगा। केवल devDependency के रूप में एक पैकेज स्थापित करने के लिए आप <code>npm i --save-dev &lt;package_name&gt;</code> चला सकते हैं। नीचे dependencies और devDependencies के बीच अंतर के बारे में अधिक।</p><h3 id="dependencies-devdependencies" tabindex="-1"><a class="header-anchor" href="#dependencies-devdependencies"><span>&#39;dependencies&#39; और &#39;devDependencies&#39; में क्या अंतर है?</span></a></h3><p>आपने देखा होगा कि <em>डिपेंडेंसी</em> - <code>dependencies</code> और <code>devDependencies</code> वाले दो एंट्री हैं।</p><p><code>dependencies</code> <strong>हमेशा इंस्टॉल</strong> (या बंडल) की जाती हैं जब या तो आपका वेब प्रोजेक्ट इंस्टॉल होता है या उन मामलों में जहां आप एक लाइब्रेरी विकसित करते हैं और आपका पैकेज किसी अन्य प्रोजेक्ट की निर्भरता के रूप में इंस्टॉल होता है।</p><p><code>devDependencies</code> प्रोजेक्ट विकसित करते समय <strong>ही</strong> इंस्टॉल की जाती हैं (जिसका अर्थ है कि जब आप सीधे विशिष्ट निर्देशिका में <code>install</code> चलाते हैं) और वे अन्यथा आपके प्रोजेक्ट में <strong>शामिल नहीं</strong> होती हैं।</p><h3 id="-8" tabindex="-1"><a class="header-anchor" href="#-8"><span>मैं दूसरा पैकेज या निर्भरता कैसे स्थापित करूं और इसका उपयोग कैसे करूं?</span></a></h3><p>[स्थापित करना](#स्थापित करना) अनुभाग ने हमें सिखाया कि आप अपनी प्रोजेक्ट निर्देशिका में <code>npm i &lt;package_name&gt;</code> चलाकर निर्भरताएं स्थापित कर सकते हैं जहाँ <code>package_name</code> <a href="https://npmjs.org" target="_blank" rel="noopener noreferrer">npm.js</a> पर पाए जाने वाले कोई भी पैकेज हो सकता है।</p><p>मान लीजिए कि आप अपने प्रोजेक्ट में एक ट्वीनिंग लाइब्रेरी जोड़ना चाहते हैं। हम इस उदाहरण के लिए <a href="https://www.npmjs.com/package/@tweenjs/tween.js" target="_blank" rel="noopener noreferrer"><code>@tweenjs/tween.js</code></a> का उपयोग करेंगे। यदि आप आगे बढ़ना चाहते हैं और केवल परिणाम देखना चाहते हैं तो <a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">यहाँ</a> अंतिम प्रोजेक्ट है।</p><p>पहले टर्मिनल में <code>npm install @tweenjs/tween.js</code> चलाएँ और इंस्टॉलेशन पूरा होने तक प्रतीक्षा करें। यह हमारे package.json में एक नई एंट्री जोड़ देगा:</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;dependencies&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">: </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.11-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@tweenjs/tween.js</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^20.0.3&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>फिर अपनी स्क्रिप्ट फ़ाइलों में से एक खोलें जिसमें आप ट्वीनिंग का उपयोग करना चाहते हैं और फ़ाइल के शीर्ष पर आयात करें:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>ध्यान दें कि हम यहाँ <code>* as TWEEN</code> लिखकर लाइब्रेरी में सभी प्रकारों को आयात कर रहे हैं। हम विशिष्ट प्रकारों को भी आयात कर सकते हैं जैसे <code>import { Tween } from @tweenjs/tween.js</code>।</p><p>अब हम अपनी स्क्रिप्ट में इसका उपयोग कर सकते हैं। यह हमेशा सलाह दी जाती है कि आप जिस लाइब्रेरी का उपयोग करना चाहते हैं उसके दस्तावेज़ देखें। tween.js के मामले में वे एक <a href="https://github.com/tweenjs/tween.js/blob/HEAD/docs/user_guide.md" target="_blank" rel="noopener noreferrer">उपयोगकर्ता गाइड</a> प्रदान करते हैं जिसका हम पालन कर सकते हैं। आमतौर पर npm पर पैकेज के Readme पृष्ठ में पैकेज को कैसे स्थापित और उपयोग किया जाए इसकी जानकारी होती है।</p><p>एक क्यूब को घुमाने के लिए हम <code>TweenRotation</code> नामक एक नया कॉम्पोनेन्ट प्रकार बनाते हैं, फिर हम ऑब्जेक्ट रोटेशन के लिए अपना ट्विन इंस्टेंस बनाते हैं, यह कितनी बार दोहराना चाहिए, किस ईजिंग का उपयोग करना चाहिए, जो ट्विन हम प्रदर्शन करना चाहते हैं और फिर हम इसे शुरू करते हैं। फिर हमें ट्विन एनीमेशन को अपडेट करने के लिए हर फ्रेम में केवल <code>update</code> कॉल करना होगा। अंतिम स्क्रिप्ट इस तरह दिखती है:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TweenRotation</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // हमारे ट्वीनर का इंस्टेंस सेव करें</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> _tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&lt;</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">any</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> rotation </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">rotation</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // ट्विन इंस्टेंस बनाएं</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(rotation)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // इसे हमेशा के लिए दोहराने के लिए सेट करें</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">repeat</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">Infinity</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // उपयोग करने के लिए ईजिंग सेट करें</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">easing</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Easing</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Quintic</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">InOut)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // ट्विन करने के लिए मान सेट करें</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">to</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> y</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Math</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">PI</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.5</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> },</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // इसे शुरू करें</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">start</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // हर फ्रेम में ट्वीनिंग अपडेट करें</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // &#39;_&#39;tween बनाया गया है या नहीं इसकी जाँच करने के लिए &#39;?&#39; एक संक्षिप्त रूप है</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">update</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>अब हमें उन्हें हमेशा के लिए घुमाने के लिए अपने सीन में किसी भी वस्तु में जोड़ना होगा। आप <a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">यहाँ</a> अंतिम स्क्रिप्ट को क्रियान्वित होते हुए देख सकते हैं।</p><h1 id="-9" tabindex="-1"><a class="header-anchor" href="#-9"><span>और जानें</span></a></h1>`,66)),a("ul",null,[i[36]||(i[36]=a("li",null,[a("a",{href:"../scripting"},"Needle Engine में स्क्रिप्टिंग")],-1)),a("li",null,[t(e,{to:"/lang/hi/getting-started/typescript-essentials.html"},{default:n(()=>i[34]||(i[34]=[s("Typescript Essentials")])),_:1})]),a("li",null,[t(e,{to:"/lang/hi/component-reference.html"},{default:n(()=>i[35]||(i[35]=[s("कॉम्पोनेन्ट संदर्भ")])),_:1})])]),i[41]||(i[41]=a("hr",null,null,-1)),i[42]||(i[42]=a("p",null,"यह पेज AI का उपयोग करके स्वचालित रूप से अनुवादित किया गया है",-1))])}const F=p(o,[["render",c]]),E=JSON.parse(`{"path":"/lang/hi/getting-started/for-unity-developers.html","title":"Unity डेवलपर्स के लिए स्क्रिप्टिंग परिचय","lang":"hi-IN","frontmatter":{"title":"Unity डेवलपर्स के लिए स्क्रिप्टिंग परिचय","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/unity_hi.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine यूनिटी एडिटर के साथ गहरा एकीकरण प्रदान करता है। यह डेवलपर्स और डिजाइनरों दोनों को परिचित वातावरण में एक साथ काम करने और तेज़, प्रदर्शनकारी और हल्के वेब अनुभव प्रदान करने की अनुमति देता है।\\nनिम्नलिखित गाइड मुख्य रूप से Unity3D पृष्ठभूमि वाले डेवलपर्स के लिए है, लेकिन यह वेब या three.js पृष्ठभूमि वाले डेवलपर्स के लिए भी उपयोगी हो सकती है। यह इस बात पर ध्यान केंद्रित करता है कि Unity में चीजें कैसे की जाती हैं बनाम three.js या Needle Engine में।\\nयदि आप Typescript और Javascript के लिए बिल्कुल नए हैं और आप Needle Engine के लिए स्क्रिप्ट लिखने में गहराई से उतरना चाहते हैं तो हम Cऔर Javascript/Typescript के बीच के अंतर की मूल समझ के लिए Typescript Essentials Guide को पढ़ने की भी सलाह देते हैं।\\nयदि आप कोड-साथ करना चाहते हैं तो आप एक छोटा प्रोजेक्ट बनाने के लिए engine.needle.tools/new खोल सकते हैं जिसे आप ब्राउज़र में संपादित कर सकते हैं ⚡\\nNeedle Engine three.js के ऊपर चलने वाला एक 3d वेब इंजन है। Three.js वेब के लिए सबसे लोकप्रिय 3D webgl-आधारित रेंडरिंग लाइब्रेरी में से एक है। जब भी हम Needle Engine में किसी gameObject का उल्लेख करते हैं तो हम वास्तव में एक three.js Object3D के बारे में भी बात कर रहे होते हैं, जो three.js में किसी भी ऑब्जेक्ट का मूल प्रकार है। दोनों शब्दों का परस्पर उपयोग किया जा सकता है। कोई भी gameObject एक Object3D है।\\nइसका मतलब यह भी है कि"}]],"description":"---\\nNeedle Engine यूनिटी एडिटर के साथ गहरा एकीकरण प्रदान करता है। यह डेवलपर्स और डिजाइनरों दोनों को परिचित वातावरण में एक साथ काम करने और तेज़, प्रदर्शनकारी और हल्के वेब अनुभव प्रदान करने की अनुमति देता है।\\nनिम्नलिखित गाइड मुख्य रूप से Unity3D पृष्ठभूमि वाले डेवलपर्स के लिए है, लेकिन यह वेब या three.js पृष्ठभूमि वाले डेवलपर्स के लिए भी उपयोगी हो सकती है। यह इस बात पर ध्यान केंद्रित करता है कि Unity में चीजें कैसे की जाती हैं बनाम three.js या Needle Engine में।\\nयदि आप Typescript और Javascript के लिए बिल्कुल नए हैं और आप Needle Engine के लिए स्क्रिप्ट लिखने में गहराई से उतरना चाहते हैं तो हम Cऔर Javascript/Typescript के बीच के अंतर की मूल समझ के लिए Typescript Essentials Guide को पढ़ने की भी सलाह देते हैं।\\nयदि आप कोड-साथ करना चाहते हैं तो आप एक छोटा प्रोजेक्ट बनाने के लिए engine.needle.tools/new खोल सकते हैं जिसे आप ब्राउज़र में संपादित कर सकते हैं ⚡\\nNeedle Engine three.js के ऊपर चलने वाला एक 3d वेब इंजन है। Three.js वेब के लिए सबसे लोकप्रिय 3D webgl-आधारित रेंडरिंग लाइब्रेरी में से एक है। जब भी हम Needle Engine में किसी gameObject का उल्लेख करते हैं तो हम वास्तव में एक three.js Object3D के बारे में भी बात कर रहे होते हैं, जो three.js में किसी भी ऑब्जेक्ट का मूल प्रकार है। दोनों शब्दों का परस्पर उपयोग किया जा सकता है। कोई भी gameObject एक Object3D है।\\nइसका मतलब यह भी है कि"},"headers":[{"level":2,"title":"मूल बातें","slug":"","link":"#","children":[]},{"level":2,"title":"एक कॉम्पोनेन्ट बनाना","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"स्क्रिप्ट फ़ील्ड्स","slug":"-2","link":"#-2","children":[{"level":3,"title":"serializable","slug":"serializable","link":"#serializable","children":[]},{"level":3,"title":"public vs private","slug":"public-vs-private","link":"#public-vs-private","children":[]}]},{"level":2,"title":"GameObjects और सीन","slug":"gameobjects","link":"#gameobjects","children":[]},{"level":2,"title":"कॉम्पोनेन्ट","slug":"-3","link":"#-3","children":[]},{"level":2,"title":"नाम बदले गए Unity प्रकार","slug":"unity","link":"#unity","children":[]},{"level":2,"title":"Transform","slug":"transform","link":"#transform","children":[]},{"level":2,"title":"Time","slug":"time","link":"#time","children":[]},{"level":2,"title":"Raycasting","slug":"raycasting","link":"#raycasting","children":[]},{"level":2,"title":"Input","slug":"input","link":"#input","children":[]},{"level":2,"title":"InputSystem Callbacks","slug":"inputsystem-callbacks","link":"#inputsystem-callbacks","children":[]},{"level":2,"title":"Debug.Log","slug":"debug.log","link":"#debug.log","children":[]},{"level":2,"title":"Gizmos","slug":"gizmos","link":"#gizmos","children":[]},{"level":2,"title":"उपयोगी यूटिलिटी विधियाँ","slug":"-5","link":"#-5","children":[]},{"level":2,"title":"वेब प्रोजेक्ट","slug":"-6","link":"#-6","children":[]},{"level":2,"title":"पैकेज और निर्भरताएं स्थापित करना","slug":"-7","link":"#-7","children":[{"level":3,"title":"'dependencies' और 'devDependencies' में क्या अंतर है?","slug":"dependencies-devdependencies","link":"#dependencies-devdependencies","children":[]},{"level":3,"title":"मैं दूसरा पैकेज या निर्भरता कैसे स्थापित करूं और इसका उपयोग कैसे करूं?","slug":"-8","link":"#-8","children":[]}]}],"git":{"updatedTime":1745319699000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"833ce0af31c32254139592f63afbfed4fac50b2a","time":1745319699000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Language: add FR and HI"}]},"filePathRelative":"lang/hi/getting-started/for-unity-developers.md"}`);export{F as comp,E as data};
