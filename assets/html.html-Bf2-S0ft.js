import{_ as p}from"./unity-needle-engine-modules-physics-De-OMij1.js";import{_ as h}from"./custom-loading-style-s1K1my2z.js";import{_ as k,c as r,e as l,a as s,d as e,b as n,w as t,r as d,o}from"./app-9T6lAodh.js";const g={},c={class:"hint-container tip"};function C(y,i){const a=d("RouteLink");return o(),r("div",null,[i[25]||(i[25]=l('<h2 id="web" tabindex="-1"><a class="header-anchor" href="#web"><span>打包和 Web 前端</span></a></h2><p>Needle Engine 是作为 Web Component 构建的。 这意味着只需在你的项目中安装 <code>@needle-tools/engine</code>，然后在你的 Web 项目中的任何位置包含 <code>&lt;needle-engine src=&quot;path/to/your.glb&quot;&gt;</code> 即可。</p><ul><li>使用 npm 安装： <code>npm i @needle-tools/engine</code></li></ul><p>使用我们基于默认 Vite 的项目模板，Needle Engine 在部署时会被打包成一个 Web 应用。这确保了更小的文件、Tree-shaking（类似于 Unity 中的代码剥离）并优化了加载时间。与其下载大量小型脚本和组件，不如只下载包含所需最少代码的一两个文件。</p><p>Vite（我们的默认打包器）很好地解释了为什么 Web 应用应该打包：<a href="https://vitejs.dev/guide/why.html" target="_blank" rel="noopener noreferrer">Why Bundle for Production</a></p><h3 id="vite-vue-react-svelte-react-three-fiber..." tabindex="-1"><a class="header-anchor" href="#vite-vue-react-svelte-react-three-fiber..."><span>Vite, Vue, React, Svelte, React Three Fiber...</span></a></h3><p>Needle Engine 对框架的选择持开放态度。我们的默认模板使用流行的 <a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">vite</a> 作为打包器。在此基础上，你可以添加 vue、svelte、nuxt、react、react-three-fiber 或其他框架，我们提供了许多示例。你还可以集成其他打包器，或者完全不使用——只使用纯粹的 HTML 和 Javascript。</p><p>以下是一些可能的、我们用于 Needle Engine 的技术栈示例：</p>',8)),s("ul",null,[i[4]||(i[4]=l('<li><p><strong>Vite + HTML</strong> — 这是我们的默认模板所使用的！</p></li><li><p><strong>Vite + Vue</strong> — 这是 <a href="https://needle.tools" target="_blank" rel="noopener noreferrer">Needle Tools</a> 网站所使用的！可以在 <a href="https://github.com/needle-tools/needle-engine-samples" target="_blank" rel="noopener noreferrer">这里</a> 找到示例下载。</p></li><li><p><strong>Vite + Svelte</strong></p></li><li><p><strong>Vite + SvelteKit</strong></p></li><li><p><strong>Vite + React</strong> — Unity 集成中包含了一个实验性模板，你可以在生成项目时选择它！</p></li><li><p><strong>react-three-fiber</strong> — Unity 集成中包含了一个实验性模板，你可以在生成项目时选择它！</p></li><li><p><strong>Vercel &amp; Nextjs</strong> — 在<a href="https://github.com/needle-engine/nextjs-sample" target="_blank" rel="noopener noreferrer">这里</a>找到一个 nextjs 项目示例</p></li>',7)),s("li",null,[s("p",null,[i[1]||(i[1]=s("strong",null,"不使用任何打包器的 CDN",-1)),i[2]||(i[2]=e(" — 在")),n(a,{to:"/lang/zh/vanilla-js.html"},{default:t(()=>i[0]||(i[0]=[e("这里")])),_:1}),i[3]||(i[3]=e("找到代码示例"))])])]),i[26]||(i[26]=s("p",null,"简而言之：我们目前提供一个最小化的 vite 模板，但你可以扩展它或切换到其他框架—— 请告诉我们你构建了什么以及如何构建，以及我们如何改进你的使用体验或提供示例！",-1)),s("div",c,[i[12]||(i[12]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[i[6]||(i[6]=e("一些框架需要在 ")),i[7]||(i[7]=s("code",null,"needle.config.json",-1)),i[8]||(i[8]=e(" 中进行自定义设置。更多信息请参见")),n(a,{to:"/lang/zh/reference/needle-config-json.html"},{default:t(()=>i[5]||(i[5]=[e("此处")])),_:1}),i[9]||(i[9]=e("。通常需要设置 ")),i[10]||(i[10]=s("code",null,"baseUrl",-1)),i[11]||(i[11]=e("。"))])]),i[27]||(i[27]=l(`<details class="hint-container details"><summary>如何在 Unity 中创建自定义项目模板？</summary><p>你可以创建和分享你自己的 Web 项目模板，以使用其他打包器、构建系统，或完全不使用。</p><p><strong>创建新模板</strong></p><ol><li>选择 <code>Create/Needle Engine/Project Template</code> 将 ProjectTemplate 添加到你想用作模板的文件夹中</li><li>完成！就是这么简单。</li></ol><p>当项目中有 NpmDef 时（即当你的项目使用本地引用时），依赖项来自 unity。 你也可以将你的包发布到 npm 并通过版本号引用它们。</p></details><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking"><span>Tree-shaking 以减小打包大小</span></a></h3><p>Tree shaking 是 Web 应用打包中的一种常见实践（<a href="https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking" target="_blank" rel="noopener noreferrer">参见 MSDN 文档</a>）。这意味着代码中未使用的代码路径和功能将从最终打包的 javascript 文件中移除，以减小文件大小。请参见下文，了解 Needle Engine 包含的功能以及如何移除它们：</p><details class="hint-container details"><summary>如何移除 Rapier 物理引擎？(通过移除约 2MB (gzip 后约 600KB) 来减小总体打包大小)</summary><ul><li><p><strong>选项 1</strong>：通过 needlePlugins 配置： Set <code>useRapier</code> to <code>false</code> in your vite.config: <code>needlePlugins(command, needleConfig, { useRapier: false }),</code></p></li><li><p><strong>选项 2</strong>：通过 vite.define 配置： Declare the <code>NEEDLE_USE_RAPIER</code> define with <code>false</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">define</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  NEEDLE_USE_RAPIER</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> false</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">},</span></span></code></pre></div></li><li><p><strong>选项 3</strong>：通过 .env Create a <code>.env</code> file in your web project and add <code>VITE_NEEDLE_USE_RAPIER=false</code></p></li><li><p><strong>选项 4</strong>：通过 Unity 组件 Add the <code>Needle Engine Modules</code> component to your scene and set <code>Physics Engine</code> to <code>None</code><img src="`+p+`" alt=""></p></li></ul></details><h2 id="pwa" tabindex="-1"><a class="header-anchor" href="#pwa"><span>创建 PWA</span></a></h2><p>我们支持直接从我们的 vite 模板轻松创建渐进式 Web 应用（PWA）。 PWA 是一种 Web 应用，加载方式与普通网页或网站相同，但可以提供用户功能，如离线工作、推送通知以及通常只有原生移动应用才能访问的设备硬件。</p><p>默认情况下，使用 Needle 创建的 PWA 支持离线功能，并且在你发布新版本的应用时，可以选择自动刷新。</p><ol><li>在你的 Web 项目中安装 <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a>：<code>npm install vite-plugin-pwa --save-dev</code></li><li>如下所示修改 <code>vite.config.js</code>。确保将相同的 <code>pwaOptions</code> 对象传递给 <code>needlePlugins</code> 和 <code>VitePWA</code>。</li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> VitePWA </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;vite-plugin-pwa&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> default</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> defineConfig</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">async</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ({</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;"> command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> })</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // Create the pwaOptions object.</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // You can edit or enter PWA settings here (e.g. change the PWA name or add icons).</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /** </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">@</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">type</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">import(&quot;vite-plugin-pwa&quot;).VitePWAOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> needlePlugins </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> await</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> import</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;@needle-tools/engine/plugins/vite/index.js&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    return</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        plugins</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> [</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">            // pass the pwaOptions object to the needlePlugins and the VitePWA function</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            needlePlugins</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> needleConfig</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwa</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> pwaOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            VitePWA</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">pwaOptions</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        ]</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // the rest of your vite config...</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">所有资源默认会被缓存</p><p>请注意，默认情况下，你的构建文件夹中的所有资源都会添加到 PWA 预缓存中——对于包含大量动态资产的大型应用程序，这可能不是你想要的（想象一下用户打开应用后，YouTube PWA 缓存所有视频！）。有关如何自定义此行为，请参见<a href="#more-pwa-options">更多 PWA 选项</a>。</p></div><h3 id="pwa-1" tabindex="-1"><a class="header-anchor" href="#pwa-1"><span>测试 PWA</span></a></h3><p>要测试你的 PWA，部署页面，例如使用 <code>DeployToFTP</code> 组件。 然后，在浏览器中打开已部署的页面，检查 PWA 功能是否按预期工作：</p><ul><li>应用显示为可安装</li><li>应用可以离线工作</li><li>应用被 <a href="https://pwabuilder.com/" target="_blank" rel="noopener noreferrer">pwabuilder.com</a> 检测为具备离线能力的 PWA</li></ul><p>PWA 使用 Service Workers 缓存资源并提供离线支持。Service Workers 在开发过程中使用起来有些困难，通常只在构建时启用（例如，当你使用 <code>DeployTo...</code> 组件时）。</p><p>你可以通过在你的 <code>vite.config.js</code> 中的 options 对象中添加以下内容来启用开发时的 PWA 支持。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Note: PWAs behave different in dev mode.</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Make sure to verify the behaviour in production builds!</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  devOptions</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    enabled</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> true</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>请注意，开发模式下的 PWA 不支持离线使用——尝试这样做可能会导致意外的行为。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>自动更新正在运行的应用</span></a></h3><p>网站通常在页面刷新时显示新的或更新的内容。</p><p>在某些情况下，你可能希望在发布新版本时页面自动刷新和重新加载—— 例如在博物馆、贸易展览、公共显示器或其他长期运行的场景中。</p><p>要启用自动更新，请在 pwaOptions 对象中设置 <code>updateInterval</code> 属性，其值为应用应检查更新的时间间隔（以毫秒为单位）。如果检测到更新，页面将自动重新加载。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  updateInterval</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 15</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 60</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // 15 minutes, in milliseconds</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">周期性重新加载与用户数据</p><p>在用户与表单或其他可能因重新加载而丢失的数据进行交互的应用程序中，不建议使用自动重新加载。对于这些应用程序，建议显示重新加载提示。 有关如何实现重新加载提示而非自动重新加载的更多信息，请参见 <a href="https://vite-pwa-org.netlify.app/guide/prompt-for-update.html" target="_blank" rel="noopener noreferrer">Vite PWA plugin 文档</a>。</p></div><h3 id="pwa-2" tabindex="-1"><a class="header-anchor" href="#pwa-2"><span>更多 PWA 选项</span></a></h3><p>由于 Needle 在底层使用了 <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a>，你可以使用其提供的所有选项和钩子。 例如，你可以提供一个带有自定义应用标题或主题颜色的部分 manifest：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // manifest options provided here will override the defaults</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  manifest</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    short_name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    theme_color</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;#B2D464&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>对于部分缓存、自定义 Service Workers 或不同的更新策略等复杂需求，你可以从 <code>needlePlugins</code> 中移除 <code>{ pwa: pwaOptions }</code> 选项，并直接通过 Vite PWA plugin 添加 PWA 功能。</p><h2 id="javascript-needle-engine" tabindex="-1"><a class="header-anchor" href="#javascript-needle-engine"><span>从外部 javascript 访问 Needle Engine 和组件</span></a></h2>`,28)),s("p",null,[i[14]||(i[14]=e("你暴露的代码在打包后可以从 JavaScript 中访问。这允许构建查看器和其他应用程序，其中编辑时已知的数据与仅在运行时已知的数据（例如，动态加载的文件、用户生成的内容）是分开的。 要从引擎外部的普通 javascript 访问组件，请参阅")),n(a,{to:"/lang/zh/scripting.html#accessing-needle-engine-and-components-from-anywhere"},{default:t(()=>i[13]||(i[13]=[e("与普通 javascript 互操作部分")])),_:1})]),i[28]||(i[28]=s("h2",{id:"-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#-1"},[s("span",null,"自定义加载外观")])],-1)),s("p",null,[i[16]||(i[16]=e("参见 ")),n(a,{to:"/lang/zh/reference/needle-engine-attributes.html"},{default:t(()=>i[15]||(i[15]=[e("needle engine 组件参考")])),_:1}),i[17]||(i[17]=e(" 中的 ")),i[18]||(i[18]=s("em",null,"加载显示",-1)),i[19]||(i[19]=e(" 部分"))]),i[29]||(i[29]=l('<h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>内置样式</span></a></h3><p>needle-engine 加载外观可以使用浅色或深色皮肤。 要更改外观，请在 <code>&lt;needle-engine&gt;</code> Web 组件上使用 <code>loading-style</code> 属性。 选项包括 <code>light</code> 和 <code>dark</code>（默认）：</p><p><code>&lt;needle-engine loading-style=&quot;light&quot;&gt;&lt;/needle-engine&gt;</code></p><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span>自定义加载样式 — <em>专业版功能</em></span></a></h3>',4)),s("p",null,[i[21]||(i[21]=e("请参见 ")),n(a,{to:"/lang/zh/reference/needle-engine-attributes.html"},{default:t(()=>i[20]||(i[20]=[e("needle engine 组件参考")])),_:1}),i[22]||(i[22]=e(" 中的 ")),i[23]||(i[23]=s("em",null,"加载显示",-1)),i[24]||(i[24]=e(" 部分"))]),i[30]||(i[30]=s("p",null,[s("img",{src:h,alt:"自定义加载"})],-1)),i[31]||(i[31]=s("p",null,"页面由 AI 自动翻译",-1))])}const B=k(g,[["render",C]]),E=JSON.parse('{"path":"/lang/zh/html.html","title":"框架、打包器、HTML","lang":"zh-CN","frontmatter":{"title":"框架、打包器、HTML","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/html_zh.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine 是作为 Web Component 构建的。\\n这意味着只需在你的项目中安装 @needle-tools/engine，然后在你的 Web 项目中的任何位置包含  即可。"}]],"description":"---\\nNeedle Engine 是作为 Web Component 构建的。\\n这意味着只需在你的项目中安装 @needle-tools/engine，然后在你的 Web 项目中的任何位置包含  即可。"},"headers":[{"level":2,"title":"打包和 Web 前端","slug":"web","link":"#web","children":[{"level":3,"title":"Vite, Vue, React, Svelte, React Three Fiber...","slug":"vite-vue-react-svelte-react-three-fiber...","link":"#vite-vue-react-svelte-react-three-fiber...","children":[]},{"level":3,"title":"Tree-shaking 以减小打包大小","slug":"tree-shaking","link":"#tree-shaking","children":[]}]},{"level":2,"title":"创建 PWA","slug":"pwa","link":"#pwa","children":[{"level":3,"title":"测试 PWA","slug":"pwa-1","link":"#pwa-1","children":[]},{"level":3,"title":"自动更新正在运行的应用","slug":"","link":"#","children":[]},{"level":3,"title":"更多 PWA 选项","slug":"pwa-2","link":"#pwa-2","children":[]}]},{"level":2,"title":"从外部 javascript 访问 Needle Engine 和组件","slug":"javascript-needle-engine","link":"#javascript-needle-engine","children":[]},{"level":2,"title":"自定义加载外观","slug":"-1","link":"#-1","children":[{"level":3,"title":"内置样式","slug":"-2","link":"#-2","children":[]},{"level":3,"title":"自定义加载样式 — 专业版功能","slug":"-3","link":"#-3","children":[]}]}],"git":{"updatedTime":1745311490000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"25e22e2b0b9e4fc1e515be2b189c24864e21ac9f","time":1745311490000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add multilanguage support"}]},"filePathRelative":"lang/zh/html.md"}');export{B as comp,E as data};
