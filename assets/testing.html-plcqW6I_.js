import{_ as t}from"./switch-to-mkcert-BwslGAOn.js";import{_ as i,c as d,e as n,o}from"./app-9T6lAodh.js";const l={};function s(a,e){return o(),d("div",null,e[0]||(e[0]=[n('<h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span>在本地设备上测试</span></a></h2><p>使用我们的模板时，Needle Engine 会为您运行一个本地开发服务器。只需按下播放，您的默认浏览器中就会打开一个网站，即可在您的本地设备上进行测试。要在同一网络中的其他设备上进行测试，您可能需要安装一个自签名证书（见下文）。</p><p>使用自定义设置 / 框架时，请参阅您的框架文档，了解如何运行安全的本地开发服务器。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们的本地服务器使用您本地网络中的IP地址（例如 <code>https://192.168.0.123:3000</code>），而不是 <code>localhost:3000</code>。这使您可以从移动设备、VR眼镜和同一网络中的其他机器上快速查看和测试您的项目。</p><p>我们使用HTTPS而不是旧的HTTP，因为现代强大的Web API（如WebXR）需要安全连接——S代表“安全”。</p></div><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>设置用于开发的自签名证书</span></a></h2><p>不同的操作系统对本地开发有不同的安全要求。通常，即使使用自动生成的不可信证书，显示网站也能正常工作，但浏览器可能会警告缺少信任，并且某些功能可能无法使用。以下是摘要：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>建议在您的开发设备上安装受信任的自签名证书，以获得流畅的开发体验。请在本页底部查找步骤。</p></div><p><strong>默认 – 使用自动生成的不可信证书</strong><em>在浏览器中打开项目时显示证书警告。</em><em>使用 <a href="https://github.com/vitejs/vite-plugin-basic-ssl" target="_blank" rel="noopener noreferrer">vite-plugin-basic-ssl</a> npm包。</em></p><p>我们使用WebSocket连接在浏览器和本地开发服务器之间进行通信。WebSocket需要安全连接（HTTPS）才能工作。根据平台，您可能需要为本地开发设置自定义证书。Android和Windows不需要自定义证书，但iOS和MacOS需要。</p><table><thead><tr><th>操作系统</th><th>在浏览器中查看<br>（有安全警告）</th><th>自动重新加载</th></tr></thead><tbody><tr><td>Windows</td><td>(✓)</td><td>✓</td></tr><tr><td>Linux</td><td>(✓)</td><td>✓</td></tr><tr><td>Android</td><td>(✓)</td><td>✓</td></tr><tr><td>macOS</td><td>(✓)</td><td>❌</td></tr><tr><td>iOS</td><td>(✓ Safari 和 Chrome，页面重新加载后)<br>❌ Mozilla XR Viewer</td><td>❌</td></tr><tr><td>Xcode Simulators</td><td>(✓ 页面重新加载后)</td><td>❌</td></tr></tbody></table><p><strong>使用自签名、受信任的根证书</strong><em>不显示安全警告。您需要在您的设备上安装生成的证书。</em><em>使用 <a href="https://github.com/liuweiGL/vite-plugin-mkcert" target="_blank" rel="noopener noreferrer">vite-plugin-mkcert</a> npm包。</em></p><table><thead><tr><th>操作系统</th><th>在浏览器中查看</th><th>自动重新加载</th></tr></thead><tbody><tr><td>Windows</td><td>✓</td><td>✓</td></tr><tr><td>Linux</td><td>✓</td><td>✓</td></tr><tr><td>Android</td><td>✓</td><td>✓</td></tr><tr><td>macOS</td><td>✓</td><td>✓</td></tr><tr><td>iOS</td><td>✓</td><td>✓</td></tr></tbody></table><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>生成自签名开发证书</span></a></h3><ul><li><p>在Unity/Blender中，点击“Open Workspace”以打开VS Code</p></li><li><p>检查您在 <code>vite.config.ts</code> 文件中是否使用 <code>vite-plugin-mkcert</code> 而不是 <code>vite-plugin-basic-ssl</code>（后者不会生成我们需要的受信任根证书）：</p><ul><li>打开 <code>package.json</code></li><li>从 <code>devDependencies</code> 中删除包含 <code>&quot;@vitejs/plugin-basic-ssl&quot;</code> 的行</li><li>在VS Code中打开终端并运行 <code>npm install vite-plugin-mkcert --save-dev</code>，这将添加最新版本</li><li>打开 <code>vite.config.ts</code> 并将 <code>import basicSsl from &#39;@vitejs/plugin-basic-ssl&#39;</code> 替换为 <code>import mkcert from&#39;vite-plugin-mkcert&#39;</code></li><li>在 <code>plugins: [</code> 中，将 <code>basicSsl(),</code> 替换为 <code>mkcert(),</code></li><li>package.json 现在看起来像这样： <img src="'+t+'" alt=""></li></ul></li><li><p>从VS Code的终端运行一次 <code>npm run start</code></p><ul><li>在Windows上，这将打开一个新窗口，引导您创建和安装证书</li><li>在MacOS上，终端会提示您输入密码，然后生成并安装证书。</li><li>如果您收到错误 <code>Error: Port 3000 is already in use</code>，请关闭可能仍在Unity中运行的服务器。</li></ul></li><li><p>生成的证书将自动安装在您生成它的机器上。</p></li><li><p>您可以再次停止终端进程。</p></li><li><p>从现在起，在Unity/Blender中按下播放将为本地服务器使用生成的证书，并且将不再显示“安全警告”，因为您的浏览器现在信任本地连接。</p></li></ul><h2 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span>在您的开发设备上安装证书</span></a></h2><p>在您的开发设备上，您需要_安装_生成的证书并允许操作系统_信任_它。这在不同的操作系统上是不同的。对于每个操作系统，您都需要生成的 <code>rootCA.pem</code> 文件，并将其发送到您要认证的设备。</p><p><strong>在Windows上：</strong> 在 <code>Users/&lt;your-user&gt;/.vite-plugin-mkcert/rootCA.pem</code> 中找到证书 <strong>在MacOS上：</strong> 在 <code>Users/&lt;your-user&gt;/.vite-plugin-mkcert/rootCA.pem</code> 中找到证书</p><p>将文件发送给自己（例如通过E-Mail、AirDrop、iCloud、USB、Slack等），以便您可以在您的开发设备上访问它。</p><h3 id="android" tabindex="-1"><a class="header-anchor" href="#android"><span>在Android上安装证书</span></a></h3><ol><li>打开文件。系统将提示您安装证书。</li></ol><h3 id="ios-ipados-visionos" tabindex="-1"><a class="header-anchor" href="#ios-ipados-visionos"><span>在iOS / iPadOS / VisionOS上安装证书</span></a></h3><ol><li>打开文件。</li><li>系统将提示您将描述文件_添加_到您的设备。确认。</li><li>转到“设置”。</li><li>将有一个新的条目“描述文件”。选择它并允许该描述文件在此设备上处于_活动_状态。</li><li>在iOS / iPadOS上，您还需要允许“Root Certificate Trust”。为此，请搜索 <code>Trust</code> 或前往 <code>设置 &gt; 通用 &gt; 关于 &gt; 证书信任设置</code> 并为根证书启用完全信任。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>证书会自动安装在您生成它的机器上。对于本地网络中的其他机器，请按照以下步骤操作以建立受信任的连接。</p></div><h3 id="macos" tabindex="-1"><a class="header-anchor" href="#macos"><span>在另一台MacOS机器上安装证书</span></a></h3><ol><li>打开文件。Keychain Access将打开，允许您安装证书。</li><li>您可能需要将“信任”设置为“始终允许”。</li></ol><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>在另一台Windows机器上安装证书</span></a></h3><ol><li>通过键入 <kbd>Windows key</kbd> + <code>certmgr</code> 打开 <code>certmgr</code>（“管理用户证书”）。</li><li>在左侧边栏中，选择“受信任的根证书颁发机构”。</li><li>右键单击“证书”，然后选择“所有任务 &gt; 导入”。</li><li>选择 <code>rootCA.pem</code> 文件（您可能需要将文件类型更改为“所有文件”）并按照说明操作。</li></ol><hr><p>此页面由AI自动翻译</p>',29)]))}const p=i(l,[["render",s]]),h=JSON.parse('{"path":"/lang/zh/testing.html","title":"Testing on local devices","lang":"zh-CN","frontmatter":{"title":"Testing on local devices","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/testing on local devices_zh.png"}],["meta",{"name":"og:description","content":"---\\n使用我们的模板时，Needle Engine 会为您运行一个本地开发服务器。只需按下播放，您的默认浏览器中就会打开一个网站，即可在您的本地设备上进行测试。要在同一网络中的其他设备上进行测试，您可能需要安装一个自签名证书（见下文）。\\n使用自定义设置 / 框架时，请参阅您的框架文档，了解如何运行安全的本地开发服务器。\\n::: tip\\n我们的本地服务器使用您本地网络中的IP地址（例如 https://192.168.0.123:3000），而不是 localhost:3000。这使您可以从移动设备、VR眼镜和同一网络中的其他机器上快速查看和测试您的项目。\\n我们使用HTTPS而不是旧的HTTP，因为现代强大的Web API（如WebXR）需要安全连接——S代表“安全”。\\n:::\\n不同的操作系统对本地开发有不同的安全要求。通常，即使使用自动生成的不可信证书，显示网站也能正常工作，但浏览器可能会警告缺少信任，并且某些功能可能无法使用。以下是摘要：\\n::: tip\\n建议在您的开发设备上安装受信任的自签名证书，以获得流畅的开发体验。请在本页底部查找步骤。\\n:::\\n默认 – 使用自动生成的不可信证书\\n_在浏览器中打开项目时显示证书警告。_\\n_使用 vite-plugin-basic-ssl npm包。_\\n我们使用WebSocket连接在浏览器和本地开发服务器之间进行通信。WebSocket需要安全连接（HTTPS）才能工作。根据平台，您可能需要为本地开发设置自定义证书。Android和Windows不需要自定义证书，但iOS和MacOS需要。"}]],"description":"---\\n使用我们的模板时，Needle Engine 会为您运行一个本地开发服务器。只需按下播放，您的默认浏览器中就会打开一个网站，即可在您的本地设备上进行测试。要在同一网络中的其他设备上进行测试，您可能需要安装一个自签名证书（见下文）。\\n使用自定义设置 / 框架时，请参阅您的框架文档，了解如何运行安全的本地开发服务器。\\n::: tip\\n我们的本地服务器使用您本地网络中的IP地址（例如 https://192.168.0.123:3000），而不是 localhost:3000。这使您可以从移动设备、VR眼镜和同一网络中的其他机器上快速查看和测试您的项目。\\n我们使用HTTPS而不是旧的HTTP，因为现代强大的Web API（如WebXR）需要安全连接——S代表“安全”。\\n:::\\n不同的操作系统对本地开发有不同的安全要求。通常，即使使用自动生成的不可信证书，显示网站也能正常工作，但浏览器可能会警告缺少信任，并且某些功能可能无法使用。以下是摘要：\\n::: tip\\n建议在您的开发设备上安装受信任的自签名证书，以获得流畅的开发体验。请在本页底部查找步骤。\\n:::\\n默认 – 使用自动生成的不可信证书\\n_在浏览器中打开项目时显示证书警告。_\\n_使用 vite-plugin-basic-ssl npm包。_\\n我们使用WebSocket连接在浏览器和本地开发服务器之间进行通信。WebSocket需要安全连接（HTTPS）才能工作。根据平台，您可能需要为本地开发设置自定义证书。Android和Windows不需要自定义证书，但iOS和MacOS需要。"},"headers":[{"level":2,"title":"在本地设备上测试","slug":"","link":"#","children":[]},{"level":2,"title":"设置用于开发的自签名证书","slug":"-1","link":"#-1","children":[{"level":3,"title":"生成自签名开发证书","slug":"-2","link":"#-2","children":[]}]},{"level":2,"title":"在您的开发设备上安装证书","slug":"-3","link":"#-3","children":[{"level":3,"title":"在Android上安装证书","slug":"android","link":"#android","children":[]},{"level":3,"title":"在iOS / iPadOS / VisionOS上安装证书","slug":"ios-ipados-visionos","link":"#ios-ipados-visionos","children":[]},{"level":3,"title":"在另一台MacOS机器上安装证书","slug":"macos","link":"#macos","children":[]},{"level":3,"title":"在另一台Windows机器上安装证书","slug":"windows","link":"#windows","children":[]}]}],"git":{"updatedTime":1745311490000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"25e22e2b0b9e4fc1e515be2b189c24864e21ac9f","time":1745311490000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add multilanguage support"}]},"filePathRelative":"lang/zh/testing.md"}');export{p as comp,h as data};
