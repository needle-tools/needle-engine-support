import{_ as h,c as r,a as e,e as l,d as s,b as t,w as n,r as d,o as p}from"./app-9T6lAodh.js";const k={},o={class:"hint-container details"};function c(g,i){const a=d("RouteLink");return p(),r("div",null,[i[33]||(i[33]=e("h1",{id:"creating-custom-components",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-custom-components"},[e("span",null,"Creating custom components")])],-1)),i[34]||(i[34]=e("p",null,[s("If you are new to scripting we "),e("strong",null,"highly recommend"),s(" reading the following guides first:")],-1)),e("ul",null,[e("li",null,[t(a,{to:"/getting-started/typescript-essentials.html"},{default:n(()=>i[0]||(i[0]=[s("Typescript Essentials")])),_:1})]),e("li",null,[t(a,{to:"/getting-started/for-unity-developers.html"},{default:n(()=>i[1]||(i[1]=[s("Needle Engine for Unity Developers")])),_:1})])]),i[35]||(i[35]=e("p",null,[s("If you know what you're doing, feel free to jump right into the "),e("a",{href:"https://engine.needle.tools/docs/api/latest",target:"_blank",rel:"noopener noreferrer"},"Needle Engine API documentation"),s(".")],-1)),i[36]||(i[36]=e("hr",null,null,-1)),i[37]||(i[37]=e("p",null,[s("Runtime code for Needle Engine is written in "),e("a",{href:"https://typescriptlang.org",target:"_blank",rel:"noopener noreferrer"},"TypeScript"),s(" (recommended) or "),e("a",{href:"https://javascript.info/",target:"_blank",rel:"noopener noreferrer"},"JavaScript"),s(". We automatically generate C# stub components out of that, which you can add to GameObjects in the editor. The C# components and their data are recreated by the runtime as JavaScript components with the same data and attached to three.js objects.")],-1)),e("p",null,[i[3]||(i[3]=s("Both custom components as well as built-in Unity components can be mapped to JavaScript components in this way. For example, mappings for many built-in components related to animation, rendering or physics are already ")),t(a,{to:"/component-reference.html#unity-components"},{default:n(()=>i[2]||(i[2]=[s("included in Needle Engine")])),_:1}),i[4]||(i[4]=s("."))]),i[38]||(i[38]=l('<p>If you want to code-along with the following examples without having to install anything you just click the following link:</p><ul><li><a href="https://stackblitz.com/fork/github/needle-engine/vite-template?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">Create virtual workspace to code along</a>.</li></ul><hr><p>Our web runtime engine adopts a component model similar to Unity and thus provides a lot of functionality that will feel familiar. Components attached to three&#39;s Object3D objects have lifecycle methods like <code>awake</code>, <code>start</code>, <code>onEnable</code>, <code>onDisable</code>, <code>update</code> and <code>lateUpdate</code> that you can implement. You can also use <a href="#coroutines">Coroutines</a>.</p><hr><h2 id="when-you-don-t-need-to-write-code" tabindex="-1"><a class="header-anchor" href="#when-you-don-t-need-to-write-code"><span>When you don&#39;t need to write code</span></a></h2><p>Often, interactive scenes can be realized using Events in Unity and calling methods on built-in components. A typical example is playing an animation on button click - you create a button, add a Click event in the inspector, and have that call Animator.SetTrigger or similar to play a specific animation.</p><p>Needle Engine translates Unity Events into JavaScript method calls, which makes this a very fast and flexible workflow - set up your events as usual and when they&#39;re called they&#39;ll work the same as in Unity.</p><p><img src="https://user-images.githubusercontent.com/2693840/187314594-7e34905d-e704-4fa3-835c-6b40f11e1c62.png" alt="image"><br><em>An example of a Button Click Event that is working out-of-the-box in Needle Engine — no code needed.</em></p><h2 id="creating-a-new-component" tabindex="-1"><a class="header-anchor" href="#creating-a-new-component"><span>Creating a new component</span></a></h2><p>Scripts are written in TypeScript (recommended) or JavaScript.<br> There are two ways to add custom scripts to your project:</p>',11)),e("ul",null,[i[16]||(i[16]=e("li",null,[e("p",null,[s("Simply add a file with an "),e("code",null,".ts"),s(" or "),e("code",null,".js"),s(" extension inside "),e("code",null,"src/scripts/"),s(" in your generated project directory, for example "),e("code",null,"src/scripts/MyFirstScript.ts")])],-1)),e("li",null,[e("p",null,[i[6]||(i[6]=s("Unity specific:")),i[7]||(i[7]=e("br",null,null,-1)),i[8]||(i[8]=s(" Organize your code into NPM Definition Files (npm packages). These help you to modularize and re-use code between projects and if you are familiar with web development they are in fact regular npm packages that are installed locally.")),i[9]||(i[9]=e("br",null,null,-1)),i[10]||(i[10]=s(" In Unity you can create NpmDef files via ")),i[11]||(i[11]=e("code",null,"Create > NPM Definition",-1)),i[12]||(i[12]=s(" and then add TypeScript files by right-clicking an NpmDef file and selecting ")),i[13]||(i[13]=e("code",null,"Create > TypeScript",-1)),i[14]||(i[14]=s(". Please see ")),t(a,{to:"/project-structure.html#npm-definition-files"},{default:n(()=>i[5]||(i[5]=[s("this chapter")])),_:1}),i[15]||(i[15]=s(" for more information."))])])]),i[39]||(i[39]=e("p",null,[s("In both approaches, source directories are watched for changes and C# stub components or Blender panels are regenerated whenever a change is detected."),e("br"),s(" Changes to the source files also result in a hot reload of the running website – you don't have to wait for Unity to recompile the C# components. This makes iterating on code pretty much instant.")],-1)),i[40]||(i[40]=e("p",null,[s("You can even have multiple component types inside one file (e.g. you can declare "),e("code",null,"export class MyComponent1"),s(" and "),e("code",null,"export class MyOtherComponent"),s(" in the same Typescript file).")],-1)),e("p",null,[i[18]||(i[18]=s("If you are new to writing Javascript or Typescript we recommend reading the ")),t(a,{to:"/getting-started/typescript-essentials.html"},{default:n(()=>i[17]||(i[17]=[s("Typescript Essentials Guide")])),_:1}),i[19]||(i[19]=s(" guide first before continuing with this guide."))]),i[41]||(i[41]=l(`<details class="hint-container details"><summary>Example: Creating a Component that rotates an object</summary><ul><li><strong>Create a component that rotates an object</strong><br> Create <code>src/scripts/Rotate.ts</code> and add the following code:</li></ul><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Rotate</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">()</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    speed </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // logging this is useful for debugging in the browser. </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // You can open the developer console (F12) to see what data your component contains</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // update will be called every frame</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">rotateY</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">time</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">deltaTime </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">*</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">speed)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Now inside Unity a new script called <code>Rotate.cs</code> will be automatically generated. Add the new Unity component to a Cube and save the scene.<br> The cube is now rotating inside the browser.<br> Open the chrome developer console by <code>F12</code> to inspect the log from the <code>Rotate.start</code> method. This is a helpful practice to learn and debug what fields are exported and currently assigned. In general all public and serializable fields and all public properties are exported.</p><p>Now add a new field <code>public float speed = 5</code> to your Unity component and save it. The Rotate component inspector now shows a <code>speed</code> field that you can edit. Save the scene (or click the <code>Build</code> button) and note that the javascript component now has the exported <code>speed</code> value assigned.</p></details>`,1)),e("details",o,[i[23]||(i[23]=e("summary",null,"Create component with a custom function",-1)),e("p",null,[i[21]||(i[21]=s("Refer to the ")),t(a,{to:"/getting-started/typescript-essentials.html"},{default:n(()=>i[20]||(i[20]=[s("Typescript Essentials Guide")])),_:1}),i[22]||(i[22]=s(" to learn more about the syntax and language."))]),i[24]||(i[24]=l(`<div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> PrintNumberComponent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">      this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">printNumber</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">42</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    </span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> printNumber</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">myNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> :</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">){</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;My Number is: &quot;</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> +</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myNumber)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div>`,1))]),i[42]||(i[42]=l(`<details class="hint-container details"><summary>Version Control &amp; Unity</summary><p>While generated C# components use the type name to produce stable GUIDs, we recommend checking in generated components in version control as a good practice.</p></details><h2 id="component-architecture" tabindex="-1"><a class="header-anchor" href="#component-architecture"><span>Component architecture</span></a></h2><p>Components are added to three.js <code>Object3Ds</code>. This is similar to how Components in Unity are added to <code>GameObjects</code>. Therefore when we want to access a three.js Object3D, we can access it as <code>this.gameObject</code> which returns the <code>Object3D</code> that the component is attached to.</p><p><em><strong>Note</strong>: Setting <code>visible</code> to false on a Object3D will act like <code>SetActive(false)</code> in Unity - meaning it will also disable all the current components on this object and its children. Update events for inactive components are not being called until <code>visible</code> is set to true again.</em> If you want to hide an object without affecting components you can just disable the Needle Engine <code>Renderer</code> component.</p><h3 id="lifecycle-methods" tabindex="-1"><a class="header-anchor" href="#lifecycle-methods"><span>Lifecycle methods</span></a></h3><p>Note that lifecycle methods are only being called when they are declared. So only declare <code>update</code> lifecycle methods when they are actually necessary, otherwise it may hurt performance if you have many components with update loops that do nothing.</p><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>awake()</code></td><td>First method being called when a new component is created</td></tr><tr><td><code>onEnable()</code></td><td>Called when a component is enabled (e.g. when <code>enabled</code> changes from false to true)</td></tr><tr><td><code>onDisable()</code></td><td>Called when a component is disabled (e.g. when <code>enabled</code> changes from true to false)</td></tr><tr><td><code>onDestroy()</code></td><td>called when the Object3D or component is being destroyed</td></tr><tr><td><code>start()</code></td><td>Called on the start of the first frame after the component was created</td></tr><tr><td><code>earlyUpdate()</code></td><td>First update event</td></tr><tr><td><code>update()</code></td><td>Default update event</td></tr><tr><td><code>lateUpdate()</code></td><td>Called after update</td></tr><tr><td><code>onBeforeRender()</code></td><td>Last update event before render call</td></tr><tr><td><code>onAfterRender()</code></td><td>Called after render event</td></tr></tbody></table><h3 id="physic-event-methods" tabindex="-1"><a class="header-anchor" href="#physic-event-methods"><span>Physic event methods</span></a></h3><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>onCollisionEnter(col : Collision)</code></td><td></td></tr><tr><td><code>onCollisionStay(col : Collision)</code></td><td></td></tr><tr><td><code>onCollisionExit(col : Collision)</code></td><td></td></tr><tr><td><code>onTriggerEnter(col : Collision)</code></td><td></td></tr><tr><td><code>onTriggerStay(col : Collision)</code></td><td></td></tr><tr><td><code>onTriggerExit(col : Collision)</code></td><td></td></tr></tbody></table><h3 id="input-event-methods" tabindex="-1"><a class="header-anchor" href="#input-event-methods"><span>Input event methods</span></a></h3><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>onPointerEnter(args : PointerEventData)</code></td><td>Called when a cursor starts to hover over an object (or any of it&#39;s children)</td></tr><tr><td><code>onPointerMove(args : PointerEventData)</code></td><td>Called when a cursor moves over an object (or any of it&#39;s children)</td></tr><tr><td><code>onPointerExit(args : PointerEventData)</code></td><td>Called when a cursor exists (stops hovering) an object</td></tr><tr><td><code>onPointerDown(args : PointerEventData)</code></td><td>Called when a cursor is pressed over an object</td></tr><tr><td><code>onPointerUp(args : PointerEventData)</code></td><td>Called when a cursor is released over an object</td></tr><tr><td><code>onPointerClick(args : PointerEventData)</code></td><td>Called when a cursor is clicked over an object</td></tr></tbody></table><h3 id="xr-event-methods" tabindex="-1"><a class="header-anchor" href="#xr-event-methods"><span>XR event methods</span></a></h3><p><em>requires Needle Engine &gt;= 3.32.0</em></p><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>supportsXR(mode: XRSessionMode)</code></td><td>Optionally implement if you only want to receive XR callbacks for specific XR modes like <code>immersive-vr</code> or <code>immersive-ar</code>. Return <code>true</code> to notify the system that you want callbacks for the passed in mode</td></tr><tr><td><code>onBeforeXR(mode: XRSessionMode, init: XRSessionInit)</code></td><td>Called right before a XRSession is requested and can be used to modify the XRSessionInit object</td></tr><tr><td><code>onEnterXR(args: NeedleXREventArgs)</code></td><td>Callback when this component joins a xr session (or becomes active in a running XR session)</td></tr><tr><td><code>onUpdateXR(args: NeedleXREventArgs)</code></td><td>Callback when a xr session updates (while it is still active in XR session)</td></tr><tr><td><code>onLeaveXR(args: NeedleXREventArgs)</code></td><td>allback when this component exists a xr session (or when it becomes inactive in a running XR session)</td></tr><tr><td><code>onControllerAdded(args: NeedleXRControllerEventArgs)</code></td><td>Callback when a controller is connected/added while in a XR session OR when the component joins a running XR session that has already connected controllers OR when the component becomes active during a running XR session that has already connected controllers</td></tr><tr><td><code>onControllerRemoved(args: NeedleXRControllerEventArgs)</code></td><td>callback when a controller is removed while in a XR session OR when the component becomes inactive during a running XR session</td></tr></tbody></table><h4 id="additional-xr-events" tabindex="-1"><a class="header-anchor" href="#additional-xr-events"><span>Additional XR events</span></a></h4><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>window.addEventListener(&quot;needle-xrsession-start&quot;)</code></td><td>CustomEvent that is invoked when a XRSession starts. <code>details</code> contains the <code>NeedleXRSession</code></td></tr><tr><td><code>window.addEventListener(&quot;needle-xrsession-end&quot;)</code></td><td>CustomEvent that is invoked when a XRSession starts. <code>details</code> contains the <code>NeedleXRSession</code></td></tr><tr><td><code>onXRSessionStart(args: { session:NeedleXRSession } )</code></td><td>global event hook. To unsubscribe use <code>offXRSessionStart</code></td></tr></tbody></table><h3 id="coroutines" tabindex="-1"><a class="header-anchor" href="#coroutines"><span>Coroutines</span></a></h3><p>Coroutines can be declared using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener noreferrer">JavaScript Generator Syntax</a>.<br> To start a coroutine, call <code>this.startCoroutine(this.myRoutineName());</code></p><p><strong>Example</strong></p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> FrameEvent </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Rotate</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // the second argument is optional and allows you to specifiy </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // when it should be called in the current frame loop</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // coroutine events are called after regular component events of the same name</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // for example: Update coroutine events are called after component.update() functions</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">startCoroutine</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">rotate</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> FrameEvent</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Update)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // this method is called every frame until the component is disabled</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    *</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">rotate</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // keep looping forever</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        while</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">true</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">            yield</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>To stop a coroutine, either exit the routine by returning from it, or cache the return value of <code>startCoroutine</code> and call <code>this.stopCoroutine(&lt;...&gt;)</code>. All Coroutines are stopped at <code>onDisable</code> / when disabling a component.</p><h2 id="special-lifecycle-hooks" tabindex="-1"><a class="header-anchor" href="#special-lifecycle-hooks"><span>Special Lifecycle hooks</span></a></h2><p>Needle Engine also exposes a few lifecycle hooks that you can use to hook into the update loop without having to write a full component.<br> Those hooks can be inserted at any point in your web application (for example in toplevel scope or in a svelte component)</p><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>onInitialized(cb, options)</code></td><td>Called when a new context is initialized (before the first frame)</td></tr><tr><td><code>onClear(cb, options)</code></td><td>Register a callback before the engine context is cleared</td></tr><tr><td><code>onDestroy(cb, options)</code></td><td>Register a callback in the engine before the context is destroyed</td></tr><tr><td><code>onStart(cb, options)</code></td><td>Called directly after components <code>start</code> at the beginning of a frame</td></tr><tr><td><code>onUpdate(cb, options)</code></td><td>Called directly after components <code>update</code></td></tr><tr><td><code>onBeforeRender(cb, options)</code></td><td>called before calling render</td></tr><tr><td><code>onAfterRender(cb, options)</code></td><td>called before calling render</td></tr></tbody></table><p>For example (<a href="https://stackblitz.com/edit/needle-engine-lifecycle-hooks?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">See example on stackblitz</a>)</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// this can be put into e.g. main.ts or a svelte component (similar to onMount)</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> onStart</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> onUpdate</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> onBeforeRender</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> onAfterRender </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">onStart</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello Scene&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">scene))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">onUpdate</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // do something... e.g. access the frame # or deltatime via ctx.time</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;UPDATE&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">time</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">frame)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">onBeforeRender</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // this event is only called once because of the { once: true } argument</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;ON BEFORE RENDER&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">time</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">frame)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">},</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> once</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> true</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> )</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// Every event hook returns a method to unsubscribe from the event</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> unsubscribe </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> onAfterRender</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;ON AFTER RENDER&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> ctx</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">time</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">frame)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// Unsubscribe from the event at any time</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">setTimeout</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=&gt;</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> unsubscribe</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><h2 id="finding-adding-and-removing-components" tabindex="-1"><a class="header-anchor" href="#finding-adding-and-removing-components"><span>Finding, adding and removing components</span></a></h2><p>To access other components, use the static methods on <code>GameObject</code> or <code>this.gameObject</code> methods. For example, to access a <code>Renderer</code> component in the parent use <code>GameObject.getComponentInParent(this.gameObject, Renderer)</code> or <code>this.gameObject.getComponentInParent(Renderer)</code>.</p><p><strong>Example:</strong></p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> renderer </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getComponentInParent</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h3 id="some-of-the-available-methods" tabindex="-1"><a class="header-anchor" href="#some-of-the-available-methods"><span>Some of the available methods:</span></a></h3><table><thead><tr><th>Method</th><th></th></tr></thead><tbody><tr><td><code>GameObject.instantiate(Object3D, InstantiateOptions)</code></td><td>creates a new instance of this object including new instances of all its components</td></tr><tr><td><code>GameObject.destroy(Object3D | Component)</code></td><td>destroy a component or Object3D (and its components)</td></tr><tr><td><code>GameObject.addNewComponent(Object3D, Type)</code></td><td>adds (and creates) a new component for a type to the provided object. Note that <code>awake</code> and <code>onEnable</code> is already called when the component is returned</td></tr><tr><td><code>GameObject.addComponent(Object3D, Component)</code></td><td>moves a component instance to the provided object. It is useful if you already have an instance e.g. when you create a component with e.g. <code>new MyComponent()</code> and then attach it to a object</td></tr><tr><td><code>GameObject.removeComponent(Component)</code></td><td>removes a component from a gameObject</td></tr><tr><td><code>GameObject.getComponent(Object3D, Type)</code></td><td>returns the first component matching a type on the provided object.</td></tr><tr><td><code>GameObject.getComponents(Object3D, Type)</code></td><td>returns all components matching a type on the provided object.</td></tr><tr><td><code>GameObject.getComponentInChildren</code></td><td>same as <code>getComponent</code> but also searches in child objects.</td></tr><tr><td><code>GameObject.getComponentsInChildren</code></td><td>same as <code>getComponents</code> but also searches in child objects.</td></tr><tr><td><code>GameObject.getComponentInParent</code></td><td>same as <code>getComponent</code> but also searches in parent objects.</td></tr><tr><td><code>GameObject.getComponentsInParent</code></td><td>same as <code>getComponents</code> but also searches in parent objects.</td></tr><tr><td><code>GameObject.findObjectOfType</code></td><td>searches the whole scene for a type.</td></tr><tr><td><code>GameObject.findObjectsOfType</code></td><td>searches the whole scene for all matching types.</td></tr></tbody></table><h2 id="three.js-and-the-html-dom" tabindex="-1"><a class="header-anchor" href="#three.js-and-the-html-dom"><span>Three.js and the HTML DOM</span></a></h2><p>The context refers to the runtime inside a <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noopener noreferrer">web component</a>.<br> The three.js scene lives inside a custom HTML component called <code>&lt;needle-engine&gt;</code> (see the <em>index.html</em> in your project). You can access the <code>&lt;needle-engine&gt;</code> web component using <code>this.context.domElement</code>.</p><p>This architecture allows for potentially having multiple needle WebGL scenes on the same webpage, that can either run on their own or communicate between each other as parts of your webpage.</p><h3 id="access-the-scene" tabindex="-1"><a class="header-anchor" href="#access-the-scene"><span>Access the scene</span></a></h3><p>To access the current scene from a component you use <code>this.scene</code> which is equivalent to <code>this.context.scene</code>, this gives you the root three.js scene object.</p><p>To traverse the hierarchy from a component you can either iterate over the children of an object<br> with a for loop:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">let</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">++</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children[i])</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>or you can iterate using the <code>foreach</code> equivalent:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> child </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(child)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>You can also use three.js specific methods to quickly iterate all objects recursively using the <a href="https://threejs.org/docs/#api/en/core/Object3D.traverse" target="_blank" rel="noopener noreferrer"><code>traverse</code></a> method:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Object3D </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">traverse</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Object3D</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(obj))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>or to just traverse visible objects use <a href="https://threejs.org/docs/#api/en/core/Object3D.traverseVisible" target="_blank" rel="noopener noreferrer"><code>traverseVisible</code></a> instead.</p><p>Another option that is quite useful when you just want to iterate objects being renderable you can query all renderer components and iterate over them like so:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> renderer </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getComponentsInChildren</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer))</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>For more information about getting components see the next section.</p><h3 id="time" tabindex="-1"><a class="header-anchor" href="#time"><span>Time</span></a></h3><p>Use <code>this.context.time</code> to get access to time data:</p><ul><li><code>this.context.time.time</code> is the time since the application started running</li><li><code>this.context.time.deltaTime</code> is the time that has passed since the last frame</li><li><code>this.context.time.frameCount</code> is the number of frames that have passed since the application started</li><li><code>this.context.time.realtimeSinceStartup</code> is the unscaled time since the application has started running</li></ul><p>It is also possible to use <code>this.context.time.timeScale</code> to deliberately slow down time for e.g. slow motion effects.</p><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>Input</span></a></h3><p>Receive input data for the object the component is on:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onPointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;POINTER DOWN on &quot;</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> +</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">name)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>You can also subscribe to global events in the <code>InputEvents</code> enum like so:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> InputEvents</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> NEPointerEvent </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onEnable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onDisable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // it is recommended to also unsubscribe from events when your component becomes inactive</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">removeEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // @nonSerialized</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    inputPointerDown</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> (</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">evt</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> NEPointerEvent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;POINTER DOWN anywhere on the &lt;needle-engine&gt; element&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Or use <code>this.context.input</code> if you want to poll input state every frame:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getPointerDown</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">            console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;POINTER DOWN anywhere&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>If you want to handle inputs yourself you can also subscribe to <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener noreferrer">all events the browser provides</a> (there are a ton). For example to subscribe to the browsers click event you can write:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onEnable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        window</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">windowClick)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onDisable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // unsubscribe again when the component is disabled</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        window</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">removeEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">windowClick)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    windowClick</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ()</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;CLICK anywhere on the page, not just on &lt;needle-engine&gt;&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Note that in this case you have to handle all cases yourself. For example you may need to use different events if your user is visiting your website on desktop vs mobile vs a VR device. These cases are automatically handled by the Needle Engine input events (e.g. <code>PointerDown</code> is raised both for mouse down, touch down and in case of VR on controller button down).</p><h3 id="raycasting" tabindex="-1"><a class="header-anchor" href="#raycasting"><span>Raycasting</span></a></h3><p>Use <code>this.context.physics.raycast()</code> to perform a raycast and get a list of intersections. If you dont pass in any options the raycast is performed from the mouse position (or first touch position) in screenspace using the currently active <code>mainCamera</code>. You can also pass in a <code>RaycastOptions</code> object that has various settings like <code>maxDistance</code>, the camera to be used or the layers to be tested against.</p><p>Use <code>this.context.physics.raycastFromRay(your_ray)</code> to perform a raycast using a <a href="https://threejs.org/docs/#api/en/math/Ray" target="_blank" rel="noopener noreferrer">three.js ray</a>.</p><blockquote><p><strong>Note</strong>: This type of raycast casts a ray against all visible objects in the scene. No physics engine is needed, which is different to the behaviour in Unity, where you always need colliders to hit objects. If you want to cast against physics colliders only, use <code>physics.engine.raycast</code> methods described below.</p></blockquote><h4 id="performance-considerations" tabindex="-1"><a class="header-anchor" href="#performance-considerations"><span>Performance considerations</span></a></h4><p>When using default Needle compression settings, simplified versions of meshes are automatically created and used for raycasting as well. Still, some types of meshes are slow – for example, skinned meshes or meshes with blendshapes require expensive calculations to determine exact hits. Consider setting those objects to the <code>Ignore Raycast</code> layer in Unity to avoid raycasting against them.</p><h4 id="physics-based-raycasting" tabindex="-1"><a class="header-anchor" href="#physics-based-raycasting"><span>Physics-based Raycasting</span></a></h4><p>Another option is to use the physics raycast methods which will only return hits with colliders in the scene.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">physics</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">engine</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">raycast</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Here is an editable <a href="https://stackblitz.com/edit/needle-engine-physics-raycast-example?file=src%2Fmain.ts,package.json,.gitignore" target="_blank" rel="noopener noreferrer">example for physics raycast</a></p><h3 id="networking" tabindex="-1"><a class="header-anchor" href="#networking"><span>Networking</span></a></h3>`,72)),e("p",null,[i[26]||(i[26]=s("Networking methods can be accessed via ")),i[27]||(i[27]=e("code",null,"this.context.connection",-1)),i[28]||(i[28]=s(". Please refer to the ")),t(a,{to:"/networking.html"},{default:n(()=>i[25]||(i[25]=[s("networking docs")])),_:1}),i[29]||(i[29]=s(" for further information."))]),i[43]||(i[43]=l(`<h2 id="accessing-needle-engine-and-components-from-anywhere" tabindex="-1"><a class="header-anchor" href="#accessing-needle-engine-and-components-from-anywhere"><span>Accessing Needle Engine and components from anywhere</span></a></h2><p>It is possible to access all the functionality described above using regular JavaScript code that is not inside components and lives somewhere else. All the components and functionality of the needle runtime is accessible via the global <code>Needle</code> namespace (you can write <code>console.log(Needle)</code> to get an overview)</p><p>You can find components using <code>Needle.findObjectOfType(Needle.AudioSource)</code> for example. It is recommended to cache those references, as searching the whole scene repeatedly is expensive. See the list for <a href="#finding-adding-and-removing-components">finding adding and removing components</a> above.</p><p>For getting callbacks for the initial scene load see the following example:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;</span><span style="--shiki-light:#EA76CB;--shiki-dark:#F4B8E4;">needle-engine</span><span style="--shiki-light:#DF8E1D;--shiki-dark:#E5C890;"> loadstart</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;loadingStarted&quot;</span><span style="--shiki-light:#DF8E1D;--shiki-dark:#E5C890;"> progress</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;loadingProgress&quot;</span><span style="--shiki-light:#DF8E1D;--shiki-dark:#E5C890;"> loadfinished</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;loadingFinished&quot;</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&gt;&lt;/</span><span style="--shiki-light:#EA76CB;--shiki-dark:#F4B8E4;">needle-engine</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">script</span><span style="--shiki-light:#DF8E1D;--shiki-dark:#E5C890;"> type</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;text/javascript&quot;</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">function loadingStarted() </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;START&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">function loadingProgress() </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;LOADING...&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">function loadingFinished() </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;FINISHED!&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span>
<span class="line"><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;/</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">script</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&gt;</span></span></code></pre></div><p>You can also subscribe to the globale <code>NeedleEngine</code> (sometimes also referred to as <em>ContextRegistry</em>) to receive a callback when a Needle Engine context has been created or to access all available contexts:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> YourComponentType</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {}</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">//---cut---</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> NeedleEngine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">NeedleEngine</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addContextCreatedCallback</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">  const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> context </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> args</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">  const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> scene </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">scene</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">  const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myInstance </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getComponentInChildren</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(scene</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> YourComponentType)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Another option is using the <code>onInitialized(ctx =&gt; {})</code> <a href="#special-lifecycle-hooks">lifecycle hook</a></p><p>You can also access all available contexts via <code>NeedleEngine.Registered</code> which returns the internal array. (Note that this array should not be modified but can be used to iterate all active contexts to modify settings, e.g. set all contexts to <code>context.isPaused = true</code>)</p><p>Below you find a list of available events on the static <code>NeedleEngine</code> type.<br> You can subscribe to those events via <code>NeedleEngine.registerCallback(ContextEvent.ContextCreated, (args) =&gt; {})</code></p><table><thead><tr><th>ContextEvent options</th><th></th></tr></thead><tbody><tr><td><code>ContextEvent.ContextRegistered</code></td><td>Called when the context is registered to the registry.</td></tr><tr><td><code>ContextEvent.ContextCreationStart</code></td><td>Called before the first glb is loaded and can be used to initialize the physics engine. Can return a promise</td></tr><tr><td><code>ContextEvent.ContextCreated</code></td><td>Called when the context has been created before the first frame</td></tr><tr><td><code>ContextEvent.ContextDestroyed</code></td><td>Called when the context has been destroyed</td></tr><tr><td><code>ContextEvent.MissingCamera</code></td><td>Called when the context could not find a camera, currently only called during creation</td></tr><tr><td><code>ContextEvent.ContextClearing</code></td><td>Called when the context is being cleared: all objects in the scene are being destroyed and internal state is reset</td></tr><tr><td><code>ContextEvent.ContextCleared</code></td><td>Called after the context has been cleared</td></tr></tbody></table><h2 id="gizmos" tabindex="-1"><a class="header-anchor" href="#gizmos"><span>Gizmos</span></a></h2><p>The static <code>Gizmos</code> class can be used to draw lines, shapes and text which is mostly useful for debugging.<br> All gizmos function have multiple options for e.g. colors or for how long they should be displayed in the scene. Internally they are cached and re-used.</p><table><thead><tr><th>Gizmos</th><th></th></tr></thead><tbody><tr><td><code>Gizmos.DrawLabel</code></td><td>Draws a label with a background optionally. It can be attached to an object. Returns a Label handle which can be used to update the text.</td></tr><tr><td><code>Gizmos.DrawRay</code></td><td>Takes an origin and direction in worldspace to draw an infinite ray line</td></tr><tr><td><code>Gizmos.DrawDirection</code></td><td>Takes a origin and direction to draw a direction in worldspace</td></tr><tr><td><code>Gizmos.DrawLine</code></td><td>Takes two vec3 worldspace points to draw a line</td></tr><tr><td><code>Gizmos.DrawWireSphere</code></td><td>Draws a wireframe sphere in worldspace</td></tr><tr><td><code>Gizmos.DrawSphere</code></td><td>Draws a solid sphere in worldspace</td></tr><tr><td><code>Gizmos.DrawWireBox</code></td><td>Draws a wireframe box in worldspace</td></tr><tr><td><code>Gizmos.DrawWireBox3</code></td><td>Draws a wireframe box3</td></tr><tr><td><code>Gizmos.DrawArrow</code></td><td>Draws an arrow taking two points in worldspace</td></tr></tbody></table><h2 id="serialization-components-in-gltf-files" tabindex="-1"><a class="header-anchor" href="#serialization-components-in-gltf-files"><span>Serialization / Components in glTF files</span></a></h2><p>To embed components and recreate components with their correct types in glTF, we also need to save non-primitive types (everything that is not a <code>Number</code>, <code>Boolean</code> or <code>String</code>). You can do so is adding a <code>@serializable(&lt;type&gt;)</code> decorator above your field or property.</p><p><strong>Example:</strong></p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Camera </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Object3D </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyClass</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // this will be a &quot;Transform&quot; field in Unity</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Object3D</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> </span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myObjectReference</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Object3D </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">|</span><span style="--shiki-light:#8839EF;--shiki-light-font-style:italic;--shiki-dark:#CA9EE6;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> null</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // this will be a &quot;Transform&quot; array field in Unity</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // Note that the @serializable decorator contains the array content type! (Object3D and not Object3D[])</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Object3D</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> </span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myObjectReferenceList</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Object3D[] </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">|</span><span style="--shiki-light:#8839EF;--shiki-light-font-style:italic;--shiki-dark:#CA9EE6;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> null</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // for component or other objects use the object&#39;s type</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Camera</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myCameraComponent</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Camera </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">|</span><span style="--shiki-light:#8839EF;--shiki-light-font-style:italic;--shiki-dark:#CA9EE6;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> null</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>To serialize from and to custom formats, it is possible to extend from the <code>TypeSerializer</code> class and create an instance. Use <code>super()</code> in the constructor to register supported types.</p><blockquote><p><strong>Note</strong>: In addition to matching fields, matching properties will also be exported when they match to fields in the typescript file.</p></blockquote><h2 id="loading-scenes" tabindex="-1"><a class="header-anchor" href="#loading-scenes"><span>Loading Scenes</span></a></h2>`,21)),e("p",null,[i[31]||(i[31]=s("In Unity referenced Prefabs, SceneAssets and AssetReferences (Unity's Addressable System) will automatically be exported as glTF files (please refer to the ")),t(a,{to:"/export.html"},{default:n(()=>i[30]||(i[30]=[s("Export Prefabs")])),_:1}),i[32]||(i[32]=s(" documentation)."))]),i[44]||(i[44]=l(`<p>These exported gltf files will be serialized as plain string URIs. To simplify loading these from TypeScript components, we added the concept of <code>AssetReference</code> types. They can be loaded at runtime and thus allow to defer loading parts of your app or loading external content.</p><p><strong>Example:</strong></p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> AssetReference </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyClass</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // if you export a prefab or scene as a reference from Unity you&#39;ll get a path to that asset</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // which you can de-serialize to AssetReference for convenient loading</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">AssetReference</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myPrefab</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> AssetReference</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    </span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    async</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">      // directly instantiate</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">      const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myInstance </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> await</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">myPrefab</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">instantiate</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">      // you can also just load and instantiate later</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">      // const myInstance = await this.myPrefab.loadAssetAsync();</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">      // this.gameObject.add(myInstance)</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">      // this is useful if you know that you want to load this asset only once because it will not create a copy</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">      // since \`\`instantiate()\`\` does create a copy of the asset after loading it</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>AssetReferences are cached by URI, so if you reference the same exported glTF/Prefab in multiple components/scripts it will only be loaded once and then re-used.</p><h1 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h1>`,5))])}const C=h(k,[["render",c]]),m=JSON.parse(`{"path":"/scripting.html","title":"Creating and using Components","lang":"en-US","frontmatter":{"title":"Creating and using Components","tags":["scripting","serialization","csharp","typescript","javascript","components"],"head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/creating and using components.png"}],["meta",{"name":"og:description","content":"---\\nIf you are new to scripting we highly recommend reading the following guides first:"}]],"description":"---\\nIf you are new to scripting we highly recommend reading the following guides first:"},"headers":[{"level":2,"title":"When you don't need to write code","slug":"when-you-don-t-need-to-write-code","link":"#when-you-don-t-need-to-write-code","children":[]},{"level":2,"title":"Creating a new component","slug":"creating-a-new-component","link":"#creating-a-new-component","children":[]},{"level":2,"title":"Component architecture","slug":"component-architecture","link":"#component-architecture","children":[{"level":3,"title":"Lifecycle methods","slug":"lifecycle-methods","link":"#lifecycle-methods","children":[]},{"level":3,"title":"Physic event methods","slug":"physic-event-methods","link":"#physic-event-methods","children":[]},{"level":3,"title":"Input event methods","slug":"input-event-methods","link":"#input-event-methods","children":[]},{"level":3,"title":"XR event methods","slug":"xr-event-methods","link":"#xr-event-methods","children":[]},{"level":3,"title":"Coroutines","slug":"coroutines","link":"#coroutines","children":[]}]},{"level":2,"title":"Special Lifecycle hooks","slug":"special-lifecycle-hooks","link":"#special-lifecycle-hooks","children":[]},{"level":2,"title":"Finding, adding and removing components","slug":"finding-adding-and-removing-components","link":"#finding-adding-and-removing-components","children":[{"level":3,"title":"Some of the available methods:","slug":"some-of-the-available-methods","link":"#some-of-the-available-methods","children":[]}]},{"level":2,"title":"Three.js and the HTML DOM","slug":"three.js-and-the-html-dom","link":"#three.js-and-the-html-dom","children":[{"level":3,"title":"Access the scene","slug":"access-the-scene","link":"#access-the-scene","children":[]},{"level":3,"title":"Time","slug":"time","link":"#time","children":[]},{"level":3,"title":"Input","slug":"input","link":"#input","children":[]},{"level":3,"title":"Raycasting","slug":"raycasting","link":"#raycasting","children":[]},{"level":3,"title":"Networking","slug":"networking","link":"#networking","children":[]}]},{"level":2,"title":"Accessing Needle Engine and components from anywhere","slug":"accessing-needle-engine-and-components-from-anywhere","link":"#accessing-needle-engine-and-components-from-anywhere","children":[]},{"level":2,"title":"Gizmos","slug":"gizmos","link":"#gizmos","children":[]},{"level":2,"title":"Serialization / Components in glTF files","slug":"serialization-components-in-gltf-files","link":"#serialization-components-in-gltf-files","children":[]},{"level":2,"title":"Loading Scenes","slug":"loading-scenes","link":"#loading-scenes","children":[]}],"git":{"updatedTime":1742399602000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":66},{"name":"hybridherbst","username":"hybridherbst","email":"felix.herbst@gmail.com","commits":20,"url":"https://github.com/hybridherbst"},{"name":"Felix Herbst","username":"","email":"herbst@prefrontalcortex.de","commits":4}],"changelog":[{"hash":"140b3144ab30a3451430c3d033830d970c6eb059","time":1742399602000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"add more cloud and custom integration docs"},{"hash":"5bcacfd4c31be784fc5dd4d433792e0eb3b88463","time":1740305793000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md","tag":"release/4.3.0-alpha.2"},{"hash":"f62246ba766a4f5ce88850c77d41c95defa15643","time":1738882960000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"fix more links, migrate from :tags syntax which causes link issues to frontmatter"},{"hash":"eb09fc98be169edc8cecab7d0201fe89f17516cd","time":1738834481000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Add some next steps links to getting started guides + update nodejs versions"},{"hash":"0c64faf1313d420ba4c8c47435cd9876833c6805","time":1726585195000,"email":"felix.herbst@gmail.com","author":"Felix Herbst","message":"explicitly set twoslash on the scripts that work"},{"hash":"08657b85eb9143a8f91a214c83181f02d628ef4b","time":1726584301000,"email":"felix.herbst@gmail.com","author":"Felix Herbst","message":"sample scripts cleanup, adjust code, add imports so they compile, adjust twoslash config"},{"hash":"c01a70ade9f5dbd112d9a0793b1aaad7886b917f","time":1726514637000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"fixing some types"},{"hash":"d1bb8a7520be74bd36c9a6e315b344597dbd07ea","time":1725399379000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"start reordering header menu","tag":"release/3.47.9"},{"hash":"ddc5f0ac8774ef13f916b8aeb939181dde225d50","time":1718372150000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"4e1c6d137a47d3175db16e02cd7e4d3342e403a3","time":1718371519000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"0831ccf2d34d3b3ced02118fadfc6fc0202010d1","time":1716100519000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"6e4195746e711bed49e1906a82f5e8294432e1e5","time":1711886477000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"api docs link"},{"hash":"f103773ff5f8cc38ea94dc82d98ebc6cacb51885","time":1709732838000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add docs for global XR start events","tag":"release/3.34.3-exp.3"},{"hash":"bd715f0178e0cc16b10274f448186e5c81ef1865","time":1706161906000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"onLeaveXR","tag":"release/3.32.9-exp"},{"hash":"ce6e657433bca0a681f315ae7ce3ec6bd9f2a6a4","time":1706161882000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add XR and input event methods"},{"hash":"7008089d650dab0353f10db1a464f740ccd71056","time":1705682407000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add lifecycle hook info"},{"hash":"9ef8871e271887679bdd06e76ec1bb0b13595991","time":1705682279000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Move lifecycle hooks docs into own h2"},{"hash":"da315049f01abfdb8172d8b39ad0c9545d0a1e4b","time":1705682217000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add docs for lifecycle hook methods"},{"hash":"85f3d1e8776c2b9238816f6817e19b1c5057dec6","time":1699885587000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Basic info about Gizmos util methods","tag":"release/3.25.2"},{"hash":"7ab93dc608e041fcd8f62b6839448517aedec02b","time":1694513127000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add missing import"},{"hash":"bb3d6ab29995186ef04ec7e2899eb27d3af25121","time":1694512957000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Add needle-engine webcomponent examples + add ContextEvent table"},{"hash":"ea71cf22141617a4fdc3110c6ea39dc21b5da5ba","time":1686318145000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Upsdate docs"},{"hash":"1ec4d25e3e6f4f6dffdcdd1dde83cf450314fcd7","time":1685548282000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Adjust guides menu + add links to typescript + unity guides","tag":"release/3.6.4"},{"hash":"ccce1493753e98c2e4345b4de0b0de4f085205e7","time":1684951562000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"minor","tag":"release/3.6.0-exp"},{"hash":"12e7070b1efee162384ce38f73f332c878bfc31e","time":1684940378000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Move component compiler docs into separate file"},{"hash":"334972184f1370bef667796eddabe550af5d72cb","time":1684759091000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add stackblitz links","tag":"release/3.5.10-pre"},{"hash":"d3179b558cfc114c4c40602f537b045733726370","time":1684748325000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Fix link + update needle-config.json"},{"hash":"7b1e9ce1d282d8b310d22266d877f308368771c5","time":1684748013000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Update getting started links, rename project structure, add some more primitive typescript docs"},{"hash":"4089dc33eb5d5f4d81c7b10542026cbc5afe1987","time":1684676441000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Update component reference"},{"hash":"e37439c16ad6ead8384efdc5e72bbe35f8732c0b","time":1684600501000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"docs table and updated getting started and scripting"},{"hash":"b42581f3ac2ad1bf18d0fdaaf7cc502f39a4d961","time":1671370893000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"encoding"},{"hash":"25b7669c73fd82a8b5a30926542bbe2c7c5c7f83","time":1671027187000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Fix queryElement -&gt; querySelector","tag":"release/2.54.1-pre"},{"hash":"db8176ef3590fdd3c0f348935065dd8a1f9ebfe3","time":1669763662000,"email":"herbst@prefrontalcortex.de","author":"Felix Herbst","message":"minor adjustments for text etc"},{"hash":"8fee862de62603f16b174adc9e998e475394162f","time":1668445244000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Change to serializable","tag":"release/2.47.1-pre"},{"hash":"eab3609b4f9ba1e74ecfc657a7528843623e0fe8","time":1668445208000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Serializable"},{"hash":"ddeaf8229f320f9610af8decc29b91bc607e1152","time":1668342151000,"email":"herbst@prefrontalcortex.de","author":"Felix Herbst","message":"fix all places where serializable was used instead of serializeable","tag":"release/2.47.0-pre"},{"hash":"6cc84a06b6030958da7a23a5eaa1efdfc02282ec","time":1666705346000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md","tag":"release/2.40.0-pre"},{"hash":"a2277325eeca41d8bb31f02476af2c9b5dd2d148","time":1666640284000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"important emoji"},{"hash":"fc325d9a69cf708859cb910859a13747cb1ca203","time":1666640248000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add codegen example"},{"hash":"2d44b66de549406a51d95ec377571bda290bdc08","time":1666610772000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"update scripting and vanilla js example"},{"hash":"8bf6f6c316461a708e0f2941f1f3638019d83fea","time":1666603563000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"update docs, move flowcharts in own file"},{"hash":"faab8f506b6231e57d842a852231c21b11aa55d9","time":1666542505000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"copyright + update scripting and remove external link icons"},{"hash":"5afce67c6b5cbd1615252d984989582210261b18","time":1666539438000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add some buttons"},{"hash":"2767e53b022a1aac35b6601d0edf4afa16860ef7","time":1666535211000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"update docs"},{"hash":"776a339b29127a4c7a4f06d69f5b7111237e9901","time":1666268685000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"abbc95ef985feff0d3b91dc9899527710073f9f8","time":1666268477000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"05c3321cbb9164e865611c17556d2b65c2bcdae2","time":1665673151000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md","tag":"release/2.35.0-pre"},{"hash":"eb050f974907b7974e8564f64b2c75c6ec381f0d","time":1663671589000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"0ac16a839ed28abd853b8700a0ad2fbdc92f0ebb","time":1663671554000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"9769067c5ba803eab72e66599bee52d607da125f","time":1663108367000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md","tag":"release/2.21.0-pre"},{"hash":"ab064f4a2909a8554381725de182b42017aa3c31","time":1662374440000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md","tag":"release/2.16.0-pre.2"},{"hash":"48dabe485fca5005409bdc36ed3df51d34fa4c31","time":1662374384000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"17d5b0002c7f1be2eaa8435b20c556c3c0d92308","time":1662374361000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"6d9f2cccacdad2e21fa6507d18fc7665e64e15bb","time":1662322604000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"c06b4ffb6c80b6ef54baaa65e08605a34aee2f95","time":1662311948000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"d0f8cb61f5578652a72c0c19559b70dda57d15ce","time":1662311905000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"64f655cb6634e14f7bbcf008e547214e0b171b6c","time":1661853485000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md","tag":"release/2.13.0-pre"},{"hash":"1cbe5234cc55dd3305ac0927e39c969677d8d05e","time":1661815012000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"add note about UnityEvents"},{"hash":"f79ff494ad9ff1161edddf7ce900b6514492c372","time":1661639794000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"42dc0bdaceecf830eac95568eb5ceedf73d5271f","time":1661243298000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"38e664f0195f6b76a893f2bee2dd7d779a282caf","time":1660777812000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"38bb7403f7870ada593c0d09c4fe6e42fe0ee391","time":1660777768000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"4331baae42d1084e5eac93ad7ce2ace44aaa06bc","time":1660777582000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"c1b2ee6b3693da28b6ea88106c4b8329f305c251","time":1660776712000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"4cd9b62d0589fb8a6771d13bf682a5bf088d5f9b","time":1660775772000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"80e0e6c6ce4ee3cc9a7b12605cb3833e23a49ffe","time":1660775164000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"2e11679aa92e41fbf8767c6cbfe6db9499c45c98","time":1660775142000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"359b8ff823d2bf0cf58633f3a1d98c45a3288d74","time":1660775092000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"e7d8eb741b42ac060b31ad8d2cb41e1c80bbdfa5","time":1660774872000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"cff954ed8ab4fb51abe9d948be7ac25adc9e40a8","time":1660774840000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"d1be5f7488fedcb0ee5aec32c44b8000b4f2b0cd","time":1660772774000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"2a29c66d8dd496667124dbc0024bc87410668a15","time":1660687197000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"9b910dbf048d55de56df404e3cac69deae05c52a","time":1660601226000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"728bd528bf52743bb9661d62027c2c2c6907e493","time":1656574422000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"952ea16349f2b67c553df8acd8adbcd9b051da7d","time":1656327512000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"4c8583149c52ec181f1b45908e30fd18d77dec86","time":1656009183000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"fa0f555b67e243bc5a0aab697472dd9750b42b7c","time":1655393573000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"92198b64b081da67c84e8a069551fff099d79807","time":1655285333000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"fd5f9bf749c2f57c9742683fd9c507d8c5fc5bc3","time":1655285231000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"b842d68dc0f2d014d239a1dccaeaf6f10fcb72c8","time":1655285040000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"5b2f11bfefe6fcfbdbec41d41f9d29c39b4c7de0","time":1655137941000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"ba44c092f227bd3e4e2fcace1067374fd2021ef5","time":1652352938000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"0e4c611ef99dcf3bc8a4e805ae59fcaf958d2557","time":1652352909000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"256c22fbf402dfb31352b9fe8297bd4397f57429","time":1652291188000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"add version control note, add note regarding dont-generate-component"},{"hash":"97e5bff5c19d28bc1bc74fcc149126326462e979","time":1652290334000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Add // to generation attributes to make clear how these should be written"},{"hash":"1026958884c5dcf137696566cd3e5e4eab6156bc","time":1651845032000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update scripting.md"},{"hash":"d6be8f6bf6c084f27f044357a7208aba4f509c6c","time":1651265309000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"modify url param example"},{"hash":"b3b400ab09ee2ca503d20233d6c6570011dba15b","time":1651261565000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update scripting.md"},{"hash":"8e753261f8e8114acace6ff48283857d76811478","time":1651261478000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Add utils.getParam docs"},{"hash":"9816d3fc6509a7c4d7884069e4afc124bd9eed86","time":1651258076000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add docs"}]},"filePathRelative":"scripting.md"}`);export{C as comp,m as data};
