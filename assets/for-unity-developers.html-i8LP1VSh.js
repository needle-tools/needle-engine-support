import{_ as r,c as k,e as l,a as e,d as s,b as a,w as n,r as h,o}from"./app-9T6lAodh.js";const d={},c={class:"hint-container details"};function g(y,i){const t=h("RouteLink"),p=h("video-embed");return o(),k("div",null,[i[39]||(i[39]=l('<p>Needle Engine proporciona una estrecha integración con el Editor de Unity. Esto permite a desarrolladores y diseñadores trabajar juntos en un entorno familiar y ofrecer experiencias web rápidas, de alto rendimiento y ligeras.</p><p>La siguiente guía está dirigida principalmente a desarrolladores con experiencia en Unity3D, pero también puede ser útil para desarrolladores con experiencia en web o three.js. Cubre temas relacionados con cómo se hacen las cosas en Unity vs en three.js o Needle Engine.</p><p>Si eres completamente nuevo en Typescript y Javascript y quieres empezar a escribir scripts para Needle Engine, te recomendamos leer la <a href="./typescript-essentials">Guía de Fundamentos de Typescript</a> para tener una comprensión básica de las diferencias entre C# y Javascript/Typescript.</p><p>Si quieres seguir el código a la vez, puedes <a href="https://engine.needle.tools/new" target="_blank" rel="noopener noreferrer">abrir engine.needle.tools/new</a> para crear un pequeño proyecto que puedes editar en el navegador ⚡</p><h2 id="los-fundamentos" tabindex="-1"><a class="header-anchor" href="#los-fundamentos"><span>Los Fundamentos</span></a></h2><p>Needle Engine es un motor web 3D que se ejecuta sobre <a href="https://threejs.org/" target="_blank" rel="noopener noreferrer">three.js</a>. Three.js es una de las librerías de renderizado 3D basadas en webgl más populares para la web. Cada vez que nos referimos a un <code>gameObject</code> en Needle Engine, en realidad también estamos hablando de un <code>Object3D</code> de three.js, el tipo base de cualquier objeto en three.js. Ambos términos pueden usarse indistintamente. Cualquier <code>gameObject</code> <em>es</em> un <code>Object3D</code>.</p><p>Esto también significa que, si ya estás familiarizado con three.js, no tendrás ningún problema en absoluto para usar Needle Engine. Todo lo que puedes hacer con three.js también se puede hacer en Needle Engine. Si ya estás utilizando ciertas librerías, también podrás usarlas en un entorno basado en Needle Engine.</p>',7)),e("p",null,[i[2]||(i[2]=s("Nota: ")),i[3]||(i[3]=e("strong",null,[s("El Exportador de Needle Engine "),e("em",null,"NO"),s(" compila tu código C# existente a Web Assembly")],-1)),i[4]||(i[4]=s(". Si bien usar Web Assembly ")),i[5]||(i[5]=e("em",null,"puede",-1)),i[6]||(i[6]=s(" resultar en un mejor rendimiento en tiempo de ejecución, conlleva un alto coste para la velocidad de iteración y la flexibilidad en la construcción de experiencias web. Lee más sobre nuestra ")),a(t,{to:"/lang/es/vision.html"},{default:n(()=>i[0]||(i[0]=[s("visión")])),_:1}),i[7]||(i[7]=s(" y ")),a(t,{to:"/lang/es/technical-overview.html"},{default:n(()=>i[1]||(i[1]=[s("descripción técnica general")])),_:1}),i[8]||(i[8]=s("."))]),e("details",c,[i[9]||(i[9]=e("summary",null,"¿Cómo crear un nuevo proyecto de Unity con Needle Engine? (Vídeo)",-1)),a(p,{src:"https://www.youtube.com/watch?v=gZX_sqrne8U",limit_height:""})]),i[40]||(i[40]=l(`<h2 id="creaci-n-de-un-componente" tabindex="-1"><a class="header-anchor" href="#creaci-n-de-un-componente"><span>Creación de un Componente</span></a></h2><p>En Unity, creas un nuevo componente derivando de <code>MonoBehaviour</code>:</p><div class="language-csharp" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">using</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> UnityEngine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">public</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> :</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MonoBehaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Un componente personalizado en Needle Engine, por otro lado, se escribe de la siguiente manera:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyComponent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h2 id="campos-de-script" tabindex="-1"><a class="header-anchor" href="#campos-de-script"><span>Campos de Script</span></a></h2><h3 id="serializable" tabindex="-1"><a class="header-anchor" href="#serializable"><span>serializable</span></a></h3><p>Si has visto algunos scripts de Needle Engine, puede que hayas notado que algunas variables están anotadas con <code>@serializable</code> encima de su declaración. Este es un Decorador en Typescript y se puede usar para modificar o anotar código. En Needle Engine, se usa, por ejemplo, para que la serialización central sepa qué tipos esperamos en nuestro script cuando convierte la información bruta del componente almacenada en el glTF a una instancia de Componente. Considera el siguiente ejemplo:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Object3D </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Behaviour</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myOtherComponent</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">(</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Object3D</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    someOtherObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Object3D</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Esto le dice a Needle Engine que <code>myOtherComponent</code> debe ser de tipo <code>Behaviour</code>. Entonces asignará automáticamente la referencia correcta al campo cuando se cargue tu escena. Lo mismo ocurre con <code>someOtherObject</code>, donde queremos deserializar a una referencia de <code>Object3D</code>.</p><p>Ten en cuenta que en algunos casos el tipo puede omitirse. Esto se puede hacer para todos los <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">tipos primitivos en Javascript</a>. Estos son <code>boolean</code>, <code>number</code>, <code>bigint</code>, <code>string</code>, <code>null</code> y <code>undefined</code>.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    @serializable</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">()</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // &lt; no se necesita tipo aquí porque el tipo de campo es primitivo</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myString</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> string</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><h3 id="public-vs-private" tabindex="-1"><a class="header-anchor" href="#public-vs-private"><span>public vs private</span></a></h3><p>Los campos sin ningún modificador de acceso como <code>private</code>, <code>public</code> o <code>protected</code> serán por defecto <code>public</code> en javascript</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> serializable </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> SomeClass</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /// no hay modificador de acceso, lo que significa que es público:</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    myNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // haciéndolo explícitamente privado:</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myPrivateNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    protected</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myProtectedNumber</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> number</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Lo mismo ocurre con los métodos.</p><h2 id="gameobjects-y-la-escena" tabindex="-1"><a class="header-anchor" href="#gameobjects-y-la-escena"><span>GameObjects y la Escena</span></a></h2><p>Para acceder a la escena actual desde un componente, usas <code>this.scene</code>, que es equivalente a <code>this.context.scene</code>; esto te da el objeto de escena three.js raíz.</p><p>Para recorrer la jerarquía desde un componente, puedes iterar sobre los hijos de un objeto con un bucle for:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">let</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">&lt;</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> i</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">++</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children[i])</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>o puedes iterar usando el equivalente a <code>foreach</code>:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> (</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> child </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">children) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(child)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>También puedes usar métodos específicos de three.js para iterar rápidamente todos los objetos de forma recursiva usando el método <a href="https://threejs.org/docs/#api/en/core/Object3D.traverse" target="_blank" rel="noopener noreferrer"><code>traverse</code></a>:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">//---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">traverse</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(obj))</span></span></code></pre></div><p>o para recorrer solo los objetos visibles usa <a href="https://threejs.org/docs/#api/en/core/Object3D.traverseVisible" target="_blank" rel="noopener noreferrer"><code>traverseVisible</code></a> en su lugar.</p><p>Otra opción que es bastante útil cuando solo quieres iterar sobre objetos que son renderizables es consultar todos los componentes Renderer e iterar sobre ellos así:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">for</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> renderer </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">of</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getComponentsInChildren</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer))</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Para más información sobre cómo obtener componentes, consulta la siguiente sección.</p><h2 id="componentes" tabindex="-1"><a class="header-anchor" href="#componentes"><span>Componentes</span></a></h2>`,29)),e("p",null,[i[11]||(i[11]=s("Needle Engine hace un uso intensivo de un Sistema de Componentes que es similar al de Unity. Esto significa que puedes añadir o eliminar componentes a cualquier ")),i[12]||(i[12]=e("code",null,"Object3D",-1)),i[13]||(i[13]=s(" / ")),i[14]||(i[14]=e("code",null,"GameObject",-1)),i[15]||(i[15]=s(" en la escena. Un componente se registrará en el motor cuando uses ")),i[16]||(i[16]=e("code",null,"addNewComponent(<Object3D>, <ComponentType>)",-1)),i[17]||(i[17]=s(". Los métodos de evento que tendrá el componente adjunto serán llamados automáticamente por el motor (por ejemplo, ")),i[18]||(i[18]=e("code",null,"update",-1)),i[19]||(i[19]=s(" o ")),i[20]||(i[20]=e("code",null,"onBeforeRender",-1)),i[21]||(i[21]=s("). Puedes encontrar una lista completa de métodos de evento en la ")),a(t,{to:"/lang/es/scripting.html#lifecycle-methods"},{default:n(()=>i[10]||(i[10]=[s("documentación de scripting")])),_:1}),i[22]||(i[22]=s("."))]),i[41]||(i[41]=l('<h4 id="encontrar-componentes-en-la-escena" tabindex="-1"><a class="header-anchor" href="#encontrar-componentes-en-la-escena"><span>Encontrar Componentes en la Escena</span></a></h4><p>Para obtener componentes, puedes usar los métodos familiares similares a los de Unity. Ten en cuenta que lo siguiente utiliza el tipo <code>Animator</code> como ejemplo, pero también puedes usar cualquier tipo de componente, ya sea integrado o creado por ti.</p><table><thead><tr><th>Nombre del método</th><th>Descripción</th></tr></thead><tbody><tr><td><code>this.gameObject.getComponent(Animator)</code></td><td>Obtiene el componente <code>Animator</code> en un GameObject/Object3D. Devolverá la instancia de <code>Animator</code> si tiene un componente Animator o <code>null</code> si el objeto no tiene dicho componente.</td></tr><tr><td><code>this.gameObject.getComponentInChildren(Animator)</code></td><td>Obtiene el primer componente <code>Animator</code> en un GameObject/Object3D o en cualquiera de sus hijos.</td></tr><tr><td><code>this.gameObject.getComponentsInParents(Animator)</code></td><td>Obtiene todos los componentes animator en la jerarquía de padres (incluido el GameObject/Object3D actual).</td></tr></tbody></table><p>Estos métodos también están disponibles en el tipo estático GameObject. Por ejemplo, <code>GameObject.getComponent(this.gameObject, Animator)</code> para obtener el componente <code>Animator</code> en un GameObject/Object3D pasado.</p><p>Para buscar uno o varios componentes en toda la escena, puedes usar <code>GameObject.findObjectOfType(Animator)</code> o <code>GameObject.findObjectsOfType(Animator)</code>.</p><h2 id="tipos-de-unity-renombrados" tabindex="-1"><a class="header-anchor" href="#tipos-de-unity-renombrados"><span>Tipos de Unity Renombrados</span></a></h2><p>Algunos tipos específicos de Unity se asignan a diferentes nombres de tipo en nuestro motor. Consulta la siguiente lista:</p><table><thead><tr><th>Tipo en Unity</th><th>Tipo en Needle Engine</th><th></th></tr></thead><tbody><tr><td><code>UnityEvent</code></td><td><code>EventList</code></td><td>Un UnityEvent se exportará como un tipo <code>EventList</code> (usa <code>serializable(EventList)</code> para deserializar UnityEvents).</td></tr><tr><td><code>GameObject</code></td><td><code>Object3D</code></td><td></td></tr><tr><td><code>Transform</code></td><td><code>Object3D</code></td><td>En three.js y Needle Engine, un GameObject y un Transform son lo mismo (no hay un componente <code>Transform</code>). La única excepción a esta regla es al referenciar un <code>RectTransform</code>, que también es un componente en Needle Engine.</td></tr><tr><td><code>Color</code></td><td><code>RGBAColor</code></td><td>El tipo de color de three.js no tiene una propiedad alpha. Debido a eso, todos los tipos Color exportados desde Unity se exportarán como <code>RGBAColor</code>, que es un tipo personalizado de Needle Engine.</td></tr></tbody></table><h2 id="transform" tabindex="-1"><a class="header-anchor" href="#transform"><span>Transform</span></a></h2><p>Se puede acceder a los datos de Transform directamente en el <code>GameObject</code> / <code>Object3D</code>. A diferencia de Unity, no hay un componente Transform extra que contenga estos datos.</p><ul><li><code>this.gameObject.position</code> es el vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.position" target="_blank" rel="noopener noreferrer">posición</a> en espacio local.</li><li><code>this.gameObject.worldPosition</code> es la posición vector3 en espacio de mundo.</li><li><code>this.gameObject.rotation</code> es la <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.rotation" target="_blank" rel="noopener noreferrer">rotación de Euler</a> en espacio local.</li><li><code>this.gameObject.worldRotation</code> es la rotación de Euler en ángulos de Euler en espacio de mundo.</li><li><code>this.gameObject.quaternion</code> - es la <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.quaternion" target="_blank" rel="noopener noreferrer">rotación de cuaternión</a> en espacio local.</li><li><code>this.gameObject.worldQuaternion</code> es la rotación de cuaternión en espacio de mundo.</li><li><code>this.gameObject.scale</code> - es el vector3 <a href="https://threejs.org/docs/?q=obj#api/en/core/Object3D.scale" target="_blank" rel="noopener noreferrer">escala</a> en espacio local.</li><li><code>this.gameObject.worldScale</code> es la escala vector3 en espacio de mundo.</li></ul><p>La principal diferencia a tener en cuenta aquí es que <code>position</code> en three.js es por defecto una posición en espacio local, mientras que en Unity <code>position</code> sería en espacio de mundo. La siguiente sección explicará cómo obtener la posición en espacio de mundo en three.js.</p><h3 id="posici-n-rotaci-n-escala...-en-espacio-de-mundo" tabindex="-1"><a class="header-anchor" href="#posici-n-rotaci-n-escala...-en-espacio-de-mundo"><span>Posición, Rotación, Escala... EN ESPACIO DE MUNDO</span></a></h3><p>En three.js (y por lo tanto también en Needle Engine) <code>object.position</code>, <code>object.rotation</code>, <code>object.scale</code> son todas coordenadas en espacio local. Esto es diferente a Unity, donde estamos acostumbrados a que <code>position</code> sea en espacio de mundo y a usar <code>localPosition</code> para usar deliberadamente la posición en espacio local.</p><p>Si quieres acceder a las coordenadas de mundo en Needle Engine, tenemos métodos de utilidad que puedes usar con tus objetos. Llama a <code>getWorldPosition(yourObject)</code> para calcular la posición de mundo. Existen métodos similares para rotación/cuaternión y escala. Para acceder a esos métodos, simplemente impórtalos desde Needle Engine de esta manera: <code>import { getWorldPosition } from &quot;@needle.tools/engine&quot;</code>.</p>',15)),e("p",null,[i[24]||(i[24]=s("Ten en cuenta que estos métodos de utilidad como ")),i[25]||(i[25]=e("code",null,"getWorldPosition",-1)),i[26]||(i[26]=s(", ")),i[27]||(i[27]=e("code",null,"getWorldRotation",-1)),i[28]||(i[28]=s(", ")),i[29]||(i[29]=e("code",null,"getWorldScale",-1)),i[30]||(i[30]=s(" tienen internamente un buffer de instancias de Vector3 y están destinados a ser usados solo localmente. Esto significa que no debes almacenarlos en caché en tu componente, de lo contrario tu valor almacenado en caché será finalmente sobrescrito. Pero es seguro llamar a ")),i[31]||(i[31]=e("code",null,"getWorldPosition",-1)),i[32]||(i[32]=s(" varias veces en tu función para hacer cálculos sin tener que preocuparte por reutilizar la misma instancia. Si no estás seguro de lo que esto significa, deberías echar un vistazo a la sección ")),i[33]||(i[33]=e("strong",null,"Tipos Primitivos",-1)),i[34]||(i[34]=s(" en la ")),a(t,{to:"/lang/es/getting-started/typescript-essentials.html#primitive-types"},{default:n(()=>i[23]||(i[23]=[s("Guía de Fundamentos de Typescript")])),_:1}),i[35]||(i[35]=s("."))]),i[42]||(i[42]=l(`<h2 id="tiempo" tabindex="-1"><a class="header-anchor" href="#tiempo"><span>Tiempo</span></a></h2><p>Usa <code>this.context.time</code> para acceder a los datos de tiempo:</p><ul><li><code>this.context.time.time</code> es el tiempo transcurrido desde que la aplicación empezó a ejecutarse.</li><li><code>this.context.time.deltaTime</code> es el tiempo que ha pasado desde el último fotograma.</li><li><code>this.context.time.frameCount</code> es el número de fotogramas que han pasado desde que la aplicación empezó.</li><li><code>this.context.time.realtimeSinceStartup</code> es el tiempo sin escala desde que la aplicación empezó a ejecutarse.</li></ul><p>También es posible usar <code>this.context.time.timeScale</code> para ralentizar deliberadamente el tiempo, por ejemplo, para efectos de cámara lenta.</p><h2 id="raycasting" tabindex="-1"><a class="header-anchor" href="#raycasting"><span>Raycasting</span></a></h2><p>Usa <code>this.context.physics.raycast()</code> para realizar un raycast y obtener una lista de intersecciones. Si no pasas ninguna opción, el raycast se realiza desde la posición del ratón (o la primera posición táctil) en espacio de pantalla usando la <code>mainCamera</code> actualmente activa. También puedes pasar un objeto <code>RaycastOptions</code> que tiene varias configuraciones como <code>maxDistance</code>, la cámara a usar o las capas contra las que se probará.</p><p>Usa <code>this.context.physics.raycastFromRay(your_ray)</code> para realizar un raycast usando un <a href="https://threejs.org/docs/#api/en/math/Ray" target="_blank" rel="noopener noreferrer">rayo de three.js</a>.</p><p>Ten en cuenta que las llamadas anteriores realizan raycasting por defecto contra objetos visibles de la escena. Esto es diferente a Unity, donde siempre necesitas colliders para golpear objetos. La solución por defecto de three.js tiene pros y contras, siendo uno de los principales contras que puede funcionar bastante lento dependiendo de la geometría de tu escena. Puede ser especialmente lento al hacer raycasting contra mallas con skinning. Por lo tanto, se recomienda establecer generalmente los objetos con SkinnedMeshRenderers en Unity a la capa <code>Ignore Raycast</code>, que luego serán ignorados por defecto por Needle Engine también.</p><p>Otra opción es usar los métodos de raycast de física, que solo devolverán aciertos con colliders en la escena.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">physics</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">engine</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">raycast</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Aquí tienes un <a href="https://stackblitz.com/edit/needle-engine-physics-raycast-example?file=src%2Fmain.ts,package.json,.gitignore" target="_blank" rel="noopener noreferrer">ejemplo editable para raycast de física</a>.</p><h2 id="entrada" tabindex="-1"><a class="header-anchor" href="#entrada"><span>Entrada</span></a></h2><p>Usa <code>this.context.input</code> para consultar el estado de entrada:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">getPointerDown</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">))</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">            console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;POINTER DOWN&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>También puedes suscribirte a eventos en la enumeración <code>InputEvents</code> de esta manera:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> InputEvents</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> NEPointerEvent </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> MyScript</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onEnable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(){</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onDisable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // se recomienda también desuscribirse de los eventos cuando tu componente se vuelve inactivo</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">input</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">removeEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(InputEvents</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">PointerDown</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">inputPointerDown)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    inputPointerDown</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> (</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">evt</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> NEPointerEvent</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(evt)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Si quieres manejar las entradas tú mismo, también puedes suscribirte a <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener noreferrer">todos los eventos que proporciona el navegador</a> (hay muchísimos). Por ejemplo, para suscribirte al evento de clic del navegador, puedes escribir:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">window</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">addEventListener</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ()</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;MOUSE CLICK&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Ten en cuenta que en este caso tienes que manejar todos los casos tú mismo. Por ejemplo, es posible que necesites usar diferentes eventos si tu usuario está visitando tu sitio web en escritorio vs móvil vs un dispositivo VR. Estos casos son manejados automáticamente por los eventos de entrada de Needle Engine (por ejemplo, <code>PointerDown</code> se activa tanto para clic del ratón, toque en pantalla y, en caso de VR, para pulsación de botón del controlador).</p><h2 id="callbacks-del-sistema-de-entrada" tabindex="-1"><a class="header-anchor" href="#callbacks-del-sistema-de-entrada"><span>Callbacks del Sistema de Entrada</span></a></h2><p>Similar a Unity (consulta <a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.IPointerClickHandler.html" target="_blank" rel="noopener noreferrer">IPointerClickHandler en Unity</a>), también puedes registrarte para recibir eventos de entrada en el propio componente.</p><p>Para que esto funcione, asegúrate de que tu objeto tenga un componente <code>ObjectRaycaster</code> o <code>GraphicRaycaster</code> en la jerarquía de padres.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> PointerEventData </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> ReceiveClickEvent</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> implements</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> IPointerEventHandler</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    onPointerClick</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">(</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> PointerEventData</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Click&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> args)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Nota: <code>IPointerEventHandler</code> suscribe el objeto a todos los posibles eventos de puntero. Los manejadores para ellos son:</p><ul><li><code>onPointerDown</code></li><li><code>onPointerUp</code></li><li><code>onPointerEnter</code></li><li><code>onPointerMove</code></li><li><code>onPointerExit</code></li><li><code>onPointerClick</code></li></ul><p>Todos tienen un argumento <code>PointerEventData</code> que describe el evento.</p><h2 id="debug.log" tabindex="-1"><a class="header-anchor" href="#debug.log"><span>Debug.Log</span></a></h2><p>El equivalente a <code>Debug.Log()</code> en javascript es <code>console.log()</code>. También puedes usar <code>console.warn()</code> o <code>console.error()</code>.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Renderer </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 42</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello web&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// Puedes pasar tantos argumentos como quieras así:</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;Hello&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> someVariable</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> GameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">findObjectOfType</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(Renderer)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">context)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><h2 id="gizmos" tabindex="-1"><a class="header-anchor" href="#gizmos"><span>Gizmos</span></a></h2><p>En Unity, normalmente tienes que usar métodos especiales para dibujar Gizmos como <code>OnDrawGizmos</code> o <code>OnDrawGizmosSelected</code>. En Needle Engine, en cambio, tales métodos no existen y eres libre de dibujar gizmos desde cualquier parte de tu script. Ten en cuenta que entonces también es tu responsabilidad <em>no</em> dibujarlos, por ejemplo, en tu aplicación web desplegada (puedes simplemente filtrarlos por <code>if(isDevEnvironment))</code>).</p><p>Aquí tienes un ejemplo para dibujar una esfera de alambre roja durante un segundo, por ejemplo, para visualizar un punto en espacio de mundo.</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Vector3 </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;three&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> hit </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> point</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> Vector3</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">) </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// ---cut-before---</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Gizmos </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Gizmos</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">DrawWireSphere</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(hit</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">point</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.05</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0xff0000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Aquí están algunos de los métodos de gizmo disponibles:</p><table><thead><tr><th>Nombre del método</th><th></th></tr></thead><tbody><tr><td><code>Gizmos.DrawArrow</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox</code></td><td></td></tr><tr><td><code>Gizmos.DrawBox3</code></td><td></td></tr><tr><td><code>Gizmos.DrawDirection</code></td><td></td></tr><tr><td><code>Gizmos.DrawLine</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawRay</code></td><td></td></tr><tr><td><code>Gizmos.DrawSphere</code></td><td></td></tr><tr><td><code>Gizmos.DrawWireSphere</code></td><td></td></tr></tbody></table><h2 id="m-todos-de-utilidad-tiles" tabindex="-1"><a class="header-anchor" href="#m-todos-de-utilidad-tiles"><span>Métodos de Utilidad Útiles</span></a></h2><p>Importa desde <code>@needle-tools/engine</code>, por ejemplo <code>import { getParam } from &quot;@needle-tools/engine&quot;</code></p><table><thead><tr><th>Nombre del método</th><th>Descripción</th></tr></thead><tbody><tr><td><code>getParam()</code></td><td>Comprueba si existe un parámetro de URL. Devuelve true si existe pero no tiene valor (por ejemplo, <code>?help</code>), false si no se encuentra en la URL o está establecido a 0 (por ejemplo, <code>?help=0</code>), de lo contrario devuelve el valor (por ejemplo, <code>?message=test</code>).</td></tr><tr><td><code>isMobileDevice()</code></td><td>Devuelve true si se accede a la aplicación desde un dispositivo móvil.</td></tr><tr><td><code>isDevEnvironment()</code></td><td>Devuelve true si la aplicación actual se está ejecutando en un servidor local.</td></tr><tr><td><code>isMozillaXR()</code></td><td></td></tr><tr><td><code>isiOS</code></td><td></td></tr><tr><td><code>isSafari</code></td><td></td></tr></tbody></table><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> isMobileDevice </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">if</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">( </span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">isMobileDevice</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">() )</span></span></code></pre></div><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> getParam </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">// devuelve true</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> myFlag </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> getParam</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;some_flag&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">console</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">log</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(myFlag)</span></span></code></pre></div><h2 id="el-proyecto-web" tabindex="-1"><a class="header-anchor" href="#el-proyecto-web"><span>El proyecto Web</span></a></h2><p>En C#, normalmente trabajas con una solución que contiene uno o muchos proyectos. En Unity, esta solución es gestionada por Unity para ti, y cuando abres un script C#, abre el proyecto y te muestra el archivo. Normalmente instalas Paquetes usando el gestor de paquetes integrado de Unity para añadir características proporcionadas por Unity u otros desarrolladores (ya sea en tu equipo o, por ejemplo, a través del AssetStore de Unity). Unity hace un gran trabajo facilitando la adición y gestión de paquetes con su PackageManager, y puede que nunca hayas tenido que editar manualmente un archivo como el <code>manifest.json</code> (esto es lo que usa Unity para rastrear qué paquetes están instalados) o ejecutar un comando desde la línea de comandos para instalar un paquete.</p><p>En un entorno web, usas <code>npm</code> -el Node Package Manager- para gestionar dependencias / paquetes por ti. Básicamente hace lo mismo que el PackageManager de Unity: instala (descarga) paquetes desde <em>algún</em> servidor (normalmente se le llama <em>registro</em> en ese contexto) y los coloca dentro de una carpeta llamada <code>node_modules</code>.</p><p>Al trabajar con un proyecto web, la mayoría de tus dependencias se instalan desde <a href="https://npmjs.com/" target="_blank" rel="noopener noreferrer">npmjs.com</a>. Es el registro de paquetes más popular para proyectos web.</p><p>Aquí tienes un ejemplo de cómo podría verse un package.json:</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">name</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@optional_org/package_name&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">version</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;1.0.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">scripts</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;vite --host&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  },</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">dependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.9-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	},</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">devDependencies</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@types/three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;0.146.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@vitejs/plugin-basic-ssl</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^1.0.1&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">typescript</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^5.0.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^4.3.4&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	  &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">vite-plugin-compression</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^0.5.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">	}</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Nuestra plantilla por defecto usa Vite como su bundler y no tiene ningún framework frontend preinstalado. Needle Engine no tiene opinión sobre qué framework usar, así que eres libre de trabajar con el framework que prefieras. Tenemos ejemplos para frameworks populares como Vue.js, Svelte, Next.js, React o React Three Fiber.</p><h2 id="instalaci-n-de-paquetes-y-dependencias" tabindex="-1"><a class="header-anchor" href="#instalaci-n-de-paquetes-y-dependencias"><span>Instalación de paquetes y dependencias</span></a></h2><p>Para instalar una dependencia desde npm, puedes abrir tu proyecto web en una línea de comandos (o terminal) y ejecutar <code>npm i &lt;el/nombre_del_paquete&gt;</code> (abreviatura de <code>npm install</code>). Por ejemplo, ejecuta <code>npm i @needle-tools/engine</code> para instalar <a href="https://www.npmjs.com/package/@needle-tools/engine" target="_blank" rel="noopener noreferrer">Needle Engine</a>. Esto añadirá el paquete a tu <code>package.json</code> en el array <code>dependencies</code>. Para instalar un paquete solo como devDependency, puedes ejecutar <code>npm i --save-dev &lt;nombre_del_paquete&gt;</code>. Más información sobre la diferencia entre dependencies y devDependencies a continuación.</p><h3 id="cu-l-es-la-diferencia-entre-dependencies-y-devdependencies" tabindex="-1"><a class="header-anchor" href="#cu-l-es-la-diferencia-entre-dependencies-y-devdependencies"><span>¿Cuál es la diferencia entre &#39;dependencies&#39; y &#39;devDependencies&#39;?</span></a></h3><p>Puede que hayas notado que hay dos entradas que contienen <em>dependency</em>: <code>dependencies</code> y <code>devDependencies</code>.</p><p><code>dependencies</code> <strong>siempre se instalan</strong> (o empaquetan) cuando se instala tu proyecto web o en casos en los que desarrollas una librería y tu paquete se instala como una dependencia de otro proyecto.</p><p><code>devDependencies</code> <strong>solo</strong> se instalan al desarrollar el proyecto (lo que significa que cuando ejecutas <code>install</code> directamente en el directorio específico) y, de lo contrario, <strong>no</strong> se incluyen en tu proyecto.</p><h3 id="c-mo-instalo-otro-paquete-o-dependencia-y-c-mo-usarlo" tabindex="-1"><a class="header-anchor" href="#c-mo-instalo-otro-paquete-o-dependencia-y-c-mo-usarlo"><span>¿Cómo instalo otro paquete o dependencia y cómo usarlo?</span></a></h3><p>La sección <a href="#instalacin">Instalación</a> nos enseñó que puedes instalar dependencias ejecutando <code>npm i &lt;package_name&gt;</code> en el directorio de tu proyecto, donde <code>package_name</code> puede ser cualquier paquete que encuentres en <a href="https://npmjs.org" target="_blank" rel="noopener noreferrer">npm.js</a>.</p><p>Supongamos que quieres añadir una librería de tweening a tu proyecto. Usaremos <a href="https://www.npmjs.com/package/@tweenjs/tween.js" target="_blank" rel="noopener noreferrer"><code>@tweenjs/tween.js</code></a> para este ejemplo. <a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">Aquí</a> está el proyecto final si quieres adelantarte y simplemente ver el resultado.</p><p>Primero, ejecuta <code>npm install @tweenjs/tween.js</code> en la terminal y espera a que termine la instalación. Esto añadirá una nueva entrada a nuestro package.json:</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;dependencies&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">: </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@needle-tools/engine</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^3.5.11-beta&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">@tweenjs/tween.js</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;^20.0.3&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">three</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;npm:@needle-tools/three@0.146.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Luego abre uno de tus archivos de script en el que quieras usar tweening e importa al principio del archivo:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span></code></pre></div><p>Ten en cuenta que aquí importamos todos los tipos de la librería escribiendo <code>* as TWEEN</code>. También podríamos importar solo tipos específicos como <code>import { Tween } from @tweenjs/tween.js</code>.</p><p>Ahora podemos usarlo en nuestro script. Siempre se recomienda consultar la documentación de la librería que quieras usar. En el caso de tween.js, proporcionan una <a href="https://github.com/tweenjs/tween.js/blob/HEAD/docs/user_guide.md" target="_blank" rel="noopener noreferrer">guía de usuario</a> que podemos seguir. Normalmente, la página Readme del paquete en npm contiene información sobre cómo instalar y usar el paquete.</p><p>Para rotar un cubo, creamos un nuevo tipo de componente llamado <code>TweenRotation</code>, luego procedemos a crear nuestra instancia de tween para la rotación del objeto, cuántas veces debe repetirse, qué easing usar, el tween que queremos realizar y luego lo iniciamos. Luego solo tenemos que llamar a <code>update</code> en cada fotograma para actualizar la animación de tween. El script final se ve así:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Behaviour </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;@needle-tools/engine&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> *</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> as</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> TWEEN </span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;@tweenjs/tween.js&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> class</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TweenRotation</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> extends</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> Behaviour</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // guardar la instancia de nuestro tweener</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    private</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> _tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?:</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&lt;</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">any</span><span style="--shiki-light:#04A5E5;--shiki-dark:#99D1DB;">&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    start</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">        const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> rotation </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;"> this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">gameObject</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">rotation</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // crear la instancia de tween</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#8839EF;--shiki-light-font-weight:bold;--shiki-dark:#CA9EE6;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">Tween</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(rotation)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // configurarlo para que se repita indefinidamente</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">repeat</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">Infinity</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // configurar el easing a usar</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">easing</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">TWEEN</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Easing</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">Quintic</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">InOut)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // configurar los valores para el tween</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">to</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> y</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> Math</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;">PI</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 0.5</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> },</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // iniciarlo</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">start</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">    update</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // actualizar el tweening en cada fotograma</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // el &#39;?&#39; es una abreviatura para comprobar si _tween ha sido creado</span></span>
<span class="line"><span style="--shiki-light:#D20F39;--shiki-dark:#E78284;">        this</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">.</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">_tween</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">?.</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">update</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">()</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>Ahora solo tenemos que añadirlo a cualquiera de los objetos de nuestra escena para rotarlos indefinidamente. Puedes ver el script final en acción <a href="https://stackblitz.com/edit/needle-engine-tweenjs-example?file=src%2Fmain.ts" target="_blank" rel="noopener noreferrer">aquí</a>.</p><h1 id="aprende-m-s" tabindex="-1"><a class="header-anchor" href="#aprende-m-s"><span>Aprende más</span></a></h1>`,66)),e("ul",null,[i[38]||(i[38]=e("li",null,[e("a",{href:"../scripting"},"Scripting en Needle Engine")],-1)),e("li",null,[a(t,{to:"/lang/es/getting-started/typescript-essentials.html"},{default:n(()=>i[36]||(i[36]=[s("Fundamentos de Typescript")])),_:1})]),e("li",null,[a(t,{to:"/lang/es/component-reference.html"},{default:n(()=>i[37]||(i[37]=[s("Referencia de Componentes")])),_:1})])]),i[43]||(i[43]=e("hr",null,null,-1)),i[44]||(i[44]=e("p",null,"Página traducida automáticamente usando IA",-1))])}const u=r(d,[["render",g]]),m=JSON.parse(`{"path":"/lang/es/getting-started/for-unity-developers.html","title":"Introducción al Scripting para Desarrolladores de Unity","lang":"es-ES","frontmatter":{"title":"Introducción al Scripting para Desarrolladores de Unity","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/introduccin al scripting para desarrolladores de unity_es.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine proporciona una estrecha integración con el Editor de Unity. Esto permite a desarrolladores y diseñadores trabajar juntos en un entorno familiar y ofrecer experiencias web rápidas, de alto rendimiento y ligeras.\\nLa siguiente guía está dirigida principalmente a desarrolladores con experiencia en Unity3D, pero también puede ser útil para desarrolladores con experiencia en web o three.js. Cubre temas relacionados con cómo se hacen las cosas en Unity vs en three.js o Needle Engine.\\nSi eres completamente nuevo en Typescript y Javascript y quieres empezar a escribir scripts para Needle Engine, te recomendamos leer la Guía de Fundamentos de Typescript para tener una comprensión básica de las diferencias entre Cy Javascript/Typescript.\\nSi quieres seguir el código a la vez, puedes abrir engine.needle.tools/new para crear un pequeño proyecto que puedes editar en el navegador ⚡\\nNeedle Engine es un motor web 3D que se ejecuta sobre three.js. Three.js es una de las librerías de renderizado 3D basadas en webgl más populares para la web. Cada vez que nos referimos a un gameObject en Needle Engine, en realidad también estamos hablando de un Object3D de three.js, el tipo base de cualquier objeto en three.js. Ambos términos pueden usarse indistintamente. Cualquier gameObject es un Object3D.\\nEsto también significa que, si ya estás familiarizado con three.js, no tendrás ningún problema en absoluto para usar Needle Engine. Todo lo que puedes hacer con three.js también se puede hacer en Needle Engine. Si ya estás utilizando ciertas librerías, también podrás usarlas en un entorno basado en Needle Engine.\\nNota: El Exportador de Needle Engine _NO_ compila tu código Cexistente a Web Assembly.\\nSi bien usar Web Assembly _puede_ resultar en un mejor rendimiento en tiempo de ejecución"}]],"description":"---\\nNeedle Engine proporciona una estrecha integración con el Editor de Unity. Esto permite a desarrolladores y diseñadores trabajar juntos en un entorno familiar y ofrecer experiencias web rápidas, de alto rendimiento y ligeras.\\nLa siguiente guía está dirigida principalmente a desarrolladores con experiencia en Unity3D, pero también puede ser útil para desarrolladores con experiencia en web o three.js. Cubre temas relacionados con cómo se hacen las cosas en Unity vs en three.js o Needle Engine.\\nSi eres completamente nuevo en Typescript y Javascript y quieres empezar a escribir scripts para Needle Engine, te recomendamos leer la Guía de Fundamentos de Typescript para tener una comprensión básica de las diferencias entre Cy Javascript/Typescript.\\nSi quieres seguir el código a la vez, puedes abrir engine.needle.tools/new para crear un pequeño proyecto que puedes editar en el navegador ⚡\\nNeedle Engine es un motor web 3D que se ejecuta sobre three.js. Three.js es una de las librerías de renderizado 3D basadas en webgl más populares para la web. Cada vez que nos referimos a un gameObject en Needle Engine, en realidad también estamos hablando de un Object3D de three.js, el tipo base de cualquier objeto en three.js. Ambos términos pueden usarse indistintamente. Cualquier gameObject es un Object3D.\\nEsto también significa que, si ya estás familiarizado con three.js, no tendrás ningún problema en absoluto para usar Needle Engine. Todo lo que puedes hacer con three.js también se puede hacer en Needle Engine. Si ya estás utilizando ciertas librerías, también podrás usarlas en un entorno basado en Needle Engine.\\nNota: El Exportador de Needle Engine _NO_ compila tu código Cexistente a Web Assembly.\\nSi bien usar Web Assembly _puede_ resultar en un mejor rendimiento en tiempo de ejecución"},"headers":[{"level":2,"title":"Los Fundamentos","slug":"los-fundamentos","link":"#los-fundamentos","children":[]},{"level":2,"title":"Creación de un Componente","slug":"creaci-n-de-un-componente","link":"#creaci-n-de-un-componente","children":[]},{"level":2,"title":"Campos de Script","slug":"campos-de-script","link":"#campos-de-script","children":[{"level":3,"title":"serializable","slug":"serializable","link":"#serializable","children":[]},{"level":3,"title":"public vs private","slug":"public-vs-private","link":"#public-vs-private","children":[]}]},{"level":2,"title":"GameObjects y la Escena","slug":"gameobjects-y-la-escena","link":"#gameobjects-y-la-escena","children":[]},{"level":2,"title":"Componentes","slug":"componentes","link":"#componentes","children":[]},{"level":2,"title":"Tipos de Unity Renombrados","slug":"tipos-de-unity-renombrados","link":"#tipos-de-unity-renombrados","children":[]},{"level":2,"title":"Transform","slug":"transform","link":"#transform","children":[{"level":3,"title":"Posición, Rotación, Escala... EN ESPACIO DE MUNDO","slug":"posici-n-rotaci-n-escala...-en-espacio-de-mundo","link":"#posici-n-rotaci-n-escala...-en-espacio-de-mundo","children":[]}]},{"level":2,"title":"Tiempo","slug":"tiempo","link":"#tiempo","children":[]},{"level":2,"title":"Raycasting","slug":"raycasting","link":"#raycasting","children":[]},{"level":2,"title":"Entrada","slug":"entrada","link":"#entrada","children":[]},{"level":2,"title":"Callbacks del Sistema de Entrada","slug":"callbacks-del-sistema-de-entrada","link":"#callbacks-del-sistema-de-entrada","children":[]},{"level":2,"title":"Debug.Log","slug":"debug.log","link":"#debug.log","children":[]},{"level":2,"title":"Gizmos","slug":"gizmos","link":"#gizmos","children":[]},{"level":2,"title":"Métodos de Utilidad Útiles","slug":"m-todos-de-utilidad-tiles","link":"#m-todos-de-utilidad-tiles","children":[]},{"level":2,"title":"El proyecto Web","slug":"el-proyecto-web","link":"#el-proyecto-web","children":[]},{"level":2,"title":"Instalación de paquetes y dependencias","slug":"instalaci-n-de-paquetes-y-dependencias","link":"#instalaci-n-de-paquetes-y-dependencias","children":[{"level":3,"title":"¿Cuál es la diferencia entre 'dependencies' y 'devDependencies'?","slug":"cu-l-es-la-diferencia-entre-dependencies-y-devdependencies","link":"#cu-l-es-la-diferencia-entre-dependencies-y-devdependencies","children":[]},{"level":3,"title":"¿Cómo instalo otro paquete o dependencia y cómo usarlo?","slug":"c-mo-instalo-otro-paquete-o-dependencia-y-c-mo-usarlo","link":"#c-mo-instalo-otro-paquete-o-dependencia-y-c-mo-usarlo","children":[]}]}],"git":{"updatedTime":1745311490000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"25e22e2b0b9e4fc1e515be2b189c24864e21ac9f","time":1745311490000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add multilanguage support"}]},"filePathRelative":"lang/es/getting-started/for-unity-developers.md"}`);export{u as comp,m as data};
