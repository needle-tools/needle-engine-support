import{_ as t}from"./vscode-start-debugging-DkxYlFJc.js";import{_ as n,c as r,e as i,a,d as s,b as o,w as h,r as p,o as d}from"./app-9T6lAodh.js";const k={};function g(c,e){const l=p("RouteLink");return d(),r("div",null,[e[5]||(e[5]=i('<h2 id="gltf" tabindex="-1"><a class="header-anchor" href="#gltf"><span>处理 glTF 的实用资源</span></a></h2><p>在线检查 glTF 或 glb 文件：</p><ul><li><a href="https://gltf.report/" target="_blank" rel="noopener noreferrer">gltf.report</a> - 基于 three.js</li><li><a href="https://modelviewer.dev/editor" target="_blank" rel="noopener noreferrer">modelviewer.dev/editor</a> - 基于 three.js</li><li><a href="https://github.khronos.org/glTF-Sample-Viewer-Release/" target="_blank" rel="noopener noreferrer">Khronos glTF Sample Viewer</a></li><li><a href="https://sandbox.babylonjs.com/" target="_blank" rel="noopener noreferrer">Babylon Sandbox</a></li><li><a href="https://github.khronos.org/glTF-Validator/" target="_blank" rel="noopener noreferrer">glTF Validator</a></li></ul><p>在本地检查它们：</p><ul><li>使用 <a href="https://apps.microsoft.com/store/detail/gltf-shell-extensions/9NPGVJ9N57MV?hl=en-us&amp;gl=US" target="_blank" rel="noopener noreferrer">glTF Shell Extension for Windows</a> 在 glTF 和 glb 之间转换</li><li>使用 <a href="https://marketplace.visualstudio.com/items?itemName=cesium.gltf-vscode" target="_blank" rel="noopener noreferrer">glTF Tools VS Code Extension</a> 在本地查看验证错误和引擎内预览</li></ul><h2 id="url" tabindex="-1"><a class="header-anchor" href="#url"><span>内置 URL 参数</span></a></h2><p>调试标志可以作为 URL query parameters 附加。 使用 <code>?help</code> 获取所有可用参数列表。</p><p>以下是一些最常用的参数：</p><ul><li><code>help</code> 在控制台打印所有可用的 url parameter</li><li><code>console</code> 打开一个屏幕上的开发控制台，对移动调试很有用</li><li><code>printGltf</code> 将加载的 gltf 文件记录到控制台</li><li><code>stats</code> 每隔几秒显示 FPS module 并记录 threejs renderer stats</li><li><code>showcolliders</code> 可视化 physics colliders</li><li><code>gizmos</code> 启用 gizmo 渲染（例如，使用 BoxCollider 或 AxesHelper 组件时）</li><li>还有更多：请使用 <code>help</code> 查看全部</li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span>调试方法</span></a></h2>',10)),a("p",null,[e[1]||(e[1]=s("Needle Engine 还有一些非常强大和有用的调试方法，它们是静态 ")),e[2]||(e[2]=a("code",null,"Gizmos",-1)),e[3]||(e[3]=s(" 类的一部分。更多信息请参阅")),o(l,{to:"/lang/zh/scripting.html#gizmos"},{default:h(()=>e[0]||(e[0]=[s("脚本文档")])),_:1}),e[4]||(e[4]=s("。"))]),e[6]||(e[6]=i(`<h2 id="release" tabindex="-1"><a class="header-anchor" href="#release"><span>本地测试 release 构建</span></a></h2><ul><li>首先，安装 http-server: <code>npm install -g http-server</code></li><li>进行构建（development 或 production）</li><li>使用命令行工具打开 <em>dist</em> 目录</li><li>运行 <code>http-server -g</code> | <em><code>-g</code> 启用 gzip 支持</em></li><li>可选：如果您想测试 WebXR，生成一个<a href="https://stackoverflow.com/a/35231213" target="_blank" rel="noopener noreferrer">自签名 SSL 证书</a>，然后运行 <code>http-server -g -S</code> 以启用 https (WebXR 需要)。</li></ul><h2 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode"><span>VSCode</span></a></h2><p>您可以将 VSCode 附加到正在运行的本地服务器以设置 breakpoints 并调试您的代码。您可以在此处阅读更多关于<a href="https://code.visualstudio.com/docs/editor/debugging" target="_blank" rel="noopener noreferrer">使用 VSCode 进行调试</a>的信息。</p><p>在您的 web 项目中的 <code>.vscode/launch.json</code> 创建一个 launch.json 文件，内容如下：</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">{</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">version</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;0.2.0&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">configurations</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> [</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">            &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">type</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;chrome&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">            &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">request</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;launch&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">            &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">name</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;Attach Chrome&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">            &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">url</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;https://localhost:3000&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">            &quot;</span><span style="--shiki-light:#1E66F5;--shiki-dark:#8CAAEE;">webRoot</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;\${workspaceFolder}&quot;</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">        }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">    ]</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span></span></code></pre></div><p>如果您更改了服务器启动的 port，请务必相应更新 <code>url</code> 字段。 然后，您可以从 VSCode 内部启动本地服务器：</p><p><img src="`+t+'" alt=""></p><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>移动端</span></a></h2><h3 id="android" tabindex="-1"><a class="header-anchor" href="#android"><span>Android 调试</span></a></h3><p>对于 <strong>Android</strong> 调试，您可以将 Chrome Dev Tools 附加到您的设备，并直接从 PC 查看 logs。您必须将设备切换到开发模式并通过 USB 连接。</p><p>请参阅官方 chrome 文档<a href="https://developer.chrome.com/docs/devtools/remote-debugging/" target="_blank" rel="noopener noreferrer">此处</a></p><ul><li>确保您的手机上已启用 <a href="https://developer.android.com/studio/debug/dev-options" target="_blank" rel="noopener noreferrer">Developer Mode</a></li><li>通过 USB 将手机连接到电脑</li><li>在浏览器中打开此 url <code>chrome://inspect/#devices</code></li><li>在您的移动设备上允许 USB 连接到您的电脑</li><li>在您的电脑上，一段时间后 chrome 中应该会看到打开的标签页列表（在 <code>chrome://inspect/#devices</code>）</li><li>点击您想要调试的标签页上的 <code>Inspect</code></li></ul><h3 id="ios" tabindex="-1"><a class="header-anchor" href="#ios"><span>iOS 调试</span></a></h3><p>对于简单的 iOS 调试，添加 <code>?console</code> URL 参数以获取有用的屏幕 JavaScript console。</p><p>如果您有 Mac，您也可以附加到 Safari（类似于上面的 Android 流程）。</p><p>在 iOS 上使用和调试 WebXR 需要使用第三方浏览器：<a href="https://labs.mozilla.org/projects/webxr-viewer/" target="_blank" rel="noopener noreferrer">Mozilla WebXR Viewer</a>。</p><h3 id="quest" tabindex="-1"><a class="header-anchor" href="#quest"><span>Quest 调试</span></a></h3><p>Quest 只是一个 Android 设备 - 请参阅<a href="#android-debugging">Android 调试</a>部分了解步骤。</p><p>Page automatically translated using AI 页面由 AI 自动翻译</p>',20))])}const B=n(k,[["render",g]]),m=JSON.parse('{"path":"/lang/zh/debugging.html","title":"如何调试","lang":"zh-CN","frontmatter":{"title":"如何调试","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/needle engine_zh.png"}],["meta",{"name":"og:description","content":"---\\n在线检查 glTF 或 glb 文件："}]],"description":"---\\n在线检查 glTF 或 glb 文件："},"headers":[{"level":2,"title":"处理 glTF 的实用资源","slug":"gltf","link":"#gltf","children":[]},{"level":2,"title":"内置 URL 参数","slug":"url","link":"#url","children":[]},{"level":2,"title":"调试方法","slug":"","link":"#","children":[]},{"level":2,"title":"本地测试 release 构建","slug":"release","link":"#release","children":[]},{"level":2,"title":"VSCode","slug":"vscode","link":"#vscode","children":[]},{"level":2,"title":"移动端","slug":"-1","link":"#-1","children":[{"level":3,"title":"Android 调试","slug":"android","link":"#android","children":[]},{"level":3,"title":"iOS 调试","slug":"ios","link":"#ios","children":[]},{"level":3,"title":"Quest 调试","slug":"quest","link":"#quest","children":[]}]}],"git":{"updatedTime":1745311490000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":1}],"changelog":[{"hash":"25e22e2b0b9e4fc1e515be2b189c24864e21ac9f","time":1745311490000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add multilanguage support"}]},"filePathRelative":"lang/zh/debugging.md"}');export{B as comp,m as data};
