import{_ as r}from"./unity-needle-engine-modules-physics-De-OMij1.js";import{_ as o}from"./custom-loading-style-s1K1my2z.js";import{_ as h,c as p,e as l,a as i,d as s,b as t,w as n,r as d,o as c}from"./app-9T6lAodh.js";const k={},g={class:"hint-container tip"};function m(u,e){const a=d("RouteLink");return c(),p("div",null,[e[24]||(e[24]=l('<h2 id="bundling-and-web-frontends" tabindex="-1"><a class="header-anchor" href="#bundling-and-web-frontends"><span>Bundling and web frontends</span></a></h2><p>Needle Engine is build as a web component.<br> This means just install <code>@needle-tools/engine</code> in your project and include <code>&lt;needle-engine src=&quot;path/to/your.glb&quot;&gt;</code> anywhere in your web-project.</p><ul><li>Install using npm:<br><code>npm i @needle-tools/engine</code></li></ul><p>With our default Vite based project template Needle Engine gets bundled into a web app on deployment. This ensures smaller files, tree-shaking (similar to code stripping in Unity) and optimizes load times. Instead of downloading numerous small scripts and components, only one or a few are downloaded that contain the minimal code needed.</p><p>Vite (our default bundler) has a good explanation why web apps should be bundled: <a href="https://vitejs.dev/guide/why.html" target="_blank" rel="noopener noreferrer">Why Bundle for Production</a></p><h3 id="vite-vue-react-svelte-react-three-fiber..." tabindex="-1"><a class="header-anchor" href="#vite-vue-react-svelte-react-three-fiber..."><span>Vite, Vue, React, Svelte, React Three Fiber...</span></a></h3><p>Needle Engine is unoponiated about the choice of framework. Our default template uses the popular <a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">vite</a> as bundler. From there, you can add vue, svelte, nuxt, react, react-three-fiber or other frameworks, and we have samples for a lot of them. You can also integrate other bundlers, or use none at all – just plain HTML and Javascript.</p><p>Here&#39;s some example tech stacks that are possible and that we use Needle Engine with:</p>',8)),i("ul",null,[e[3]||(e[3]=l('<li><p><strong>Vite + HTML</strong> — This is what our default template uses!</p></li><li><p><strong>Vite + Vue</strong> — This is what the <a href="https://needle.tools" target="_blank" rel="noopener noreferrer">Needle Tools</a> website uses!. Find a sample to download <a href="https://github.com/needle-tools/needle-engine-samples" target="_blank" rel="noopener noreferrer">here</a>.</p></li><li><p><strong>Vite + Svelte</strong></p></li><li><p><strong>Vite + SvelteKit</strong></p></li><li><p><strong>Vite + React</strong> — There&#39;s an experimental template shipped with the Unity integration for this that you can pick when generating a project!</p></li><li><p><strong>react-three-fiber</strong> — There&#39;s an experimental template shipped with the Unity integration for this that you can pick when generating a project!</p></li><li><p><strong>Vercel &amp; Nextjs</strong> — Find a <a href="https://github.com/needle-engine/nextjs-sample" target="_blank" rel="noopener noreferrer">example nextjs project here</a></p></li>',7)),i("li",null,[i("p",null,[e[1]||(e[1]=i("strong",null,"CDN without any bundler",-1)),e[2]||(e[2]=s(" — Find a code example ")),t(a,{to:"/vanilla-js.html"},{default:n(()=>e[0]||(e[0]=[s("here")])),_:1})])])]),e[25]||(e[25]=i("p",null,[s("In short: we're currently providing a minimal vite template, but you can extend it or switch to other frameworks –"),i("br"),s(" Let us know what and how you build, and how we can improve the experience for your usecase or provide an example!")],-1)),i("div",g,[e[11]||(e[11]=i("p",{class:"hint-container-title"},"Tips",-1)),i("p",null,[e[5]||(e[5]=s("Some frameworks require custom settings in ")),e[6]||(e[6]=i("code",null,"needle.config.json",-1)),e[7]||(e[7]=s(". Learn more ")),t(a,{to:"/reference/needle-config-json.html"},{default:n(()=>e[4]||(e[4]=[s("here")])),_:1}),e[8]||(e[8]=s(". Typically, the ")),e[9]||(e[9]=i("code",null,"baseUrl",-1)),e[10]||(e[10]=s(" needs to be set."))])]),e[26]||(e[26]=l(`<details class="hint-container details"><summary>How do I create a custom project template in Unity?</summary><p>You can create and share your own web project templates to use other bundlers, build systems, or none at all.</p><p><strong>Create a new Template</strong></p><ol><li>Select <code>Create/Needle Engine/Project Template</code> to add a ProjectTemplate into the folder you want to use as a template</li><li>Done! It&#39;s that simple.</li></ol><p>The dependencies come from unity when there is a NpmDef in the project (so when your project uses local references).<br> You could also publish your packages to npm and reference them via version number.</p></details><h3 id="tree-shaking-to-reduce-bundle-size" tabindex="-1"><a class="header-anchor" href="#tree-shaking-to-reduce-bundle-size"><span>Tree-shaking to reduce bundle size</span></a></h3><p>Tree shaking refers to a common practice when it comes to bundling of web applications (<a href="https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking" target="_blank" rel="noopener noreferrer">see MSDN docs</a>). It means that code paths and features that are not used in your code will be removed from the final bundled javascript file(s) to reduce filesize. See below about features that Needle Engine includes and remove them:</p><details class="hint-container details"><summary>How to remove Rapier physics engine? (Reduce the overall bundle size removing ~2MB (~600KB when gzipping))</summary><ul><li><p><strong>Option 1</strong>: via needlePlugins config:<br> Set <code>useRapier</code> to <code>false</code> in your vite.config: <code>needlePlugins(command, needleConfig, { useRapier: false }),</code></p></li><li><p><strong>Option 2</strong>: via vite.define config:<br> Declare the <code>NEEDLE_USE_RAPIER</code> define with <code>false</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">define</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  NEEDLE_USE_RAPIER</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> false</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">},</span></span></code></pre></div></li><li><p><strong>Option 3</strong>: via .env<br> Create a <code>.env</code> file in your web project and add <code>VITE_NEEDLE_USE_RAPIER=false</code></p></li><li><p><strong>Option 4</strong>: via Unity component<br> Add the <code>Needle Engine Modules</code> component to your scene and set <code>Physics Engine</code> to <code>None</code><br><img src="`+r+`" alt=""></p></li></ul></details><h2 id="creating-a-pwa" tabindex="-1"><a class="header-anchor" href="#creating-a-pwa"><span>Creating a PWA</span></a></h2><p>We support easily creating a Progressive Web App (PWA) directly from our vite template.<br> PWAs are web applications that load like regular web pages or websites but can offer user functionality such as working offline, push notifications, and device hardware access traditionally available only to native mobile applications.</p><p>By default, PWAs created with Needle have offline support, and can optionally refresh automatically when you publish a new version of your app.</p><ol><li>Install the <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a> in your web project: <code>npm install vite-plugin-pwa --save-dev</code></li><li>Modify <code>vite.config.js</code> as seen below. Make sure to pass the same <code>pwaOptions</code> object to both <code>needlePlugins</code> and <code>VitePWA</code>.</li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">import</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> VitePWA </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> from</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &#39;vite-plugin-pwa&#39;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">export</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> default</span><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;"> defineConfig</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">async</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> ({</span><span style="--shiki-light:#E64553;--shiki-light-font-style:italic;--shiki-dark:#EA999C;--shiki-dark-font-style:italic;"> command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> })</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> =&gt;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // Create the pwaOptions object. </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    // You can edit or enter PWA settings here (e.g. change the PWA name or add icons).</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">    /** </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">@</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">type</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#DF8E1D;--shiki-light-font-style:italic;--shiki-dark:#E5C890;--shiki-dark-font-style:italic;">import(&quot;vite-plugin-pwa&quot;).VitePWAOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {};</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  </span></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    const</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> needlePlugins </span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">}</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> =</span><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;"> await</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> import</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;">&quot;@needle-tools/engine/plugins/vite/index.js&quot;</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">    return</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        plugins</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> [</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">            // pass the pwaOptions object to the needlePlugins and the VitePWA function</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            needlePlugins</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">command</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> needleConfig</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwa</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;"> pwaOptions</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> }</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#1E66F5;--shiki-light-font-style:italic;--shiki-dark:#8CAAEE;--shiki-dark-font-style:italic;">            VitePWA</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">(</span><span style="--shiki-light:#E64553;--shiki-dark:#EA999C;">pwaOptions</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">)</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">        ]</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">        // the rest of your vite config...</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">All assets are cached by default</p><p>Note that by default, all assets in your build folder are added the PWA precache – for large applications with many dynamic assets, this may not be what you want (imagine the YouTube PWA caching all videos once a user opens the app!). See <a href="#more-pwa-options">More PWA Options</a> for how to customize this behavior.</p></div><h3 id="testing-pwas" tabindex="-1"><a class="header-anchor" href="#testing-pwas"><span>Testing PWAs</span></a></h3><p>To test your PWA, deploy the page, for example using the <code>DeployToFTP</code> component.<br> Then, open the deployed page in a browser and check if the PWA features work as expected:</p><ul><li>the app shows up as installable</li><li>the app works offline</li><li>the app is detected as offline-capable PWA by <a href="https://pwabuilder.com/" target="_blank" rel="noopener noreferrer">pwabuilder.com</a></li></ul><p>PWAs use Service Workers to cache resources and provide offline support. Service Workers are somewhat harder to use during development, and typically are only enabled for builds (e.g. when you use a <code>DeployTo...</code> component).</p><p>You can enable PWA support for development by adding the following to the options object in your <code>vite.config.js</code>.</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Note: PWAs behave different in dev mode. </span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // Make sure to verify the behaviour in production builds!</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  devOptions</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    enabled</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> true</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>Please note that PWAs in development mode do not support offline usage – trying it may result in unexpected behavior.</p><h3 id="automatically-update-running-apps" tabindex="-1"><a class="header-anchor" href="#automatically-update-running-apps"><span>Automatically update running apps</span></a></h3><p>Websites typically show new or updated content on page refresh.</p><p>In some situations, you may want the page to refresh and reload automatically when a new version has been published – such as in a museum, trade show, public display, or other long-running scenarios.</p><p>To enable automatic updates, set the <code>updateInterval</code> property in the pwaOptions object to a duration (in milliseconds) in which the app should check for updates. If an update is detected, the page will reload automatically.</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  updateInterval</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 15</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 60</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;"> *</span><span style="--shiki-light:#FE640B;--shiki-dark:#EF9F76;"> 1000</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;"> // 15 minutes, in milliseconds</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">Periodic Reloads and User Data</p><p>It&#39;s not recommended to use automatic reloads in applications where users are interacting with forms or other data that could be lost on a reload. For these applications, showing a reload prompt is recommended.<br> See the <a href="https://vite-pwa-org.netlify.app/guide/prompt-for-update.html" target="_blank" rel="noopener noreferrer">Vite PWA plugin documentation</a> for more information on how to implement a reload prompt instead of automatic reloading.</p></div><h3 id="more-pwa-options" tabindex="-1"><a class="header-anchor" href="#more-pwa-options"><span>More PWA options</span></a></h3><p>Since Needle uses the <a href="https://vite-pwa-org.netlify.app/" target="_blank" rel="noopener noreferrer">Vite PWA plugin</a> under the hood, you can use all options and hooks provided by that.<br> For example, you can provide a partial manifest with a custom app title or theme color:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#4c4f69;--shiki-dark:#c6d0f5;--shiki-light-bg:#eff1f5;--shiki-dark-bg:#303446;"><pre class="shiki shiki-themes catppuccin-latte catppuccin-frappe vp-code"><code><span class="line"><span style="--shiki-light:#8839EF;--shiki-dark:#CA9EE6;">const</span><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;"> pwaOptions </span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">=</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-light-font-style:italic;--shiki-dark:#949CBB;--shiki-dark-font-style:italic;">  // manifest options provided here will override the defaults </span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">  manifest</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;"> {</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    short_name</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;My App&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#4C4F69;--shiki-dark:#C6D0F5;">    theme_color</span><span style="--shiki-light:#179299;--shiki-dark:#81C8BE;">:</span><span style="--shiki-light:#40A02B;--shiki-dark:#A6D189;"> &quot;#B2D464&quot;</span><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">,</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">  }</span></span>
<span class="line"><span style="--shiki-light:#7C7F93;--shiki-dark:#949CBB;">};</span></span></code></pre></div><p>For complex requirements like partial caching, custom service workers or different update strategies, you can remove the <code>{ pwa: pwaOptions }</code> option from <code>needlePlugins</code> and add PWA functionality directly through the Vite PWA plugin.</p><h2 id="accessing-needle-engine-and-components-from-external-javascript" tabindex="-1"><a class="header-anchor" href="#accessing-needle-engine-and-components-from-external-javascript"><span>Accessing Needle Engine and Components from external javascript</span></a></h2>`,28)),i("p",null,[e[13]||(e[13]=s("Code that you expose can be accessed from JavaScript after bundling. This allows to build viewers and other applications where there's a split between data known at edit time and data only known at runtime (e.g. dynamically loaded files, user generated content).")),e[14]||(e[14]=i("br",null,null,-1)),e[15]||(e[15]=s(" For accessing components from regular javascript outside of the engine please refer to the ")),t(a,{to:"/scripting.html#accessing-needle-engine-and-components-from-anywhere"},{default:n(()=>e[12]||(e[12]=[s("interop with regular javascript section")])),_:1})]),e[27]||(e[27]=i("h2",{id:"customizing-how-loading-looks",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#customizing-how-loading-looks"},[i("span",null,"Customizing how loading looks")])],-1)),i("p",null,[e[17]||(e[17]=s("See the ")),e[18]||(e[18]=i("em",null,"Loading Display",-1)),e[19]||(e[19]=s(" section in ")),t(a,{to:"/reference/needle-engine-attributes.html"},{default:n(()=>e[16]||(e[16]=[s("needle engine component reference")])),_:1})]),e[28]||(e[28]=l('<h3 id="builtin-styles" tabindex="-1"><a class="header-anchor" href="#builtin-styles"><span>Builtin styles</span></a></h3><p>The needle-engine loading appearance can use a light or dark skin.<br> To change the appearance use the <code>loading-style</code> attribute on the <code>&lt;needle-engine&gt;</code> web component.<br> Options are <code>light</code> and <code>dark</code> (default):</p><p><code>&lt;needle-engine loading-style=&quot;light&quot;&gt;&lt;/needle-engine&gt;</code></p><h3 id="custom-loading-style-pro-feature" tabindex="-1"><a class="header-anchor" href="#custom-loading-style-pro-feature"><span>Custom Loading Style — <em>PRO feature</em></span></a></h3>',4)),i("p",null,[e[21]||(e[21]=s("Please see the ")),e[22]||(e[22]=i("em",null,"Loading Display",-1)),e[23]||(e[23]=s(" section in ")),t(a,{to:"/reference/needle-engine-attributes.html"},{default:n(()=>e[20]||(e[20]=[s("needle engine component reference")])),_:1})]),e[29]||(e[29]=i("p",null,[i("img",{src:o,alt:"custom loading"})],-1))])}const C=h(k,[["render",m]]),w=JSON.parse('{"path":"/html.html","title":"Frameworks, Bundlers, HTML","lang":"en-US","frontmatter":{"title":"Frameworks, Bundlers, HTML","head":[["meta",{"name":"og:image","content":"https://engine.needle.tools/docs/.preview/frameworks, bundlers, html.png"}],["meta",{"name":"og:description","content":"---\\nNeedle Engine is build as a web component.\\nThis means just install @needle-tools/engine in your project and include  anywhere in your web-project."}]],"description":"---\\nNeedle Engine is build as a web component.\\nThis means just install @needle-tools/engine in your project and include  anywhere in your web-project."},"headers":[{"level":2,"title":"Bundling and web frontends","slug":"bundling-and-web-frontends","link":"#bundling-and-web-frontends","children":[{"level":3,"title":"Vite, Vue, React, Svelte, React Three Fiber...","slug":"vite-vue-react-svelte-react-three-fiber...","link":"#vite-vue-react-svelte-react-three-fiber...","children":[]},{"level":3,"title":"Tree-shaking to reduce bundle size","slug":"tree-shaking-to-reduce-bundle-size","link":"#tree-shaking-to-reduce-bundle-size","children":[]}]},{"level":2,"title":"Creating a PWA","slug":"creating-a-pwa","link":"#creating-a-pwa","children":[{"level":3,"title":"Testing PWAs","slug":"testing-pwas","link":"#testing-pwas","children":[]},{"level":3,"title":"Automatically update running apps","slug":"automatically-update-running-apps","link":"#automatically-update-running-apps","children":[]},{"level":3,"title":"More PWA options","slug":"more-pwa-options","link":"#more-pwa-options","children":[]}]},{"level":2,"title":"Accessing Needle Engine and Components from external javascript","slug":"accessing-needle-engine-and-components-from-external-javascript","link":"#accessing-needle-engine-and-components-from-external-javascript","children":[]},{"level":2,"title":"Customizing how loading looks","slug":"customizing-how-loading-looks","link":"#customizing-how-loading-looks","children":[{"level":3,"title":"Builtin styles","slug":"builtin-styles","link":"#builtin-styles","children":[]},{"level":3,"title":"Custom Loading Style — PRO feature","slug":"custom-loading-style-pro-feature","link":"#custom-loading-style-pro-feature","children":[]}]}],"git":{"updatedTime":1738682223000,"contributors":[{"name":"Marcel Wiessler","username":"","email":"marcel@gaisterhand.de","commits":17},{"name":"hybridherbst","username":"hybridherbst","email":"felix.herbst@gmail.com","commits":13,"url":"https://github.com/hybridherbst"},{"name":"Felix Herbst","username":"","email":"herbst@prefrontalcortex.de","commits":1}],"changelog":[{"hash":"c15843f607b5ae25f95038f10060834282cb078a","time":1738682223000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"fix some link issues, internal links should have .md extension"},{"hash":"d1bb8a7520be74bd36c9a6e315b344597dbd07ea","time":1725399379000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"start reordering header menu","tag":"release/3.47.9"},{"hash":"038900fb3be07062342fe9f580d2ea2ff2b24324","time":1714982168000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"update pwa docs","tag":"release/3.37.10-exp.1"},{"hash":"aeea4dad556ea8d7d929aff4490342425e06d644","time":1714739425000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"add some more code snippets for PWAs","tag":"release/3.37.9-exp"},{"hash":"64e1902cc1b48cccce456c9adfd0adc8db14548b","time":1714738625000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"update PWA docs"},{"hash":"edfb06ed86e4dcb67a380a8192a7448ff2bd2af7","time":1708344493000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add PWA docs","tag":"release/3.32.25-exp"},{"hash":"4fdade9774134611d1d6e99f980029d26d1bb924","time":1708085919000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Fix external js docs link"},{"hash":"baa2f8d312daff6fba0861ad7db26277093b3de8","time":1695302592000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add docs for <code v-pre>hide-loading-overlay</code> attribute"},{"hash":"409f7eed80dd7466611425f6ce73d687dd1ddf5e","time":1695288267000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Add needle engine loading style attributes to reference table + add example to github","tag":"release/3.18.0"},{"hash":"f400807858f141daa3958ab0b5461a6a507ce233","time":1691961484000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update loadingbar url parameter","tag":"release/3.11.6-pre"},{"hash":"b9600a2c569333da3bac75ef860ce14062ada980","time":1690188877000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"update needle.config.json docs and reference from frameworks/bundlers page","tag":"release/3.10.4-pre"},{"hash":"2c9b15c8fd2ceddd28377fced3697da661031141","time":1684592760000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"fix some docs, add nav links to sidebar that are always being shown"},{"hash":"2c17f913a8aa587a7521cfe06d767353910b52d1","time":1684501668000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add link to next template, adjust some wording"},{"hash":"8c4e85ea75eefcffb3c56ae50a566c4ac0ce63a4","time":1683483615000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"rapier treeshake details wording","tag":"release/3.5.1-exp"},{"hash":"fcc2524aba789a80956ec764926a15c49dc8b359","time":1683483021000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"add tree shaking info"},{"hash":"5be0c8e8137639a8c48a178e07b20d2506860f32","time":1682679108000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"fix typo","tag":"release/3.2.15-exp"},{"hash":"4b7fc266b53a56f97da817c62163aff8d18c6957","time":1682606433000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"Update bundling/html page","tag":"release/3.2.13-exp.1"},{"hash":"db8176ef3590fdd3c0f348935065dd8a1f9ebfe3","time":1669763662000,"email":"herbst@prefrontalcortex.de","author":"Felix Herbst","message":"minor adjustments for text etc"},{"hash":"26daffd0d43405cef59650796893b1fe0108d445","time":1666640338000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"minor format fix"},{"hash":"8bf6f6c316461a708e0f2941f1f3638019d83fea","time":1666603563000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"update docs, move flowcharts in own file"},{"hash":"faab8f506b6231e57d842a852231c21b11aa55d9","time":1666542505000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"copyright + update scripting and remove external link icons"},{"hash":"2767e53b022a1aac35b6601d0edf4afa16860ef7","time":1666535211000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"update docs"},{"hash":"822f0c1a662d60bd027c00119f97efbf2ff36486","time":1661815285000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update html.md"},{"hash":"461bd05318eae31144a8a18655873f027a9fa6dc","time":1661211577000,"email":"marwie@users.noreply.github.com","author":"Marcel Wiessler","message":"Update html.md"},{"hash":"ff119f32670423f8606142eeb6873927babbdd6a","time":1661203954000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update html.md"},{"hash":"e339a0878c66eeae0766bbafb40f2b3c78d63808","time":1660674746000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update html.md"},{"hash":"00fa2c6e8ff9c2c7ac38aa70092f93d8bf2c9f74","time":1660674684000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update html.md"},{"hash":"49c9b1182d1b957c56f356a204771c54498837a5","time":1660603096000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update html.md"},{"hash":"3f144f8bf5fa7d70cc5b511ed0b703072a1866f5","time":1660603047000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update html.md"},{"hash":"15c947e010bb68d5ae33d1c052025b932efbd0ec","time":1660602386000,"email":"felix.herbst@gmail.com","author":"hybridherbst","message":"Update html.md"},{"hash":"621d7808d503ba0b8823e196454fc563e7f35f9a","time":1652343073000,"email":"marcel@gaisterhand.de","author":"Marcel Wiessler","message":"start html docs"}]},"filePathRelative":"html.md"}');export{C as comp,w as data};
